<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>AddToHistogram</SensitiveFunction>
	<ReferableCheck>sc &gt;= thresh-&gt;globT &amp;&amp; evalue &lt;= thresh-&gt;globE<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>AllocPlan7Body</SensitiveFunction>
	<ReferableCheck>(__extension__ (__builtin_constant_p(5) &amp;&amp; ((__builtin_constant_p(buffer) &amp;&amp; strlen(buffer) &lt; ((size_t)(5))) || (__builtin_constant_p("MAP  ") &amp;&amp; strlen("MAP  ") &lt; ((size_t)(5)))) ? __extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(buffer) &amp;&amp; __builtin_constant_p("MAP  ") &amp;&amp; (__s1_len = __builtin_strlen(buffer) , __s2_len = __builtin_strlen("MAP  ") , (!((size_t)(const void *)((buffer) + 1) - (size_t)(const void *)(buffer) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("MAP  ") + 1) - (size_t)(const void *)("MAP  ") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(buffer, "MAP  ") : (__builtin_constant_p(buffer) &amp;&amp; ((size_t)(const void *)((buffer) + 1) - (size_t)(const void *)(buffer) == 1) &amp;&amp; (__s1_len = __builtin_strlen(buffer) , __s1_len &lt; 4) ? (__builtin_constant_p("MAP  ") &amp;&amp; ((size_t)(const void *)(("MAP  ") + 1) - (size_t)(const void *)("MAP  ") == 1) ? __builtin_strcmp(buffer, "MAP  ") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("MAP  ");
        int __result = (((const unsigned char *)(const char *)(buffer))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(buffer))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(buffer))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(buffer))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("MAP  ") &amp;&amp; ((size_t)(const void *)(("MAP  ") + 1) - (size_t)(const void *)("MAP  ") == 1) &amp;&amp; (__s2_len = __builtin_strlen("MAP  ") , __s2_len &lt; 4) ? (__builtin_constant_p(buffer) &amp;&amp; ((size_t)(const void *)((buffer) + 1) - (size_t)(const void *)(buffer) == 1) ? __builtin_strcmp(buffer, "MAP  ") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(buffer);
        int __result = (((const unsigned char *)(const char *)("MAP  "))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("MAP  "))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("MAP  "))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("MAP  "))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(buffer, "MAP  "))));
}) : strncmp(buffer, "MAP  ", 5))) == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(__extension__ (__builtin_constant_p(10) &amp;&amp; ((__builtin_constant_p(buffer) &amp;&amp; strlen(buffer) &lt; ((size_t)(10))) || (__builtin_constant_p("HMMER v1.9") &amp;&amp; strlen("HMMER v1.9") &lt; ((size_t)(10)))) ? __extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(buffer) &amp;&amp; __builtin_constant_p("HMMER v1.9") &amp;&amp; (__s1_len = __builtin_strlen(buffer) , __s2_len = __builtin_strlen("HMMER v1.9") , (!((size_t)(const void *)((buffer) + 1) - (size_t)(const void *)(buffer) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("HMMER v1.9") + 1) - (size_t)(const void *)("HMMER v1.9") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(buffer, "HMMER v1.9") : (__builtin_constant_p(buffer) &amp;&amp; ((size_t)(const void *)((buffer) + 1) - (size_t)(const void *)(buffer) == 1) &amp;&amp; (__s1_len = __builtin_strlen(buffer) , __s1_len &lt; 4) ? (__builtin_constant_p("HMMER v1.9") &amp;&amp; ((size_t)(const void *)(("HMMER v1.9") + 1) - (size_t)(const void *)("HMMER v1.9") == 1) ? __builtin_strcmp(buffer, "HMMER v1.9") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("HMMER v1.9");
        int __result = (((const unsigned char *)(const char *)(buffer))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(buffer))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(buffer))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(buffer))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("HMMER v1.9") &amp;&amp; ((size_t)(const void *)(("HMMER v1.9") + 1) - (size_t)(const void *)("HMMER v1.9") == 1) &amp;&amp; (__s2_len = __builtin_strlen("HMMER v1.9") , __s2_len &lt; 4) ? (__builtin_constant_p(buffer) &amp;&amp; ((size_t)(const void *)((buffer) + 1) - (size_t)(const void *)(buffer) == 1) ? __builtin_strcmp(buffer, "HMMER v1.9") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(buffer);
        int __result = (((const unsigned char *)(const char *)("HMMER v1.9"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("HMMER v1.9"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("HMMER v1.9"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("HMMER v1.9"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(buffer, "HMMER v1.9"))));
}) : strncmp(buffer, "HMMER v1.9", 10))) != 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>AllocPlan7Matrix</SensitiveFunction>
	<ReferableCheck>k &lt; hmm-&gt;M<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(__extension__ (__builtin_constant_p(10) &amp;&amp; ((__builtin_constant_p(buffer) &amp;&amp; strlen(buffer) &lt; ((size_t)(10))) || (__builtin_constant_p("HMMER v1.9") &amp;&amp; strlen("HMMER v1.9") &lt; ((size_t)(10)))) ? __extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(buffer) &amp;&amp; __builtin_constant_p("HMMER v1.9") &amp;&amp; (__s1_len = __builtin_strlen(buffer) , __s2_len = __builtin_strlen("HMMER v1.9") , (!((size_t)(const void *)((buffer) + 1) - (size_t)(const void *)(buffer) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("HMMER v1.9") + 1) - (size_t)(const void *)("HMMER v1.9") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(buffer, "HMMER v1.9") : (__builtin_constant_p(buffer) &amp;&amp; ((size_t)(const void *)((buffer) + 1) - (size_t)(const void *)(buffer) == 1) &amp;&amp; (__s1_len = __builtin_strlen(buffer) , __s1_len &lt; 4) ? (__builtin_constant_p("HMMER v1.9") &amp;&amp; ((size_t)(const void *)(("HMMER v1.9") + 1) - (size_t)(const void *)("HMMER v1.9") == 1) ? __builtin_strcmp(buffer, "HMMER v1.9") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("HMMER v1.9");
        int __result = (((const unsigned char *)(const char *)(buffer))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(buffer))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(buffer))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(buffer))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("HMMER v1.9") &amp;&amp; ((size_t)(const void *)(("HMMER v1.9") + 1) - (size_t)(const void *)("HMMER v1.9") == 1) &amp;&amp; (__s2_len = __builtin_strlen("HMMER v1.9") , __s2_len &lt; 4) ? (__builtin_constant_p(buffer) &amp;&amp; ((size_t)(const void *)((buffer) + 1) - (size_t)(const void *)(buffer) == 1) ? __builtin_strcmp(buffer, "HMMER v1.9") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(buffer);
        int __result = (((const unsigned char *)(const char *)("HMMER v1.9"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("HMMER v1.9"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("HMMER v1.9"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("HMMER v1.9"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(buffer, "HMMER v1.9"))));
}) : strncmp(buffer, "HMMER v1.9", 10))) != 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>BZ2_blockSort</SensitiveFunction>
	<ReferableCheck>s-&gt;nblock &gt; 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(__extension__ (__builtin_constant_p(10) &amp;&amp; ((__builtin_constant_p(buffer) &amp;&amp; strlen(buffer) &lt; ((size_t)(10))) || (__builtin_constant_p("HMMER v1.9") &amp;&amp; strlen("HMMER v1.9") &lt; ((size_t)(10)))) ? __extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(buffer) &amp;&amp; __builtin_constant_p("HMMER v1.9") &amp;&amp; (__s1_len = __builtin_strlen(buffer) , __s2_len = __builtin_strlen("HMMER v1.9") , (!((size_t)(const void *)((buffer) + 1) - (size_t)(const void *)(buffer) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("HMMER v1.9") + 1) - (size_t)(const void *)("HMMER v1.9") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(buffer, "HMMER v1.9") : (__builtin_constant_p(buffer) &amp;&amp; ((size_t)(const void *)((buffer) + 1) - (size_t)(const void *)(buffer) == 1) &amp;&amp; (__s1_len = __builtin_strlen(buffer) , __s1_len &lt; 4) ? (__builtin_constant_p("HMMER v1.9") &amp;&amp; ((size_t)(const void *)(("HMMER v1.9") + 1) - (size_t)(const void *)("HMMER v1.9") == 1) ? __builtin_strcmp(buffer, "HMMER v1.9") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("HMMER v1.9");
        int __result = (((const unsigned char *)(const char *)(buffer))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(buffer))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(buffer))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(buffer))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("HMMER v1.9") &amp;&amp; ((size_t)(const void *)(("HMMER v1.9") + 1) - (size_t)(const void *)("HMMER v1.9") == 1) &amp;&amp; (__s2_len = __builtin_strlen("HMMER v1.9") , __s2_len &lt; 4) ? (__builtin_constant_p(buffer) &amp;&amp; ((size_t)(const void *)((buffer) + 1) - (size_t)(const void *)(buffer) == 1) ? __builtin_strcmp(buffer, "HMMER v1.9") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(buffer);
        int __result = (((const unsigned char *)(const char *)("HMMER v1.9"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("HMMER v1.9"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("HMMER v1.9"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("HMMER v1.9"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(buffer, "HMMER v1.9"))));
}) : strncmp(buffer, "HMMER v1.9", 10))) != 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>BZ2_bsInitWrite</SensitiveFunction>
	<ReferableCheck>s-&gt;nblock &gt; 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(__extension__ (__builtin_constant_p(10) &amp;&amp; ((__builtin_constant_p(buffer) &amp;&amp; strlen(buffer) &lt; ((size_t)(10))) || (__builtin_constant_p("HMMER v1.9") &amp;&amp; strlen("HMMER v1.9") &lt; ((size_t)(10)))) ? __extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(buffer) &amp;&amp; __builtin_constant_p("HMMER v1.9") &amp;&amp; (__s1_len = __builtin_strlen(buffer) , __s2_len = __builtin_strlen("HMMER v1.9") , (!((size_t)(const void *)((buffer) + 1) - (size_t)(const void *)(buffer) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("HMMER v1.9") + 1) - (size_t)(const void *)("HMMER v1.9") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(buffer, "HMMER v1.9") : (__builtin_constant_p(buffer) &amp;&amp; ((size_t)(const void *)((buffer) + 1) - (size_t)(const void *)(buffer) == 1) &amp;&amp; (__s1_len = __builtin_strlen(buffer) , __s1_len &lt; 4) ? (__builtin_constant_p("HMMER v1.9") &amp;&amp; ((size_t)(const void *)(("HMMER v1.9") + 1) - (size_t)(const void *)("HMMER v1.9") == 1) ? __builtin_strcmp(buffer, "HMMER v1.9") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("HMMER v1.9");
        int __result = (((const unsigned char *)(const char *)(buffer))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(buffer))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(buffer))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(buffer))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("HMMER v1.9") &amp;&amp; ((size_t)(const void *)(("HMMER v1.9") + 1) - (size_t)(const void *)("HMMER v1.9") == 1) &amp;&amp; (__s2_len = __builtin_strlen("HMMER v1.9") , __s2_len &lt; 4) ? (__builtin_constant_p(buffer) &amp;&amp; ((size_t)(const void *)((buffer) + 1) - (size_t)(const void *)(buffer) == 1) ? __builtin_strcmp(buffer, "HMMER v1.9") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(buffer);
        int __result = (((const unsigned char *)(const char *)("HMMER v1.9"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("HMMER v1.9"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("HMMER v1.9"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("HMMER v1.9"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(buffer, "HMMER v1.9"))));
}) : strncmp(buffer, "HMMER v1.9", 10))) != 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>BZ2_bzCompressInit</SensitiveFunction>
	<ReferableCheck>dest == ((void *)0) || destLen == ((void *)0) || source == ((void *)0) || blockSize100k &lt; 1 || blockSize100k &gt; 9 || verbosity &lt; 0 || verbosity &gt; 4 || workFactor &lt; 0 || workFactor &gt; 250<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>f == ((void *)0) || (blockSize100k &lt; 1 || blockSize100k &gt; 9) || (workFactor &lt; 0 || workFactor &gt; 250) || (verbosity &lt; 0 || verbosity &gt; 4)<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>BZ2_bzDecompressInit</SensitiveFunction>
	<ReferableCheck>dest == ((void *)0) || destLen == ((void *)0) || source == ((void *)0) || (small != 0 &amp;&amp; small != 1) || verbosity &lt; 0 || verbosity &gt; 4<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>f == ((void *)0) || (small != 0 &amp;&amp; small != 1) || (verbosity &lt; 0 || verbosity &gt; 4) || (unused == ((void *)0) &amp;&amp; nUnused != 0) || (unused != ((void *)0) &amp;&amp; (nUnused &lt; 0 || nUnused &gt; 5000))<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>BZ2_bzRead</SensitiveFunction>
	<ReferableCheck>((bzFile *)b)-&gt;lastErr == 4<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>f == ((void *)0) || (small != 0 &amp;&amp; small != 1) || (verbosity &lt; 0 || verbosity &gt; 4) || (unused == ((void *)0) &amp;&amp; nUnused != 0) || (unused != ((void *)0) &amp;&amp; (nUnused &lt; 0 || nUnused &gt; 5000))<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>BZ2_bzReadClose</SensitiveFunction>
	<ReferableCheck>b == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>f == ((void *)0) || (small != 0 &amp;&amp; small != 1) || (verbosity &lt; 0 || verbosity &gt; 4) || (unused == ((void *)0) &amp;&amp; nUnused != 0) || (unused != ((void *)0) &amp;&amp; (nUnused &lt; 0 || nUnused &gt; 5000))<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>BZ2_bzReadOpen</SensitiveFunction>
	<ReferableCheck>ferror(zStream)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>f == ((void *)0) || (small != 0 &amp;&amp; small != 1) || (verbosity &lt; 0 || verbosity &gt; 4) || (unused == ((void *)0) &amp;&amp; nUnused != 0) || (unused != ((void *)0) &amp;&amp; (nUnused &lt; 0 || nUnused &gt; 5000))<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>BZ2_bzWriteClose</SensitiveFunction>
	<ReferableCheck>b == ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>f == ((void *)0) || (small != 0 &amp;&amp; small != 1) || (verbosity &lt; 0 || verbosity &gt; 4) || (unused == ((void *)0) &amp;&amp; nUnused != 0) || (unused != ((void *)0) &amp;&amp; (nUnused &lt; 0 || nUnused &gt; 5000))<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>BZ2_bzWriteOpen</SensitiveFunction>
	<ReferableCheck>ferror(zStream)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>blockSize100k &lt; 1<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>BZ2_compressBlock</SensitiveFunction>
	<ReferableCheck>s-&gt;state == 1<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>blockSize100k &lt; 1<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>BZ2_hbAssignCodes</SensitiveFunction>
	<ReferableCheck>s-&gt;len[t][i] &gt; maxLen<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>blockSize100k &lt; 1<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>BZ2_hbCreateDecodeTables</SensitiveFunction>
	<ReferableCheck>s-&gt;len[t][i] &gt; maxLen<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>blockSize100k &lt; 1<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>BZ2_indexIntoF</SensitiveFunction>
	<ReferableCheck>s-&gt;cftab[i] &lt; 0 || s-&gt;cftab[i] &gt; nblock<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>blockSize100k &lt; 1<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>Cluster</SensitiveFunction>
	<ReferableCheck>nseq == 1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>blockSize100k &lt; 1<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>Compose_Transforms</SensitiveFunction>
	<ReferableCheck>Skysphere-&gt;Trans == __null<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>blockSize100k &lt; 1<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>Die</SensitiveFunction>
	<ReferableCheck>sizeof ((int)s2[len - 1]) &gt; 1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;type == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>Strparse("&gt;&gt;&gt;&gt;([^ ]+) .+2BIT +Len: ([0-9]+)", V-&gt;buf, 2)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>sqinfo-&gt;flags &amp; (1 &lt;&lt; 3)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>asize == 20<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>EVDCensoredFit</SensitiveFunction>
	<ReferableCheck>hsize &lt; 5<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;type == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>Strparse("&gt;&gt;&gt;&gt;([^ ]+) .+2BIT +Len: ([0-9]+)", V-&gt;buf, 2)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>sqinfo-&gt;flags &amp; (1 &lt;&lt; 3)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>asize == 20<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>EVDMaxLikelyFit</SensitiveFunction>
	<ReferableCheck>hsize &lt; 5<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;type == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>Strparse("&gt;&gt;&gt;&gt;([^ ]+) .+2BIT +Len: ([0-9]+)", V-&gt;buf, 2)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>sqinfo-&gt;flags &amp; (1 &lt;&lt; 3)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>asize == 20<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>EnvFileOpen</SensitiveFunction>
	<ReferableCheck>(fp = fopen(pamfile, "r")) == ((void *)0) &amp;&amp; (fp = EnvFileOpen(pamfile, "BLASTMAT", ((void *)0))) == ((void *)0) &amp;&amp; (fp = EnvFileOpen(blastpamfile, "BLASTMAT", ((void *)0))) == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(dbfp-&gt;f = fopen(filename, "r")) == ((void *)0) &amp;&amp; (dbfp-&gt;f = EnvFileOpen(filename, env, ((void *)0))) == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(hmmfp-&gt;f = fopen(hmmfile, "r")) != ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(filename) &amp;&amp; __builtin_constant_p("-") &amp;&amp; (__s1_len = __builtin_strlen(filename) , __s2_len = __builtin_strlen("-") , (!((size_t)(const void *)((filename) + 1) - (size_t)(const void *)(filename) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("-") + 1) - (size_t)(const void *)("-") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(filename, "-") : (__builtin_constant_p(filename) &amp;&amp; ((size_t)(const void *)((filename) + 1) - (size_t)(const void *)(filename) == 1) &amp;&amp; (__s1_len = __builtin_strlen(filename) , __s1_len &lt; 4) ? (__builtin_constant_p("-") &amp;&amp; ((size_t)(const void *)(("-") + 1) - (size_t)(const void *)("-") == 1) ? __builtin_strcmp(filename, "-") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("-");
        int __result = (((const unsigned char *)(const char *)(filename))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(filename))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(filename))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(filename))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("-") &amp;&amp; ((size_t)(const void *)(("-") + 1) - (size_t)(const void *)("-") == 1) &amp;&amp; (__s2_len = __builtin_strlen("-") , __s2_len &lt; 4) ? (__builtin_constant_p(filename) &amp;&amp; ((size_t)(const void *)((filename) + 1) - (size_t)(const void *)(filename) == 1) ? __builtin_strcmp(filename, "-") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(filename);
        int __result = (((const unsigned char *)(const char *)("-"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("-"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("-"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("-"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(filename, "-"))));
}) == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>asize == 20<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>ExtremeValueP</SensitiveFunction>
	<ReferableCheck>sc &gt;= ((1.7976931348623157E+308) &gt; 0 ? log(1.7976931348623157E+308) * 1.44269504 : -9999.)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(dbfp-&gt;f = fopen(filename, "r")) == ((void *)0) &amp;&amp; (dbfp-&gt;f = EnvFileOpen(filename, env, ((void *)0))) == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(hmmfp-&gt;f = fopen(hmmfile, "r")) != ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(filename) &amp;&amp; __builtin_constant_p("-") &amp;&amp; (__s1_len = __builtin_strlen(filename) , __s2_len = __builtin_strlen("-") , (!((size_t)(const void *)((filename) + 1) - (size_t)(const void *)(filename) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("-") + 1) - (size_t)(const void *)("-") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(filename, "-") : (__builtin_constant_p(filename) &amp;&amp; ((size_t)(const void *)((filename) + 1) - (size_t)(const void *)(filename) == 1) &amp;&amp; (__s1_len = __builtin_strlen(filename) , __s1_len &lt; 4) ? (__builtin_constant_p("-") &amp;&amp; ((size_t)(const void *)(("-") + 1) - (size_t)(const void *)("-") == 1) ? __builtin_strcmp(filename, "-") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("-");
        int __result = (((const unsigned char *)(const char *)(filename))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(filename))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(filename))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(filename))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("-") &amp;&amp; ((size_t)(const void *)(("-") + 1) - (size_t)(const void *)("-") == 1) &amp;&amp; (__s2_len = __builtin_strlen("-") , __s2_len &lt; 4) ? (__builtin_constant_p(filename) &amp;&amp; ((size_t)(const void *)((filename) + 1) - (size_t)(const void *)(filename) == 1) ? __builtin_strcmp(filename, "-") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(filename);
        int __result = (((const unsigned char *)(const char *)("-"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("-"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("-"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("-"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(filename, "-"))));
}) == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>asize == 20<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>ExtremeValueSetHistogram</SensitiveFunction>
	<ReferableCheck>new_highbound &gt;= highbound<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(dbfp-&gt;f = fopen(filename, "r")) == ((void *)0) &amp;&amp; (dbfp-&gt;f = EnvFileOpen(filename, env, ((void *)0))) == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(hmmfp-&gt;f = fopen(hmmfile, "r")) != ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(filename) &amp;&amp; __builtin_constant_p("-") &amp;&amp; (__s1_len = __builtin_strlen(filename) , __s2_len = __builtin_strlen("-") , (!((size_t)(const void *)((filename) + 1) - (size_t)(const void *)(filename) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("-") + 1) - (size_t)(const void *)("-") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(filename, "-") : (__builtin_constant_p(filename) &amp;&amp; ((size_t)(const void *)((filename) + 1) - (size_t)(const void *)(filename) == 1) &amp;&amp; (__s1_len = __builtin_strlen(filename) , __s1_len &lt; 4) ? (__builtin_constant_p("-") &amp;&amp; ((size_t)(const void *)(("-") + 1) - (size_t)(const void *)("-") == 1) ? __builtin_strcmp(filename, "-") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("-");
        int __result = (((const unsigned char *)(const char *)(filename))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(filename))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(filename))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(filename))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("-") &amp;&amp; ((size_t)(const void *)(("-") + 1) - (size_t)(const void *)("-") == 1) &amp;&amp; (__s2_len = __builtin_strlen("-") , __s2_len &lt; 4) ? (__builtin_constant_p(filename) &amp;&amp; ((size_t)(const void *)((filename) + 1) - (size_t)(const void *)(filename) == 1) ? __builtin_strcmp(filename, "-") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(filename);
        int __result = (((const unsigned char *)(const char *)("-"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("-"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("-"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("-"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(filename, "-"))));
}) == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>asize == 20<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>FChoose</SensitiveFunction>
	<ReferableCheck>type == 1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(dbfp-&gt;f = fopen(filename, "r")) == ((void *)0) &amp;&amp; (dbfp-&gt;f = EnvFileOpen(filename, env, ((void *)0))) == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(hmmfp-&gt;f = fopen(hmmfile, "r")) != ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(filename) &amp;&amp; __builtin_constant_p("-") &amp;&amp; (__s1_len = __builtin_strlen(filename) , __s2_len = __builtin_strlen("-") , (!((size_t)(const void *)((filename) + 1) - (size_t)(const void *)(filename) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("-") + 1) - (size_t)(const void *)("-") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(filename, "-") : (__builtin_constant_p(filename) &amp;&amp; ((size_t)(const void *)((filename) + 1) - (size_t)(const void *)(filename) == 1) &amp;&amp; (__s1_len = __builtin_strlen(filename) , __s1_len &lt; 4) ? (__builtin_constant_p("-") &amp;&amp; ((size_t)(const void *)(("-") + 1) - (size_t)(const void *)("-") == 1) ? __builtin_strcmp(filename, "-") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("-");
        int __result = (((const unsigned char *)(const char *)(filename))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(filename))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(filename))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(filename))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("-") &amp;&amp; ((size_t)(const void *)(("-") + 1) - (size_t)(const void *)("-") == 1) &amp;&amp; (__s2_len = __builtin_strlen("-") , __s2_len &lt; 4) ? (__builtin_constant_p(filename) &amp;&amp; ((size_t)(const void *)((filename) + 1) - (size_t)(const void *)(filename) == 1) ? __builtin_strcmp(filename, "-") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(filename);
        int __result = (((const unsigned char *)(const char *)("-"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("-"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("-"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("-"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(filename, "-"))));
}) == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>asize == 20<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>FCopy</SensitiveFunction>
	<ReferableCheck>hmm-&gt;ipri[k] &gt;= pri-&gt;inum<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>hmm-&gt;tpri[k] &gt;= pri-&gt;tnum<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>type == 1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>hmm-&gt;mpri[k] &gt;= pri-&gt;mnum<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>asize == 20<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>FNorm</SensitiveFunction>
	<ReferableCheck>(prior-&gt;strategy == 0 || prior-&gt;strategy == 1) &amp;&amp; prior-&gt;mnum &gt; 1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>hmm-&gt;tpri[k] &gt;= pri-&gt;tnum<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>type == 1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>hmm-&gt;mpri[k] &gt;= pri-&gt;mnum<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>asize == 20<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>FSet</SensitiveFunction>
	<ReferableCheck>hmm-&gt;ipri[k] &gt;= pri-&gt;inum<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>hmm-&gt;tpri[k] &gt;= pri-&gt;tnum<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>nseq == 1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;nseq == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>hmm-&gt;mpri[k] &gt;= pri-&gt;mnum<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>FSum</SensitiveFunction>
	<ReferableCheck>(prior-&gt;strategy == 0 || prior-&gt;strategy == 1) &amp;&amp; prior-&gt;mnum &gt; 1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>hmm-&gt;tpri[k] &gt;= pri-&gt;tnum<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>nseq == 1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;nseq == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>hmm-&gt;mpri[k] &gt;= pri-&gt;mnum<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>FileConcat</SensitiveFunction>
	<ReferableCheck>(hmmfp-&gt;f = fopen(hmmfile, "r")) != ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(filename) &amp;&amp; __builtin_constant_p("-") &amp;&amp; (__s1_len = __builtin_strlen(filename) , __s2_len = __builtin_strlen("-") , (!((size_t)(const void *)((filename) + 1) - (size_t)(const void *)(filename) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("-") + 1) - (size_t)(const void *)("-") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(filename, "-") : (__builtin_constant_p(filename) &amp;&amp; ((size_t)(const void *)((filename) + 1) - (size_t)(const void *)(filename) == 1) &amp;&amp; (__s1_len = __builtin_strlen(filename) , __s1_len &lt; 4) ? (__builtin_constant_p("-") &amp;&amp; ((size_t)(const void *)(("-") + 1) - (size_t)(const void *)("-") == 1) ? __builtin_strcmp(filename, "-") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("-");
        int __result = (((const unsigned char *)(const char *)(filename))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(filename))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(filename))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(filename))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("-") &amp;&amp; ((size_t)(const void *)(("-") + 1) - (size_t)(const void *)("-") == 1) &amp;&amp; (__s2_len = __builtin_strlen("-") , __s2_len &lt; 4) ? (__builtin_constant_p(filename) &amp;&amp; ((size_t)(const void *)((filename) + 1) - (size_t)(const void *)(filename) == 1) ? __builtin_strcmp(filename, "-") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(filename);
        int __result = (((const unsigned char *)(const char *)("-"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("-"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("-"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("-"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(filename, "-"))));
}) == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>nseq == 1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;nseq == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>hmm-&gt;mpri[k] &gt;= pri-&gt;mnum<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>FileExists</SensitiveFunction>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(filename) &amp;&amp; __builtin_constant_p("-") &amp;&amp; (__s1_len = __builtin_strlen(filename) , __s2_len = __builtin_strlen("-") , (!((size_t)(const void *)((filename) + 1) - (size_t)(const void *)(filename) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("-") + 1) - (size_t)(const void *)("-") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(filename, "-") : (__builtin_constant_p(filename) &amp;&amp; ((size_t)(const void *)((filename) + 1) - (size_t)(const void *)(filename) == 1) &amp;&amp; (__s1_len = __builtin_strlen(filename) , __s1_len &lt; 4) ? (__builtin_constant_p("-") &amp;&amp; ((size_t)(const void *)(("-") + 1) - (size_t)(const void *)("-") == 1) ? __builtin_strcmp(filename, "-") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("-");
        int __result = (((const unsigned char *)(const char *)(filename))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(filename))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(filename))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(filename))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("-") &amp;&amp; ((size_t)(const void *)(("-") + 1) - (size_t)(const void *)("-") == 1) &amp;&amp; (__s2_len = __builtin_strlen("-") , __s2_len &lt; 4) ? (__builtin_constant_p(filename) &amp;&amp; ((size_t)(const void *)((filename) + 1) - (size_t)(const void *)(filename) == 1) ? __builtin_strcmp(filename, "-") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(filename);
        int __result = (((const unsigned char *)(const char *)("-"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("-"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("-"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("-"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(filename, "-"))));
}) == 0<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(filename) &amp;&amp; __builtin_constant_p("-") &amp;&amp; (__s1_len = __builtin_strlen(filename) , __s2_len = __builtin_strlen("-") , (!((size_t)(const void *)((filename) + 1) - (size_t)(const void *)(filename) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("-") + 1) - (size_t)(const void *)("-") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(filename, "-") : (__builtin_constant_p(filename) &amp;&amp; ((size_t)(const void *)((filename) + 1) - (size_t)(const void *)(filename) == 1) &amp;&amp; (__s1_len = __builtin_strlen(filename) , __s1_len &lt; 4) ? (__builtin_constant_p("-") &amp;&amp; ((size_t)(const void *)(("-") + 1) - (size_t)(const void *)("-") == 1) ? __builtin_strcmp(filename, "-") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("-");
        int __result = (((const unsigned char *)(const char *)(filename))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(filename))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(filename))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(filename))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("-") &amp;&amp; ((size_t)(const void *)(("-") + 1) - (size_t)(const void *)("-") == 1) &amp;&amp; (__s2_len = __builtin_strlen("-") , __s2_len &lt; 4) ? (__builtin_constant_p(filename) &amp;&amp; ((size_t)(const void *)((filename) + 1) - (size_t)(const void *)(filename) == 1) ? __builtin_strcmp(filename, "-") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(filename);
        int __result = (((const unsigned char *)(const char *)("-"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("-"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("-"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("-"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(filename, "-"))));
}) == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>nseq == 1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;nseq == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>hmm-&gt;mpri[k] &gt;= pri-&gt;mnum<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>Free2DArray</SensitiveFunction>
	<ReferableCheck>nseq == 1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>coord[i] &gt;= N<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>nseq == 1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;nseq == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>hmm-&gt;mpri[k] &gt;= pri-&gt;mnum<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>FreePhylo</SensitiveFunction>
	<ReferableCheck>nseq == 1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>coord[i] &gt;= N<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>nseq == 1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;nseq == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>hmm-&gt;mpri[k] &gt;= pri-&gt;mnum<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>GCGBinaryToSequence</SensitiveFunction>
	<ReferableCheck>blen &gt;= V-&gt;maxseq<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>coord[i] &gt;= N<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>nseq == 1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;nseq == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>hmm-&gt;mpri[k] &gt;= pri-&gt;mnum<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>GKIKeyIndex</SensitiveFunction>
	<ReferableCheck>msa-&gt;gc_idx == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;gs_tag == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;gr_tag == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;gc_tag == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>guess &gt;= 0 &amp;&amp; guess &lt; msa-&gt;nseq &amp;&amp; __extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(name) &amp;&amp; __builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; (__s1_len = __builtin_strlen(name) , __s2_len = __builtin_strlen(msa-&gt;sqname[guess]) , (!((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (__builtin_constant_p(name) &amp;&amp; ((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) &amp;&amp; (__s1_len = __builtin_strlen(name) , __s1_len &lt; 4) ? (__builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; ((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(msa-&gt;sqname[guess]);
        int __result = (((const unsigned char *)(const char *)(name))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(name))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(name))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(name))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; ((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) &amp;&amp; (__s2_len = __builtin_strlen(msa-&gt;sqname[guess]) , __s2_len &lt; 4) ? (__builtin_constant_p(name) &amp;&amp; ((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(name);
        int __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(name, msa-&gt;sqname[guess]))));
}) == 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>GKIStoreKey</SensitiveFunction>
	<ReferableCheck>guess &gt;= 0 &amp;&amp; guess &lt; msa-&gt;nseq &amp;&amp; __extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(name) &amp;&amp; __builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; (__s1_len = __builtin_strlen(name) , __s2_len = __builtin_strlen(msa-&gt;sqname[guess]) , (!((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (__builtin_constant_p(name) &amp;&amp; ((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) &amp;&amp; (__s1_len = __builtin_strlen(name) , __s1_len &lt; 4) ? (__builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; ((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(msa-&gt;sqname[guess]);
        int __result = (((const unsigned char *)(const char *)(name))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(name))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(name))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(name))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; ((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) &amp;&amp; (__s2_len = __builtin_strlen(msa-&gt;sqname[guess]) , __s2_len &lt; 4) ? (__builtin_constant_p(name) &amp;&amp; ((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(name);
        int __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(name, msa-&gt;sqname[guess]))));
}) == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;gs_tag == ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;gr_tag == ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;gc_tag == ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>guess &gt;= 0 &amp;&amp; guess &lt; msa-&gt;nseq &amp;&amp; __extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(name) &amp;&amp; __builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; (__s1_len = __builtin_strlen(name) , __s2_len = __builtin_strlen(msa-&gt;sqname[guess]) , (!((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (__builtin_constant_p(name) &amp;&amp; ((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) &amp;&amp; (__s1_len = __builtin_strlen(name) , __s1_len &lt; 4) ? (__builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; ((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(msa-&gt;sqname[guess]);
        int __result = (((const unsigned char *)(const char *)(name))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(name))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(name))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(name))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; ((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) &amp;&amp; (__s2_len = __builtin_strlen(msa-&gt;sqname[guess]) , __s2_len &lt; 4) ? (__builtin_constant_p(name) &amp;&amp; ((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(name);
        int __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(name, msa-&gt;sqname[guess]))));
}) == 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>GSIWriteHeader</SensitiveFunction>
	<ReferableCheck>g-&gt;nkeys &gt; 4294967295U<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;gs_tag == ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;gr_tag == ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;gc_tag == ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>guess &gt;= 0 &amp;&amp; guess &lt; msa-&gt;nseq &amp;&amp; __extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(name) &amp;&amp; __builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; (__s1_len = __builtin_strlen(name) , __s2_len = __builtin_strlen(msa-&gt;sqname[guess]) , (!((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (__builtin_constant_p(name) &amp;&amp; ((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) &amp;&amp; (__s1_len = __builtin_strlen(name) , __s1_len &lt; 4) ? (__builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; ((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(msa-&gt;sqname[guess]);
        int __result = (((const unsigned char *)(const char *)(name))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(name))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(name))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(name))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; ((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) &amp;&amp; (__s2_len = __builtin_strlen(msa-&gt;sqname[guess]) , __s2_len &lt; 4) ? (__builtin_constant_p(name) &amp;&amp; ((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(name);
        int __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(name, msa-&gt;sqname[guess]))));
}) == 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>Gammln</SensitiveFunction>
	<ReferableCheck>a &lt;= 0.<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;gs_tag == ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;gr_tag == ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;gc_tag == ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>guess &gt;= 0 &amp;&amp; guess &lt; msa-&gt;nseq &amp;&amp; __extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(name) &amp;&amp; __builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; (__s1_len = __builtin_strlen(name) , __s2_len = __builtin_strlen(msa-&gt;sqname[guess]) , (!((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (__builtin_constant_p(name) &amp;&amp; ((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) &amp;&amp; (__s1_len = __builtin_strlen(name) , __s1_len &lt; 4) ? (__builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; ((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(msa-&gt;sqname[guess]);
        int __result = (((const unsigned char *)(const char *)(name))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(name))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(name))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(name))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; ((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) &amp;&amp; (__s2_len = __builtin_strlen(msa-&gt;sqname[guess]) , __s2_len &lt; 4) ? (__builtin_constant_p(name) &amp;&amp; ((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(name);
        int __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(name, msa-&gt;sqname[guess]))));
}) == 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>IsInt</SensitiveFunction>
	<ReferableCheck>sptr == ((void *)0)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;gs_tag == ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;gr_tag == ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;gc_tag == ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>guess &gt;= 0 &amp;&amp; guess &lt; msa-&gt;nseq &amp;&amp; __extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(name) &amp;&amp; __builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; (__s1_len = __builtin_strlen(name) , __s2_len = __builtin_strlen(msa-&gt;sqname[guess]) , (!((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (__builtin_constant_p(name) &amp;&amp; ((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) &amp;&amp; (__s1_len = __builtin_strlen(name) , __s1_len &lt; 4) ? (__builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; ((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(msa-&gt;sqname[guess]);
        int __result = (((const unsigned char *)(const char *)(name))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(name))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(name))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(name))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; ((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) &amp;&amp; (__s2_len = __builtin_strlen(msa-&gt;sqname[guess]) , __s2_len &lt; 4) ? (__builtin_constant_p(name) &amp;&amp; ((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(name);
        int __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(name, msa-&gt;sqname[guess]))));
}) == 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>LBM_loadObstacleFile</SensitiveFunction>
	<ReferableCheck>param-&gt;obstacleFilename != ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;gs_tag == ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;gr_tag == ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;gc_tag == ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>guess &gt;= 0 &amp;&amp; guess &lt; msa-&gt;nseq &amp;&amp; __extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(name) &amp;&amp; __builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; (__s1_len = __builtin_strlen(name) , __s2_len = __builtin_strlen(msa-&gt;sqname[guess]) , (!((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (__builtin_constant_p(name) &amp;&amp; ((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) &amp;&amp; (__s1_len = __builtin_strlen(name) , __s1_len &lt; 4) ? (__builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; ((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(msa-&gt;sqname[guess]);
        int __result = (((const unsigned char *)(const char *)(name))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(name))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(name))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(name))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; ((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) &amp;&amp; (__s2_len = __builtin_strlen(msa-&gt;sqname[guess]) , __s2_len &lt; 4) ? (__builtin_constant_p(name) &amp;&amp; ((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(name);
        int __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(name, msa-&gt;sqname[guess]))));
}) == 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>Lawless416</SensitiveFunction>
	<ReferableCheck>fabs(fx) &lt; tol<Number>4</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;gs_tag == ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;gr_tag == ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;gc_tag == ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>guess &gt;= 0 &amp;&amp; guess &lt; msa-&gt;nseq &amp;&amp; __extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(name) &amp;&amp; __builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; (__s1_len = __builtin_strlen(name) , __s2_len = __builtin_strlen(msa-&gt;sqname[guess]) , (!((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (__builtin_constant_p(name) &amp;&amp; ((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) &amp;&amp; (__s1_len = __builtin_strlen(name) , __s1_len &lt; 4) ? (__builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; ((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(msa-&gt;sqname[guess]);
        int __result = (((const unsigned char *)(const char *)(name))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(name))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(name))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(name))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; ((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) &amp;&amp; (__s2_len = __builtin_strlen(msa-&gt;sqname[guess]) , __s2_len &lt; 4) ? (__builtin_constant_p(name) &amp;&amp; ((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(name);
        int __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(name, msa-&gt;sqname[guess]))));
}) == 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>Lawless422</SensitiveFunction>
	<ReferableCheck>fabs(fx) &lt; tol<Number>4</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;gs_tag == ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;gr_tag == ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;gc_tag == ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>guess &gt;= 0 &amp;&amp; guess &lt; msa-&gt;nseq &amp;&amp; __extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(name) &amp;&amp; __builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; (__s1_len = __builtin_strlen(name) , __s2_len = __builtin_strlen(msa-&gt;sqname[guess]) , (!((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (__builtin_constant_p(name) &amp;&amp; ((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) &amp;&amp; (__s1_len = __builtin_strlen(name) , __s1_len &lt; 4) ? (__builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; ((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(msa-&gt;sqname[guess]);
        int __result = (((const unsigned char *)(const char *)(name))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(name))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(name))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(name))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; ((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) &amp;&amp; (__s2_len = __builtin_strlen(msa-&gt;sqname[guess]) , __s2_len &lt; 4) ? (__builtin_constant_p(name) &amp;&amp; ((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(name);
        int __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(name, msa-&gt;sqname[guess]))));
}) == 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>LogNorm</SensitiveFunction>
	<ReferableCheck>pri-&gt;strategy == 0 &amp;&amp; num &gt; 1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;gs_tag == ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;gr_tag == ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;gc_tag == ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>guess &gt;= 0 &amp;&amp; guess &lt; msa-&gt;nseq &amp;&amp; __extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(name) &amp;&amp; __builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; (__s1_len = __builtin_strlen(name) , __s2_len = __builtin_strlen(msa-&gt;sqname[guess]) , (!((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (__builtin_constant_p(name) &amp;&amp; ((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) &amp;&amp; (__s1_len = __builtin_strlen(name) , __s1_len &lt; 4) ? (__builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; ((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(msa-&gt;sqname[guess]);
        int __result = (((const unsigned char *)(const char *)(name))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(name))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(name))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(name))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; ((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) &amp;&amp; (__s2_len = __builtin_strlen(msa-&gt;sqname[guess]) , __s2_len &lt; 4) ? (__builtin_constant_p(name) &amp;&amp; ((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(name);
        int __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(name, msa-&gt;sqname[guess]))));
}) == 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>Logp_cvec</SensitiveFunction>
	<ReferableCheck>(prior-&gt;strategy == 0 || prior-&gt;strategy == 1) &amp;&amp; prior-&gt;mnum &gt; 1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;gs_tag == ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;gr_tag == ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;gc_tag == ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>guess &gt;= 0 &amp;&amp; guess &lt; msa-&gt;nseq &amp;&amp; __extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(name) &amp;&amp; __builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; (__s1_len = __builtin_strlen(name) , __s2_len = __builtin_strlen(msa-&gt;sqname[guess]) , (!((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (__builtin_constant_p(name) &amp;&amp; ((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) &amp;&amp; (__s1_len = __builtin_strlen(name) , __s1_len &lt; 4) ? (__builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; ((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(msa-&gt;sqname[guess]);
        int __result = (((const unsigned char *)(const char *)(name))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(name))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(name))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(name))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; ((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) &amp;&amp; (__s2_len = __builtin_strlen(msa-&gt;sqname[guess]) , __s2_len &lt; 4) ? (__builtin_constant_p(name) &amp;&amp; ((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(name);
        int __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(name, msa-&gt;sqname[guess]))));
}) == 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>MSAAppendGR</SensitiveFunction>
	<ReferableCheck>msa-&gt;ss == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;gs_tag == ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;gr_tag == ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;gc_tag == ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>guess &gt;= 0 &amp;&amp; guess &lt; msa-&gt;nseq &amp;&amp; __extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(name) &amp;&amp; __builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; (__s1_len = __builtin_strlen(name) , __s2_len = __builtin_strlen(msa-&gt;sqname[guess]) , (!((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (__builtin_constant_p(name) &amp;&amp; ((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) &amp;&amp; (__s1_len = __builtin_strlen(name) , __s1_len &lt; 4) ? (__builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; ((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(msa-&gt;sqname[guess]);
        int __result = (((const unsigned char *)(const char *)(name))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(name))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(name))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(name))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; ((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) &amp;&amp; (__s2_len = __builtin_strlen(msa-&gt;sqname[guess]) , __s2_len &lt; 4) ? (__builtin_constant_p(name) &amp;&amp; ((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(name);
        int __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(name, msa-&gt;sqname[guess]))));
}) == 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>MSAExpand</SensitiveFunction>
	<ReferableCheck>guess &gt;= 0 &amp;&amp; guess &lt; msa-&gt;nseq &amp;&amp; __extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(name) &amp;&amp; __builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; (__s1_len = __builtin_strlen(name) , __s2_len = __builtin_strlen(msa-&gt;sqname[guess]) , (!((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (__builtin_constant_p(name) &amp;&amp; ((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) &amp;&amp; (__s1_len = __builtin_strlen(name) , __s1_len &lt; 4) ? (__builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; ((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(msa-&gt;sqname[guess]);
        int __result = (((const unsigned char *)(const char *)(name))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(name))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(name))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(name))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; ((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) &amp;&amp; (__s2_len = __builtin_strlen(msa-&gt;sqname[guess]) , __s2_len &lt; 4) ? (__builtin_constant_p(name) &amp;&amp; ((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(name);
        int __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(name, msa-&gt;sqname[guess]))));
}) == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;gs_tag == ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;gr_tag == ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;gc_tag == ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>guess &gt;= 0 &amp;&amp; guess &lt; msa-&gt;nseq &amp;&amp; __extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(name) &amp;&amp; __builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; (__s1_len = __builtin_strlen(name) , __s2_len = __builtin_strlen(msa-&gt;sqname[guess]) , (!((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (__builtin_constant_p(name) &amp;&amp; ((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) &amp;&amp; (__s1_len = __builtin_strlen(name) , __s1_len &lt; 4) ? (__builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; ((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(msa-&gt;sqname[guess]);
        int __result = (((const unsigned char *)(const char *)(name))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(name))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(name))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(name))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; ((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) &amp;&amp; (__s2_len = __builtin_strlen(msa-&gt;sqname[guess]) , __s2_len &lt; 4) ? (__builtin_constant_p(name) &amp;&amp; ((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(name);
        int __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(name, msa-&gt;sqname[guess]))));
}) == 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>MSAFileGetLine</SensitiveFunction>
	<ReferableCheck>feof(afp-&gt;f)<Number>13</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;gs_tag == ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;gr_tag == ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;gc_tag == ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>guess &gt;= 0 &amp;&amp; guess &lt; msa-&gt;nseq &amp;&amp; __extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(name) &amp;&amp; __builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; (__s1_len = __builtin_strlen(name) , __s2_len = __builtin_strlen(msa-&gt;sqname[guess]) , (!((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (__builtin_constant_p(name) &amp;&amp; ((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) &amp;&amp; (__s1_len = __builtin_strlen(name) , __s1_len &lt; 4) ? (__builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; ((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(msa-&gt;sqname[guess]);
        int __result = (((const unsigned char *)(const char *)(name))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(name))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(name))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(name))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; ((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) &amp;&amp; (__s2_len = __builtin_strlen(msa-&gt;sqname[guess]) , __s2_len &lt; 4) ? (__builtin_constant_p(name) &amp;&amp; ((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(name);
        int __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(name, msa-&gt;sqname[guess]))));
}) == 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>MSAFree</SensitiveFunction>
	<ReferableCheck>V-&gt;msa-&gt;lastidx &gt;= V-&gt;msa-&gt;nseq<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;gs_tag == ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;gr_tag == ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;gc_tag == ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>guess &gt;= 0 &amp;&amp; guess &lt; msa-&gt;nseq &amp;&amp; __extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(name) &amp;&amp; __builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; (__s1_len = __builtin_strlen(name) , __s2_len = __builtin_strlen(msa-&gt;sqname[guess]) , (!((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (__builtin_constant_p(name) &amp;&amp; ((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) &amp;&amp; (__s1_len = __builtin_strlen(name) , __s1_len &lt; 4) ? (__builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; ((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(msa-&gt;sqname[guess]);
        int __result = (((const unsigned char *)(const char *)(name))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(name))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(name))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(name))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; ((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) &amp;&amp; (__s2_len = __builtin_strlen(msa-&gt;sqname[guess]) , __s2_len &lt; 4) ? (__builtin_constant_p(name) &amp;&amp; ((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(name);
        int __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(name, msa-&gt;sqname[guess]))));
}) == 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>MSAGetGC</SensitiveFunction>
	<ReferableCheck>msa-&gt;rf != ((void *)0)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;gs_tag == ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;gr_tag == ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;gc_tag == ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>guess &gt;= 0 &amp;&amp; guess &lt; msa-&gt;nseq &amp;&amp; __extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(name) &amp;&amp; __builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; (__s1_len = __builtin_strlen(name) , __s2_len = __builtin_strlen(msa-&gt;sqname[guess]) , (!((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (__builtin_constant_p(name) &amp;&amp; ((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) &amp;&amp; (__s1_len = __builtin_strlen(name) , __s1_len &lt; 4) ? (__builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; ((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(msa-&gt;sqname[guess]);
        int __result = (((const unsigned char *)(const char *)(name))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(name))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(name))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(name))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; ((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) &amp;&amp; (__s2_len = __builtin_strlen(msa-&gt;sqname[guess]) , __s2_len &lt; 4) ? (__builtin_constant_p(name) &amp;&amp; ((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(name);
        int __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(name, msa-&gt;sqname[guess]))));
}) == 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>MSAShorterAlignment</SensitiveFunction>
	<ReferableCheck>((msa-&gt;aseq[idx][apos]) == ' ' || (msa-&gt;aseq[idx][apos]) == '.' || (msa-&gt;aseq[idx][apos]) == '_' || (msa-&gt;aseq[idx][apos]) == '-' || (msa-&gt;aseq[idx][apos]) == '~')<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!((msa-&gt;aseq[idx][apos]) == ' ' || (msa-&gt;aseq[idx][apos]) == '.' || (msa-&gt;aseq[idx][apos]) == '_' || (msa-&gt;aseq[idx][apos]) == '-' || (msa-&gt;aseq[idx][apos]) == '~')<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;gr_tag == ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;gc_tag == ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>guess &gt;= 0 &amp;&amp; guess &lt; msa-&gt;nseq &amp;&amp; __extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(name) &amp;&amp; __builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; (__s1_len = __builtin_strlen(name) , __s2_len = __builtin_strlen(msa-&gt;sqname[guess]) , (!((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (__builtin_constant_p(name) &amp;&amp; ((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) &amp;&amp; (__s1_len = __builtin_strlen(name) , __s1_len &lt; 4) ? (__builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; ((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(msa-&gt;sqname[guess]);
        int __result = (((const unsigned char *)(const char *)(name))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(name))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(name))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(name))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; ((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) &amp;&amp; (__s2_len = __builtin_strlen(msa-&gt;sqname[guess]) , __s2_len &lt; 4) ? (__builtin_constant_p(name) &amp;&amp; ((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(name);
        int __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(name, msa-&gt;sqname[guess]))));
}) == 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>MSASmallerAlignment</SensitiveFunction>
	<ReferableCheck>sample &gt;= msa-&gt;nseq<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!((msa-&gt;aseq[idx][apos]) == ' ' || (msa-&gt;aseq[idx][apos]) == '.' || (msa-&gt;aseq[idx][apos]) == '_' || (msa-&gt;aseq[idx][apos]) == '-' || (msa-&gt;aseq[idx][apos]) == '~')<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;gr_tag == ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;gc_tag == ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>guess &gt;= 0 &amp;&amp; guess &lt; msa-&gt;nseq &amp;&amp; __extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(name) &amp;&amp; __builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; (__s1_len = __builtin_strlen(name) , __s2_len = __builtin_strlen(msa-&gt;sqname[guess]) , (!((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (__builtin_constant_p(name) &amp;&amp; ((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) &amp;&amp; (__s1_len = __builtin_strlen(name) , __s1_len &lt; 4) ? (__builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; ((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(msa-&gt;sqname[guess]);
        int __result = (((const unsigned char *)(const char *)(name))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(name))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(name))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(name))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; ((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) &amp;&amp; (__s2_len = __builtin_strlen(msa-&gt;sqname[guess]) , __s2_len &lt; 4) ? (__builtin_constant_p(name) &amp;&amp; ((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(name);
        int __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(name, msa-&gt;sqname[guess]))));
}) == 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>MakeDiffMx</SensitiveFunction>
	<ReferableCheck>nseq == 1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!((msa-&gt;aseq[idx][apos]) == ' ' || (msa-&gt;aseq[idx][apos]) == '.' || (msa-&gt;aseq[idx][apos]) == '_' || (msa-&gt;aseq[idx][apos]) == '-' || (msa-&gt;aseq[idx][apos]) == '~')<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;gr_tag == ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;gc_tag == ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>guess &gt;= 0 &amp;&amp; guess &lt; msa-&gt;nseq &amp;&amp; __extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(name) &amp;&amp; __builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; (__s1_len = __builtin_strlen(name) , __s2_len = __builtin_strlen(msa-&gt;sqname[guess]) , (!((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (__builtin_constant_p(name) &amp;&amp; ((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) &amp;&amp; (__s1_len = __builtin_strlen(name) , __s1_len &lt; 4) ? (__builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; ((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(msa-&gt;sqname[guess]);
        int __result = (((const unsigned char *)(const char *)(name))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(name))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(name))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(name))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; ((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) &amp;&amp; (__s2_len = __builtin_strlen(msa-&gt;sqname[guess]) , __s2_len &lt; 4) ? (__builtin_constant_p(name) &amp;&amp; ((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(name);
        int __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(name, msa-&gt;sqname[guess]))));
}) == 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>Make_Vector</SensitiveFunction>
	<ReferableCheck>(index &gt;= 0.) &amp;&amp; (index &lt;= 1. - 9.9999999999999995E-8)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!((msa-&gt;aseq[idx][apos]) == ' ' || (msa-&gt;aseq[idx][apos]) == '.' || (msa-&gt;aseq[idx][apos]) == '_' || (msa-&gt;aseq[idx][apos]) == '-' || (msa-&gt;aseq[idx][apos]) == '~')<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;gr_tag == ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;gc_tag == ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>guess &gt;= 0 &amp;&amp; guess &lt; msa-&gt;nseq &amp;&amp; __extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(name) &amp;&amp; __builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; (__s1_len = __builtin_strlen(name) , __s2_len = __builtin_strlen(msa-&gt;sqname[guess]) , (!((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (__builtin_constant_p(name) &amp;&amp; ((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) &amp;&amp; (__s1_len = __builtin_strlen(name) , __s1_len &lt; 4) ? (__builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; ((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(msa-&gt;sqname[guess]);
        int __result = (((const unsigned char *)(const char *)(name))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(name))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(name))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(name))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(msa-&gt;sqname[guess]) &amp;&amp; ((size_t)(const void *)((msa-&gt;sqname[guess]) + 1) - (size_t)(const void *)(msa-&gt;sqname[guess]) == 1) &amp;&amp; (__s2_len = __builtin_strlen(msa-&gt;sqname[guess]) , __s2_len &lt; 4) ? (__builtin_constant_p(name) &amp;&amp; ((size_t)(const void *)((name) + 1) - (size_t)(const void *)(name) == 1) ? __builtin_strcmp(name, msa-&gt;sqname[guess]) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(name);
        int __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(msa-&gt;sqname[guess]))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(name, msa-&gt;sqname[guess]))));
}) == 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>NO_UFLOW_ADD</SensitiveFunction>
	<ReferableCheck>s2 &gt;= s1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>s3 &gt;= s2<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>s1 &gt;= s0<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>curFrmPhnVar &lt; kb-&gt;cache_ci_senscr[i][j]<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>s2 &lt; s1<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>P7Forward</SensitiveFunction>
	<ReferableCheck>P7ViterbiSize(sqinfo.len, hmm-&gt;M) &lt;= 1000<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>s3 &gt;= s2<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>s1 &gt;= s0<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>curFrmPhnVar &lt; kb-&gt;cache_ci_senscr[i][j]<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>s2 &lt; s1<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>P7OptimalAccuracyTrace</SensitiveFunction>
	<ReferableCheck>(sc = mmx[i - 1][k - 1]) &gt; mmx[i][k]<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>s3 &gt;= s2<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>s1 &gt;= s0<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>curFrmPhnVar &lt; kb-&gt;cache_ci_senscr[i][j]<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>s2 &lt; s1<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>P7PriorifyEmissionVector</SensitiveFunction>
	<ReferableCheck>hmm-&gt;ipri[k] &gt;= pri-&gt;inum<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>hmm-&gt;mpri[k] &gt;= pri-&gt;mnum<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>s1 &gt;= s0<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>curFrmPhnVar &lt; kb-&gt;cache_ci_senscr[i][j]<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>s2 &lt; s1<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>P7PriorifyTransitionVector</SensitiveFunction>
	<ReferableCheck>hmm-&gt;tpri != ((void *)0) &amp;&amp; hmm-&gt;tpri[k] &gt;= 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>hmm-&gt;mpri[k] &gt;= pri-&gt;mnum<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>s1 &gt;= s0<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>curFrmPhnVar &lt; kb-&gt;cache_ci_senscr[i][j]<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>s2 &lt; s1<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>P7ReallocTrace</SensitiveFunction>
	<ReferableCheck>tpos == curralloc<Number>7</Number>
	</ReferableCheck>
	<ReferableCheck>hmm-&gt;mpri[k] &gt;= pri-&gt;mnum<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>s1 &gt;= s0<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>curFrmPhnVar &lt; kb-&gt;cache_ci_senscr[i][j]<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>s2 &lt; s1<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>P7SmallViterbi</SensitiveFunction>
	<ReferableCheck>P7ViterbiSize(sqlen, hmm-&gt;M) &lt;= 1000<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>P7ViterbiSize(sqinfo.len, hmm-&gt;M) &lt;= 1000<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>s1 &gt;= s0<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>curFrmPhnVar &lt; kb-&gt;cache_ci_senscr[i][j]<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>s2 &lt; s1<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>P7Viterbi</SensitiveFunction>
	<ReferableCheck>P7ViterbiSize(sqlen, hmm-&gt;M) &lt;= 1000<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>P7ViterbiSize(sqinfo.len, hmm-&gt;M) &lt;= 1000<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>P7ViterbiSize(sqlen, hmm-&gt;M) &gt; 1000<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>curFrmPhnVar &lt; kb-&gt;cache_ci_senscr[i][j]<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>s2 &lt; s1<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>P7ViterbiTrace</SensitiveFunction>
	<ReferableCheck>(sc = xmx[i - 1][4] + hmm-&gt;xsc[0][1]) &gt; -987654321<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>P7ViterbiSize(sqinfo.len, hmm-&gt;M) &lt;= 1000<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>P7ViterbiSize(sqlen, hmm-&gt;M) &gt; 1000<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>curFrmPhnVar &lt; kb-&gt;cache_ci_senscr[i][j]<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>s2 &lt; s1<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>P7WeeViterbi</SensitiveFunction>
	<ReferableCheck>P7ViterbiSize(sqlen, hmm-&gt;M) &gt; 1000<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>P7ViterbiSize(sqinfo.len, hmm-&gt;M) &lt;= 1000<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>P7ViterbiSize(sqlen, hmm-&gt;M) &gt; 1000<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>curFrmPhnVar &lt; kb-&gt;cache_ci_senscr[i][j]<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>s2 &lt; s1<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>PValue</SensitiveFunction>
	<ReferableCheck>P7ViterbiSize(sqinfo.len, hmm-&gt;M) &lt;= 1000<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>P7ViterbiSize(sqinfo.len, hmm-&gt;M) &lt;= 1000<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>P7ViterbiSize(sqlen, hmm-&gt;M) &gt; 1000<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>curFrmPhnVar &lt; kb-&gt;cache_ci_senscr[i][j]<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>s2 &lt; s1<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>Plan7ComlogAppend</SensitiveFunction>
	<ReferableCheck>argc - optind != 1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>P7ViterbiSize(sqinfo.len, hmm-&gt;M) &lt;= 1000<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>P7ViterbiSize(sqlen, hmm-&gt;M) &gt; 1000<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>curFrmPhnVar &lt; kb-&gt;cache_ci_senscr[i][j]<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>s2 &lt; s1<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>Plan7Renormalize</SensitiveFunction>
	<ReferableCheck>hmm-&gt;tpri != ((void *)0) &amp;&amp; hmm-&gt;tpri[k] &gt;= 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>P7ViterbiSize(sqinfo.len, hmm-&gt;M) &lt;= 1000<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>P7ViterbiSize(sqlen, hmm-&gt;M) &gt; 1000<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>curFrmPhnVar &lt; kb-&gt;cache_ci_senscr[i][j]<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>s2 &lt; s1<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>Plan7SetName</SensitiveFunction>
	<ReferableCheck>hmm-&gt;name != ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>P7ViterbiSize(sqinfo.len, hmm-&gt;M) &lt;= 1000<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>P7ViterbiSize(sqlen, hmm-&gt;M) &gt; 1000<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>curFrmPhnVar &lt; kb-&gt;cache_ci_senscr[i][j]<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>s2 &lt; s1<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>PostprocessSignificantHit</SensitiveFunction>
	<ReferableCheck>sc &gt;= thresh-&gt;globT &amp;&amp; evalue &lt;= thresh-&gt;globE<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>P7ViterbiSize(sqinfo.len, hmm-&gt;M) &lt;= 1000<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>P7ViterbiSize(sqlen, hmm-&gt;M) &gt; 1000<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>curFrmPhnVar &lt; kb-&gt;cache_ci_senscr[i][j]<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>s2 &lt; s1<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>Prob2Score</SensitiveFunction>
	<ReferableCheck>p == 0.<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>P7ViterbiSize(sqinfo.len, hmm-&gt;M) &lt;= 1000<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>P7ViterbiSize(sqlen, hmm-&gt;M) &gt; 1000<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>curFrmPhnVar &lt; kb-&gt;cache_ci_senscr[i][j]<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>s2 &lt; s1<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>ProbeTT</SensitiveFunction>
	<ReferableCheck>((rdifftime(rtime(), start_time) &gt;= time_for_move)) &amp;&amp; (i_depth &gt; 1)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>P7ViterbiSize(sqinfo.len, hmm-&gt;M) &lt;= 1000<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>P7ViterbiSize(sqlen, hmm-&gt;M) &gt; 1000<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>curFrmPhnVar &lt; kb-&gt;cache_ci_senscr[i][j]<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>s2 &lt; s1<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>QStoreTT</SensitiveFunction>
	<ReferableCheck>bound &gt;= beta<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>P7ViterbiSize(sqinfo.len, hmm-&gt;M) &lt;= 1000<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>P7ViterbiSize(sqlen, hmm-&gt;M) &gt; 1000<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>curFrmPhnVar &lt; kb-&gt;cache_ci_senscr[i][j]<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>s2 &lt; s1<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>RegisterHit</SensitiveFunction>
	<ReferableCheck>whole_sc &gt;= thresh-&gt;globT<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>pvalue &lt;= thresh-&gt;domE &amp;&amp; score[tidx] &gt;= thresh-&gt;domT<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>P7ViterbiSize(sqlen, hmm-&gt;M) &gt; 1000<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>curFrmPhnVar &lt; kb-&gt;cache_ci_senscr[i][j]<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>s2 &lt; s1<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>SSIClose</SensitiveFunction>
	<ReferableCheck>!read_i32(sfp-&gt;fp, &amp;magic)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>pvalue &lt;= thresh-&gt;domE &amp;&amp; score[tidx] &gt;= thresh-&gt;domT<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>P7ViterbiSize(sqlen, hmm-&gt;M) &gt; 1000<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>curFrmPhnVar &lt; kb-&gt;cache_ci_senscr[i][j]<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>s2 &lt; s1<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>SSIGetFilePosition</SensitiveFunction>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>pvalue &lt;= thresh-&gt;domE &amp;&amp; score[tidx] &gt;= thresh-&gt;domT<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>P7ViterbiSize(sqlen, hmm-&gt;M) &gt; 1000<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>curFrmPhnVar &lt; kb-&gt;cache_ci_senscr[i][j]<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>s2 &lt; s1<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>SSIGetOffsetByName</SensitiveFunction>
	<ReferableCheck>hmmfp-&gt;ssi == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>afp-&gt;ssi == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!read_offset(sfp-&gt;fp, sfp-&gt;smode, ret_offset)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>curFrmPhnVar &lt; kb-&gt;cache_ci_senscr[i][j]<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>s2 &lt; s1<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>SSIGetOffsetByNumber</SensitiveFunction>
	<ReferableCheck>hmmfp-&gt;ssi == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>afp-&gt;ssi == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!read_offset(sfp-&gt;fp, sfp-&gt;smode, ret_offset)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>curFrmPhnVar &lt; kb-&gt;cache_ci_senscr[i][j]<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>s2 &lt; s1<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>SSIRecommendMode</SensitiveFunction>
	<ReferableCheck>(hmmfp-&gt;f = fopen(hmmfile, "r")) != ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>afp-&gt;ssi == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!read_offset(sfp-&gt;fp, sfp-&gt;smode, ret_offset)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>curFrmPhnVar &lt; kb-&gt;cache_ci_senscr[i][j]<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>s2 &lt; s1<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>SSISetFilePosition</SensitiveFunction>
	<ReferableCheck>sqfp-&gt;do_stdin || sqfp-&gt;do_gzip || ((sqfp-&gt;format) &gt; 100)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>afp-&gt;ssi == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!read_offset(sfp-&gt;fp, sfp-&gt;smode, ret_offset)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>curFrmPhnVar &lt; kb-&gt;cache_ci_senscr[i][j]<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>s2 &lt; s1<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>Scorify</SensitiveFunction>
	<ReferableCheck>(sc = ip[k - 1] + tpim[k - 1]) &gt; mc[k]<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(sc = imx[i - 3][k - 1] + hmm-&gt;tsc[3][k - 1]) &gt; mmx[i][k]<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(sc = mmx[prv][k - 1] + hmm-&gt;tsc[0][k - 1]) &gt; -987654321<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>curFrmPhnVar &lt; kb-&gt;cache_ci_senscr[i][j]<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>s2 &lt; s1<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>SeqfileGetLine</SensitiveFunction>
	<ReferableCheck>(si = strstr(V-&gt;buf, "  Length: ")) != ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(sptr = strtok(V-&gt;buf + 6, " \t\n")) != ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>sqfp-&gt;do_stdin || sqfp-&gt;do_gzip<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>sqfp-&gt;do_stdin || sqfp-&gt;do_gzip || ((sqfp-&gt;format) &gt; 100)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>((V-&gt;format) &gt; 100)<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>SetSeqinfoString</SensitiveFunction>
	<ReferableCheck>Strparse("&gt;&gt;&gt;&gt;([^ ]+) .+2BIT +Len: ([0-9]+)", V-&gt;buf, 2)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(sptr = strtok(V-&gt;buf + 12, "\n\t ")) != ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>sqfp-&gt;do_stdin || sqfp-&gt;do_gzip<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>sqfp-&gt;do_stdin || sqfp-&gt;do_gzip || ((sqfp-&gt;format) &gt; 100)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>((V-&gt;format) &gt; 100)<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>ShadowTrace</SensitiveFunction>
	<ReferableCheck>mmx[prv][k - 1] &gt; -987654321 &amp;&amp; hmm-&gt;tsc[0][k - 1] &gt; -987654321 &amp;&amp; (sc = mmx[prv][k - 1] + hmm-&gt;tsc[0][k - 1]) &gt; mmx[cur][k]<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(sptr = strtok(V-&gt;buf + 12, "\n\t ")) != ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>sqfp-&gt;do_stdin || sqfp-&gt;do_gzip<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>sqfp-&gt;do_stdin || sqfp-&gt;do_gzip || ((sqfp-&gt;format) &gt; 100)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>((V-&gt;format) &gt; 100)<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>Simulate_Media</SensitiveFunction>
	<ReferableCheck>!Light_Ray_Flag<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(sptr = strtok(V-&gt;buf + 12, "\n\t ")) != ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>sqfp-&gt;do_stdin || sqfp-&gt;do_gzip<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>sqfp-&gt;do_stdin || sqfp-&gt;do_gzip || ((sqfp-&gt;format) &gt; 100)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>((V-&gt;format) &gt; 100)<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>Sqr</SensitiveFunction>
	<ReferableCheck>start &lt;= 0.<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(sptr = strtok(V-&gt;buf + 12, "\n\t ")) != ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>sqfp-&gt;do_stdin || sqfp-&gt;do_gzip<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>sqfp-&gt;do_stdin || sqfp-&gt;do_gzip || ((sqfp-&gt;format) &gt; 100)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>((V-&gt;format) &gt; 100)<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>Statetype</SensitiveFunction>
	<ReferableCheck>s3 - s1 == 1 &amp;&amp; t3 == 9<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>s3 - s1 == 1 &amp;&amp; t1 == 4<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>sqfp-&gt;do_stdin || sqfp-&gt;do_gzip<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>sqfp-&gt;do_stdin || sqfp-&gt;do_gzip || ((sqfp-&gt;format) &gt; 100)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>((V-&gt;format) &gt; 100)<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>StoreTT</SensitiveFunction>
	<ReferableCheck>bound &gt;= beta<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>((rdifftime(rtime(), start_time) &gt;= time_for_move)) &amp;&amp; (i_depth &gt; 1)<Number>7</Number>
	</ReferableCheck>
	<ReferableCheck>sqfp-&gt;do_stdin || sqfp-&gt;do_gzip<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>sqfp-&gt;do_stdin || sqfp-&gt;do_gzip || ((sqfp-&gt;format) &gt; 100)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>((V-&gt;format) &gt; 100)<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>StrReverse</SensitiveFunction>
	<ReferableCheck>seq == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>((rdifftime(rtime(), start_time) &gt;= time_for_move)) &amp;&amp; (i_depth &gt; 1)<Number>7</Number>
	</ReferableCheck>
	<ReferableCheck>sqfp-&gt;do_stdin || sqfp-&gt;do_gzip<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>sqfp-&gt;do_stdin || sqfp-&gt;do_gzip || ((sqfp-&gt;format) &gt; 100)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>((V-&gt;format) &gt; 100)<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>Strdup</SensitiveFunction>
	<ReferableCheck>s == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>hmm-&gt;desc != ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>hmm-&gt;acc != ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>hmm-&gt;name != ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>((V-&gt;format) &gt; 100)<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>StringChop</SensitiveFunction>
	<ReferableCheck>hmm-&gt;ctime != ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>hmm-&gt;desc != ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>hmm-&gt;acc != ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>hmm-&gt;name != ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>((V-&gt;format) &gt; 100)<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>Strparse</SensitiveFunction>
	<ReferableCheck>Strparse("&gt;&gt;&gt;&gt;([^ ]+) .+2BIT +Len: ([0-9]+)", V-&gt;buf, 2)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(filename) &amp;&amp; __builtin_constant_p("-") &amp;&amp; (__s1_len = __builtin_strlen(filename) , __s2_len = __builtin_strlen("-") , (!((size_t)(const void *)((filename) + 1) - (size_t)(const void *)(filename) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("-") + 1) - (size_t)(const void *)("-") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(filename, "-") : (__builtin_constant_p(filename) &amp;&amp; ((size_t)(const void *)((filename) + 1) - (size_t)(const void *)(filename) == 1) &amp;&amp; (__s1_len = __builtin_strlen(filename) , __s1_len &lt; 4) ? (__builtin_constant_p("-") &amp;&amp; ((size_t)(const void *)(("-") + 1) - (size_t)(const void *)("-") == 1) ? __builtin_strcmp(filename, "-") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("-");
        int __result = (((const unsigned char *)(const char *)(filename))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(filename))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(filename))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(filename))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("-") &amp;&amp; ((size_t)(const void *)(("-") + 1) - (size_t)(const void *)("-") == 1) &amp;&amp; (__s2_len = __builtin_strlen("-") , __s2_len &lt; 4) ? (__builtin_constant_p(filename) &amp;&amp; ((size_t)(const void *)((filename) + 1) - (size_t)(const void *)(filename) == 1) ? __builtin_strcmp(filename, "-") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(filename);
        int __result = (((const unsigned char *)(const char *)("-"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("-"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("-"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("-"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(filename, "-"))));
}) == 0<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>hmm-&gt;acc != ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>hmm-&gt;name != ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>((V-&gt;format) &gt; 100)<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>TraceDecompose</SensitiveFunction>
	<ReferableCheck>tr == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(filename) &amp;&amp; __builtin_constant_p("-") &amp;&amp; (__s1_len = __builtin_strlen(filename) , __s2_len = __builtin_strlen("-") , (!((size_t)(const void *)((filename) + 1) - (size_t)(const void *)(filename) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("-") + 1) - (size_t)(const void *)("-") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(filename, "-") : (__builtin_constant_p(filename) &amp;&amp; ((size_t)(const void *)((filename) + 1) - (size_t)(const void *)(filename) == 1) &amp;&amp; (__s1_len = __builtin_strlen(filename) , __s1_len &lt; 4) ? (__builtin_constant_p("-") &amp;&amp; ((size_t)(const void *)(("-") + 1) - (size_t)(const void *)("-") == 1) ? __builtin_strcmp(filename, "-") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("-");
        int __result = (((const unsigned char *)(const char *)(filename))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(filename))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(filename))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(filename))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("-") &amp;&amp; ((size_t)(const void *)(("-") + 1) - (size_t)(const void *)("-") == 1) &amp;&amp; (__s2_len = __builtin_strlen("-") , __s2_len &lt; 4) ? (__builtin_constant_p(filename) &amp;&amp; ((size_t)(const void *)((filename) + 1) - (size_t)(const void *)(filename) == 1) ? __builtin_strcmp(filename, "-") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(filename);
        int __result = (((const unsigned char *)(const char *)("-"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("-"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("-"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("-"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(filename, "-"))));
}) == 0<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>hmm-&gt;acc != ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>hmm-&gt;name != ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>((V-&gt;format) &gt; 100)<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>TraceScoreCorrection</SensitiveFunction>
	<ReferableCheck>P7ViterbiSize(sqinfo.len, hmm-&gt;M) &lt;= 1000<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(filename) &amp;&amp; __builtin_constant_p("-") &amp;&amp; (__s1_len = __builtin_strlen(filename) , __s2_len = __builtin_strlen("-") , (!((size_t)(const void *)((filename) + 1) - (size_t)(const void *)(filename) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("-") + 1) - (size_t)(const void *)("-") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(filename, "-") : (__builtin_constant_p(filename) &amp;&amp; ((size_t)(const void *)((filename) + 1) - (size_t)(const void *)(filename) == 1) &amp;&amp; (__s1_len = __builtin_strlen(filename) , __s1_len &lt; 4) ? (__builtin_constant_p("-") &amp;&amp; ((size_t)(const void *)(("-") + 1) - (size_t)(const void *)("-") == 1) ? __builtin_strcmp(filename, "-") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("-");
        int __result = (((const unsigned char *)(const char *)(filename))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(filename))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(filename))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(filename))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("-") &amp;&amp; ((size_t)(const void *)(("-") + 1) - (size_t)(const void *)("-") == 1) &amp;&amp; (__s2_len = __builtin_strlen("-") , __s2_len &lt; 4) ? (__builtin_constant_p(filename) &amp;&amp; ((size_t)(const void *)((filename) + 1) - (size_t)(const void *)(filename) == 1) ? __builtin_strcmp(filename, "-") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(filename);
        int __result = (((const unsigned char *)(const char *)("-"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("-"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("-"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("-"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(filename, "-"))));
}) == 0<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>hmm-&gt;acc != ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>hmm-&gt;name != ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>((V-&gt;format) &gt; 100)<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>TraceSet</SensitiveFunction>
	<ReferableCheck>k == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(filename) &amp;&amp; __builtin_constant_p("-") &amp;&amp; (__s1_len = __builtin_strlen(filename) , __s2_len = __builtin_strlen("-") , (!((size_t)(const void *)((filename) + 1) - (size_t)(const void *)(filename) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("-") + 1) - (size_t)(const void *)("-") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(filename, "-") : (__builtin_constant_p(filename) &amp;&amp; ((size_t)(const void *)((filename) + 1) - (size_t)(const void *)(filename) == 1) &amp;&amp; (__s1_len = __builtin_strlen(filename) , __s1_len &lt; 4) ? (__builtin_constant_p("-") &amp;&amp; ((size_t)(const void *)(("-") + 1) - (size_t)(const void *)("-") == 1) ? __builtin_strcmp(filename, "-") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("-");
        int __result = (((const unsigned char *)(const char *)(filename))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(filename))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(filename))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(filename))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("-") &amp;&amp; ((size_t)(const void *)(("-") + 1) - (size_t)(const void *)("-") == 1) &amp;&amp; (__s2_len = __builtin_strlen("-") , __s2_len &lt; 4) ? (__builtin_constant_p(filename) &amp;&amp; ((size_t)(const void *)((filename) + 1) - (size_t)(const void *)(filename) == 1) ? __builtin_strcmp(filename, "-") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(filename);
        int __result = (((const unsigned char *)(const char *)("-"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("-"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("-"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("-"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(filename, "-"))));
}) == 0<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>hmm-&gt;acc != ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>hmm-&gt;name != ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>((V-&gt;format) &gt; 100)<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>TransitionScoreLookup</SensitiveFunction>
	<ReferableCheck>hmm == ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(filename) &amp;&amp; __builtin_constant_p("-") &amp;&amp; (__s1_len = __builtin_strlen(filename) , __s2_len = __builtin_strlen("-") , (!((size_t)(const void *)((filename) + 1) - (size_t)(const void *)(filename) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("-") + 1) - (size_t)(const void *)("-") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(filename, "-") : (__builtin_constant_p(filename) &amp;&amp; ((size_t)(const void *)((filename) + 1) - (size_t)(const void *)(filename) == 1) &amp;&amp; (__s1_len = __builtin_strlen(filename) , __s1_len &lt; 4) ? (__builtin_constant_p("-") &amp;&amp; ((size_t)(const void *)(("-") + 1) - (size_t)(const void *)("-") == 1) ? __builtin_strcmp(filename, "-") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("-");
        int __result = (((const unsigned char *)(const char *)(filename))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(filename))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(filename))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(filename))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("-") &amp;&amp; ((size_t)(const void *)(("-") + 1) - (size_t)(const void *)("-") == 1) &amp;&amp; (__s2_len = __builtin_strlen("-") , __s2_len &lt; 4) ? (__builtin_constant_p(filename) &amp;&amp; ((size_t)(const void *)((filename) + 1) - (size_t)(const void *)(filename) == 1) ? __builtin_strcmp(filename, "-") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(filename);
        int __result = (((const unsigned char *)(const char *)("-"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("-"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("-"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("-"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(filename, "-"))));
}) == 0<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>hmm-&gt;acc != ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>hmm-&gt;name != ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>((V-&gt;format) &gt; 100)<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>Turbulence</SensitiveFunction>
	<ReferableCheck>Fog-&gt;Turb != __null<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(filename) &amp;&amp; __builtin_constant_p("-") &amp;&amp; (__s1_len = __builtin_strlen(filename) , __s2_len = __builtin_strlen("-") , (!((size_t)(const void *)((filename) + 1) - (size_t)(const void *)(filename) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("-") + 1) - (size_t)(const void *)("-") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(filename, "-") : (__builtin_constant_p(filename) &amp;&amp; ((size_t)(const void *)((filename) + 1) - (size_t)(const void *)(filename) == 1) &amp;&amp; (__s1_len = __builtin_strlen(filename) , __s1_len &lt; 4) ? (__builtin_constant_p("-") &amp;&amp; ((size_t)(const void *)(("-") + 1) - (size_t)(const void *)("-") == 1) ? __builtin_strcmp(filename, "-") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("-");
        int __result = (((const unsigned char *)(const char *)(filename))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(filename))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(filename))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(filename))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("-") &amp;&amp; ((size_t)(const void *)(("-") + 1) - (size_t)(const void *)("-") == 1) &amp;&amp; (__s2_len = __builtin_strlen("-") , __s2_len &lt; 4) ? (__builtin_constant_p(filename) &amp;&amp; ((size_t)(const void *)((filename) + 1) - (size_t)(const void *)(filename) == 1) ? __builtin_strcmp(filename, "-") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(filename);
        int __result = (((const unsigned char *)(const char *)("-"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("-"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("-"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("-"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(filename, "-"))));
}) == 0<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>hmm-&gt;acc != ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>hmm-&gt;name != ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>((V-&gt;format) &gt; 100)<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>UnfitHistogram</SensitiveFunction>
	<ReferableCheck>h-&gt;histogram[sc - h-&gt;min] &gt; max<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(filename) &amp;&amp; __builtin_constant_p("-") &amp;&amp; (__s1_len = __builtin_strlen(filename) , __s2_len = __builtin_strlen("-") , (!((size_t)(const void *)((filename) + 1) - (size_t)(const void *)(filename) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("-") + 1) - (size_t)(const void *)("-") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(filename, "-") : (__builtin_constant_p(filename) &amp;&amp; ((size_t)(const void *)((filename) + 1) - (size_t)(const void *)(filename) == 1) &amp;&amp; (__s1_len = __builtin_strlen(filename) , __s1_len &lt; 4) ? (__builtin_constant_p("-") &amp;&amp; ((size_t)(const void *)(("-") + 1) - (size_t)(const void *)("-") == 1) ? __builtin_strcmp(filename, "-") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("-");
        int __result = (((const unsigned char *)(const char *)(filename))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(filename))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(filename))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(filename))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("-") &amp;&amp; ((size_t)(const void *)(("-") + 1) - (size_t)(const void *)("-") == 1) &amp;&amp; (__s2_len = __builtin_strlen("-") , __s2_len &lt; 4) ? (__builtin_constant_p(filename) &amp;&amp; ((size_t)(const void *)((filename) + 1) - (size_t)(const void *)(filename) == 1) ? __builtin_strcmp(filename, "-") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(filename);
        int __result = (((const unsigned char *)(const char *)("-"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("-"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("-"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("-"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(filename, "-"))));
}) == 0<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>hmm-&gt;acc != ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>hmm-&gt;name != ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>((V-&gt;format) &gt; 100)<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>Warn</SensitiveFunction>
	<ReferableCheck>(hmmfp-&gt;f = fopen(hmmfile, "r")) != ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(filename) &amp;&amp; __builtin_constant_p("-") &amp;&amp; (__s1_len = __builtin_strlen(filename) , __s2_len = __builtin_strlen("-") , (!((size_t)(const void *)((filename) + 1) - (size_t)(const void *)(filename) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("-") + 1) - (size_t)(const void *)("-") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(filename, "-") : (__builtin_constant_p(filename) &amp;&amp; ((size_t)(const void *)((filename) + 1) - (size_t)(const void *)(filename) == 1) &amp;&amp; (__s1_len = __builtin_strlen(filename) , __s1_len &lt; 4) ? (__builtin_constant_p("-") &amp;&amp; ((size_t)(const void *)(("-") + 1) - (size_t)(const void *)("-") == 1) ? __builtin_strcmp(filename, "-") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("-");
        int __result = (((const unsigned char *)(const char *)(filename))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(filename))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(filename))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(filename))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("-") &amp;&amp; ((size_t)(const void *)(("-") + 1) - (size_t)(const void *)("-") == 1) &amp;&amp; (__s2_len = __builtin_strlen("-") , __s2_len &lt; 4) ? (__builtin_constant_p(filename) &amp;&amp; ((size_t)(const void *)((filename) + 1) - (size_t)(const void *)(filename) == 1) ? __builtin_strcmp(filename, "-") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(filename);
        int __result = (((const unsigned char *)(const char *)("-"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("-"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("-"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("-"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(filename, "-"))));
}) == 0<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>hmm-&gt;acc != ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>hmm-&gt;name != ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>((V-&gt;format) &gt; 100)<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>_E__die_error</SensitiveFunction>
	<ReferableCheck>(mem = malloc(size)) == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>n_state == 5<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>fread(&amp;file_chksum, sizeof(uint32), 1, fp) != 1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!file<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>pronlen &lt; 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>_E__fatal_sys_error</SensitiveFunction>
	<ReferableCheck>!mdeffile<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(fp = fopen(file_name, "rb")) == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>fillerfile<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!dictfile<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(lm-&gt;fp = fopen(file, "rb")) == ((void *)0)<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>_E__pr_info</SensitiveFunction>
	<ReferableCheck>!mdeffile<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>nc == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>comp_sep<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>fillerfile<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!dictfile<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>_E__pr_warn</SensitiveFunction>
	<ReferableCheck>max_sv &lt; 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(mode) &amp;&amp; __builtin_constant_p("r") &amp;&amp; (__s1_len = __builtin_strlen(mode) , __s2_len = __builtin_strlen("r") , (!((size_t)(const void *)((mode) + 1) - (size_t)(const void *)(mode) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("r") + 1) - (size_t)(const void *)("r") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(mode, "r") : (__builtin_constant_p(mode) &amp;&amp; ((size_t)(const void *)((mode) + 1) - (size_t)(const void *)(mode) == 1) &amp;&amp; (__s1_len = __builtin_strlen(mode) , __s1_len &lt; 4) ? (__builtin_constant_p("r") &amp;&amp; ((size_t)(const void *)(("r") + 1) - (size_t)(const void *)("r") == 1) ? __builtin_strcmp(mode, "r") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("r");
        int __result = (((const unsigned char *)(const char *)(mode))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(mode))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(mode))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(mode))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("r") &amp;&amp; ((size_t)(const void *)(("r") + 1) - (size_t)(const void *)("r") == 1) &amp;&amp; (__s2_len = __builtin_strlen("r") , __s2_len &lt; 4) ? (__builtin_constant_p(mode) &amp;&amp; ((size_t)(const void *)((mode) + 1) - (size_t)(const void *)(mode) == 1) ? __builtin_strcmp(mode, "r") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(mode);
        int __result = (((const unsigned char *)(const char *)("r"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("r"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("r"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("r"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(mode, "r"))));
}) == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(k &gt; 2) &amp;&amp; ((__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(file + k - 2) &amp;&amp; __builtin_constant_p(".Z") &amp;&amp; (__s1_len = __builtin_strlen(file + k - 2) , __s2_len = __builtin_strlen(".Z") , (!((size_t)(const void *)((file + k - 2) + 1) - (size_t)(const void *)(file + k - 2) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)((".Z") + 1) - (size_t)(const void *)(".Z") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(file + k - 2, ".Z") : (__builtin_constant_p(file + k - 2) &amp;&amp; ((size_t)(const void *)((file + k - 2) + 1) - (size_t)(const void *)(file + k - 2) == 1) &amp;&amp; (__s1_len = __builtin_strlen(file + k - 2) , __s1_len &lt; 4) ? (__builtin_constant_p(".Z") &amp;&amp; ((size_t)(const void *)((".Z") + 1) - (size_t)(const void *)(".Z") == 1) ? __builtin_strcmp(file + k - 2, ".Z") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(".Z");
        int __result = (((const unsigned char *)(const char *)(file + k - 2))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(file + k - 2))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(file + k - 2))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(file + k - 2))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(".Z") &amp;&amp; ((size_t)(const void *)((".Z") + 1) - (size_t)(const void *)(".Z") == 1) &amp;&amp; (__s2_len = __builtin_strlen(".Z") , __s2_len &lt; 4) ? (__builtin_constant_p(file + k - 2) &amp;&amp; ((size_t)(const void *)((file + k - 2) + 1) - (size_t)(const void *)(file + k - 2) == 1) ? __builtin_strcmp(file + k - 2, ".Z") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(file + k - 2);
        int __result = (((const unsigned char *)(const char *)(".Z"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(".Z"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(".Z"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(".Z"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(file + k - 2, ".Z"))));
}) == 0) || (__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(file + k - 2) &amp;&amp; __builtin_constant_p(".z") &amp;&amp; (__s1_len = __builtin_strlen(file + k - 2) , __s2_len = __builtin_strlen(".z") , (!((size_t)(const void *)((file + k - 2) + 1) - (size_t)(const void *)(file + k - 2) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)((".z") + 1) - (size_t)(const void *)(".z") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(file + k - 2, ".z") : (__builtin_constant_p(file + k - 2) &amp;&amp; ((size_t)(const void *)((file + k - 2) + 1) - (size_t)(const void *)(file + k - 2) == 1) &amp;&amp; (__s1_len = __builtin_strlen(file + k - 2) , __s1_len &lt; 4) ? (__builtin_constant_p(".z") &amp;&amp; ((size_t)(const void *)((".z") + 1) - (size_t)(const void *)(".z") == 1) ? __builtin_strcmp(file + k - 2, ".z") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(".z");
        int __result = (((const unsigned char *)(const char *)(file + k - 2))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(file + k - 2))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(file + k - 2))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(file + k - 2))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(".z") &amp;&amp; ((size_t)(const void *)((".z") + 1) - (size_t)(const void *)(".z") == 1) &amp;&amp; (__s2_len = __builtin_strlen(".z") , __s2_len &lt; 4) ? (__builtin_constant_p(file + k - 2) &amp;&amp; ((size_t)(const void *)((file + k - 2) + 1) - (size_t)(const void *)(file + k - 2) == 1) ? __builtin_strcmp(file + k - 2, ".z") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(file + k - 2);
        int __result = (((const unsigned char *)(const char *)(".z"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(".z"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(".z"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(".z"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(file + k - 2, ".z"))));
}) == 0))<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>fcb-&gt;cepsize &lt;= 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>nfr &lt; 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>_E__sys_error</SensitiveFunction>
	<ReferableCheck>stat(file, statbuf) == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(mode) &amp;&amp; __builtin_constant_p("r") &amp;&amp; (__s1_len = __builtin_strlen(mode) , __s2_len = __builtin_strlen("r") , (!((size_t)(const void *)((mode) + 1) - (size_t)(const void *)(mode) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("r") + 1) - (size_t)(const void *)("r") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(mode, "r") : (__builtin_constant_p(mode) &amp;&amp; ((size_t)(const void *)((mode) + 1) - (size_t)(const void *)(mode) == 1) &amp;&amp; (__s1_len = __builtin_strlen(mode) , __s1_len &lt; 4) ? (__builtin_constant_p("r") &amp;&amp; ((size_t)(const void *)(("r") + 1) - (size_t)(const void *)("r") == 1) ? __builtin_strcmp(mode, "r") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("r");
        int __result = (((const unsigned char *)(const char *)(mode))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(mode))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(mode))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(mode))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("r") &amp;&amp; ((size_t)(const void *)(("r") + 1) - (size_t)(const void *)("r") == 1) &amp;&amp; (__s2_len = __builtin_strlen("r") , __s2_len &lt; 4) ? (__builtin_constant_p(mode) &amp;&amp; ((size_t)(const void *)((mode) + 1) - (size_t)(const void *)(mode) == 1) ? __builtin_strcmp(mode, "r") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(mode);
        int __result = (((const unsigned char *)(const char *)("r"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("r"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("r"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("r"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(mode, "r"))));
}) == 0<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>(k &gt; 2) &amp;&amp; ((__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(file + k - 2) &amp;&amp; __builtin_constant_p(".Z") &amp;&amp; (__s1_len = __builtin_strlen(file + k - 2) , __s2_len = __builtin_strlen(".Z") , (!((size_t)(const void *)((file + k - 2) + 1) - (size_t)(const void *)(file + k - 2) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)((".Z") + 1) - (size_t)(const void *)(".Z") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(file + k - 2, ".Z") : (__builtin_constant_p(file + k - 2) &amp;&amp; ((size_t)(const void *)((file + k - 2) + 1) - (size_t)(const void *)(file + k - 2) == 1) &amp;&amp; (__s1_len = __builtin_strlen(file + k - 2) , __s1_len &lt; 4) ? (__builtin_constant_p(".Z") &amp;&amp; ((size_t)(const void *)((".Z") + 1) - (size_t)(const void *)(".Z") == 1) ? __builtin_strcmp(file + k - 2, ".Z") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(".Z");
        int __result = (((const unsigned char *)(const char *)(file + k - 2))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(file + k - 2))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(file + k - 2))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(file + k - 2))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(".Z") &amp;&amp; ((size_t)(const void *)((".Z") + 1) - (size_t)(const void *)(".Z") == 1) &amp;&amp; (__s2_len = __builtin_strlen(".Z") , __s2_len &lt; 4) ? (__builtin_constant_p(file + k - 2) &amp;&amp; ((size_t)(const void *)((file + k - 2) + 1) - (size_t)(const void *)(file + k - 2) == 1) ? __builtin_strcmp(file + k - 2, ".Z") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(file + k - 2);
        int __result = (((const unsigned char *)(const char *)(".Z"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(".Z"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(".Z"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(".Z"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(file + k - 2, ".Z"))));
}) == 0) || (__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(file + k - 2) &amp;&amp; __builtin_constant_p(".z") &amp;&amp; (__s1_len = __builtin_strlen(file + k - 2) , __s2_len = __builtin_strlen(".z") , (!((size_t)(const void *)((file + k - 2) + 1) - (size_t)(const void *)(file + k - 2) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)((".z") + 1) - (size_t)(const void *)(".z") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(file + k - 2, ".z") : (__builtin_constant_p(file + k - 2) &amp;&amp; ((size_t)(const void *)((file + k - 2) + 1) - (size_t)(const void *)(file + k - 2) == 1) &amp;&amp; (__s1_len = __builtin_strlen(file + k - 2) , __s1_len &lt; 4) ? (__builtin_constant_p(".z") &amp;&amp; ((size_t)(const void *)((".z") + 1) - (size_t)(const void *)(".z") == 1) ? __builtin_strcmp(file + k - 2, ".z") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(".z");
        int __result = (((const unsigned char *)(const char *)(file + k - 2))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(file + k - 2))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(file + k - 2))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(file + k - 2))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(".z") &amp;&amp; ((size_t)(const void *)((".z") + 1) - (size_t)(const void *)(".z") == 1) &amp;&amp; (__s2_len = __builtin_strlen(".z") , __s2_len &lt; 4) ? (__builtin_constant_p(file + k - 2) &amp;&amp; ((size_t)(const void *)((file + k - 2) + 1) - (size_t)(const void *)(file + k - 2) == 1) ? __builtin_strcmp(file + k - 2, ".z") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(file + k - 2);
        int __result = (((const unsigned char *)(const char *)(".z"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(".z"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(".z"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(".z"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(file + k - 2, ".z"))));
}) == 0))<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>fcb-&gt;cepsize &lt;= 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>nfr &lt; 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>__builtin_constant_p</SensitiveFunction>
	<ReferableCheck>opt[i].single == 0 &amp;&amp; (__extension__ (__builtin_constant_p(arglen) &amp;&amp; ((__builtin_constant_p(opt[i].name) &amp;&amp; strlen(opt[i].name) &lt; ((size_t)(arglen))) || (__builtin_constant_p(argv[optind]) &amp;&amp; strlen(argv[optind]) &lt; ((size_t)(arglen)))) ? __extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(opt[i].name) &amp;&amp; __builtin_constant_p(argv[optind]) &amp;&amp; (__s1_len = __builtin_strlen(opt[i].name) , __s2_len = __builtin_strlen(argv[optind]) , (!((size_t)(const void *)((opt[i].name) + 1) - (size_t)(const void *)(opt[i].name) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)((argv[optind]) + 1) - (size_t)(const void *)(argv[optind]) == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(opt[i].name, argv[optind]) : (__builtin_constant_p(opt[i].name) &amp;&amp; ((size_t)(const void *)((opt[i].name) + 1) - (size_t)(const void *)(opt[i].name) == 1) &amp;&amp; (__s1_len = __builtin_strlen(opt[i].name) , __s1_len &lt; 4) ? (__builtin_constant_p(argv[optind]) &amp;&amp; ((size_t)(const void *)((argv[optind]) + 1) - (size_t)(const void *)(argv[optind]) == 1) ? __builtin_strcmp(opt[i].name, argv[optind]) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(argv[optind]);
        int __result = (((const unsigned char *)(const char *)(opt[i].name))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(opt[i].name))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(opt[i].name))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(opt[i].name))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(argv[optind]) &amp;&amp; ((size_t)(const void *)((argv[optind]) + 1) - (size_t)(const void *)(argv[optind]) == 1) &amp;&amp; (__s2_len = __builtin_strlen(argv[optind]) , __s2_len &lt; 4) ? (__builtin_constant_p(opt[i].name) &amp;&amp; ((size_t)(const void *)((opt[i].name) + 1) - (size_t)(const void *)(opt[i].name) == 1) ? __builtin_strcmp(opt[i].name, argv[optind]) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(opt[i].name);
        int __result = (((const unsigned char *)(const char *)(argv[optind]))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(argv[optind]))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(argv[optind]))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(argv[optind]))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(opt[i].name, argv[optind]))));
}) : strncmp(opt[i].name, argv[optind], arglen))) == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>mode[0] == 'a'<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(sptr = strtok(V-&gt;buf + 12, "\n\t ")) != ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(file2) &amp;&amp; __builtin_constant_p(tail) &amp;&amp; (__s1_len = __builtin_strlen(file2) , __s2_len = __builtin_strlen(tail) , (!((size_t)(const void *)((file2) + 1) - (size_t)(const void *)(file2) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)((tail) + 1) - (size_t)(const void *)(tail) == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(file2, tail) : (__builtin_constant_p(file2) &amp;&amp; ((size_t)(const void *)((file2) + 1) - (size_t)(const void *)(file2) == 1) &amp;&amp; (__s1_len = __builtin_strlen(file2) , __s1_len &lt; 4) ? (__builtin_constant_p(tail) &amp;&amp; ((size_t)(const void *)((tail) + 1) - (size_t)(const void *)(tail) == 1) ? __builtin_strcmp(file2, tail) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(tail);
        int __result = (((const unsigned char *)(const char *)(file2))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(file2))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(file2))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(file2))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(tail) &amp;&amp; ((size_t)(const void *)((tail) + 1) - (size_t)(const void *)(tail) == 1) &amp;&amp; (__s2_len = __builtin_strlen(tail) , __s2_len &lt; 4) ? (__builtin_constant_p(file2) &amp;&amp; ((size_t)(const void *)((file2) + 1) - (size_t)(const void *)(file2) == 1) ? __builtin_strcmp(file2, tail) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(file2);
        int __result = (((const unsigned char *)(const char *)(tail))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(tail))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(tail))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(tail))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(file2, tail))));
}) != 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>*cp-&gt;regparse == '^'<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>__builtin_strchr</SensitiveFunction>
	<ReferableCheck>prog-&gt;regstart != '\x00'<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>mode[0] == 'a'<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!((c) == ' ' || (c) == '.' || (c) == '_' || (c) == '-' || (c) == '~')<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(file2) &amp;&amp; __builtin_constant_p(tail) &amp;&amp; (__s1_len = __builtin_strlen(file2) , __s2_len = __builtin_strlen(tail) , (!((size_t)(const void *)((file2) + 1) - (size_t)(const void *)(file2) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)((tail) + 1) - (size_t)(const void *)(tail) == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(file2, tail) : (__builtin_constant_p(file2) &amp;&amp; ((size_t)(const void *)((file2) + 1) - (size_t)(const void *)(file2) == 1) &amp;&amp; (__s1_len = __builtin_strlen(file2) , __s1_len &lt; 4) ? (__builtin_constant_p(tail) &amp;&amp; ((size_t)(const void *)((tail) + 1) - (size_t)(const void *)(tail) == 1) ? __builtin_strcmp(file2, tail) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(tail);
        int __result = (((const unsigned char *)(const char *)(file2))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(file2))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(file2))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(file2))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(tail) &amp;&amp; ((size_t)(const void *)((tail) + 1) - (size_t)(const void *)(tail) == 1) &amp;&amp; (__s2_len = __builtin_strlen(tail) , __s2_len &lt; 4) ? (__builtin_constant_p(file2) &amp;&amp; ((size_t)(const void *)((file2) + 1) - (size_t)(const void *)(file2) == 1) ? __builtin_strcmp(file2, tail) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(file2);
        int __result = (((const unsigned char *)(const char *)(tail))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(tail))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(tail))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(tail))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(file2, tail))));
}) != 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>*cp-&gt;regparse == '^'<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>__builtin_strcmp</SensitiveFunction>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(file2) &amp;&amp; __builtin_constant_p(tail) &amp;&amp; (__s1_len = __builtin_strlen(file2) , __s2_len = __builtin_strlen(tail) , (!((size_t)(const void *)((file2) + 1) - (size_t)(const void *)(file2) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)((tail) + 1) - (size_t)(const void *)(tail) == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(file2, tail) : (__builtin_constant_p(file2) &amp;&amp; ((size_t)(const void *)((file2) + 1) - (size_t)(const void *)(file2) == 1) &amp;&amp; (__s1_len = __builtin_strlen(file2) , __s1_len &lt; 4) ? (__builtin_constant_p(tail) &amp;&amp; ((size_t)(const void *)((tail) + 1) - (size_t)(const void *)(tail) == 1) ? __builtin_strcmp(file2, tail) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(tail);
        int __result = (((const unsigned char *)(const char *)(file2))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(file2))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(file2))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(file2))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(tail) &amp;&amp; ((size_t)(const void *)((tail) + 1) - (size_t)(const void *)(tail) == 1) &amp;&amp; (__s2_len = __builtin_strlen(tail) , __s2_len &lt; 4) ? (__builtin_constant_p(file2) &amp;&amp; ((size_t)(const void *)((file2) + 1) - (size_t)(const void *)(file2) == 1) ? __builtin_strcmp(file2, tail) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(file2);
        int __result = (((const unsigned char *)(const char *)(tail))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(tail))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(tail))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(tail))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(file2, tail))));
}) != 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(agc) &amp;&amp; __builtin_constant_p("max") &amp;&amp; (__s1_len = __builtin_strlen(agc) , __s2_len = __builtin_strlen("max") , (!((size_t)(const void *)((agc) + 1) - (size_t)(const void *)(agc) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("max") + 1) - (size_t)(const void *)("max") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(agc, "max") : (__builtin_constant_p(agc) &amp;&amp; ((size_t)(const void *)((agc) + 1) - (size_t)(const void *)(agc) == 1) &amp;&amp; (__s1_len = __builtin_strlen(agc) , __s1_len &lt; 4) ? (__builtin_constant_p("max") &amp;&amp; ((size_t)(const void *)(("max") + 1) - (size_t)(const void *)("max") == 1) ? __builtin_strcmp(agc, "max") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("max");
        int __result = (((const unsigned char *)(const char *)(agc))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(agc))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(agc))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(agc))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("max") &amp;&amp; ((size_t)(const void *)(("max") + 1) - (size_t)(const void *)("max") == 1) &amp;&amp; (__s2_len = __builtin_strlen("max") , __s2_len &lt; 4) ? (__builtin_constant_p(agc) &amp;&amp; ((size_t)(const void *)((agc) + 1) - (size_t)(const void *)(agc) == 1) ? __builtin_strcmp(agc, "max") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(agc);
        int __result = (((const unsigned char *)(const char *)("max"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("max"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("max"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("max"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(agc, "max"))));
}) == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(varnorm) &amp;&amp; __builtin_constant_p("yes") &amp;&amp; (__s1_len = __builtin_strlen(varnorm) , __s2_len = __builtin_strlen("yes") , (!((size_t)(const void *)((varnorm) + 1) - (size_t)(const void *)(varnorm) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("yes") + 1) - (size_t)(const void *)("yes") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(varnorm, "yes") : (__builtin_constant_p(varnorm) &amp;&amp; ((size_t)(const void *)((varnorm) + 1) - (size_t)(const void *)(varnorm) == 1) &amp;&amp; (__s1_len = __builtin_strlen(varnorm) , __s1_len &lt; 4) ? (__builtin_constant_p("yes") &amp;&amp; ((size_t)(const void *)(("yes") + 1) - (size_t)(const void *)("yes") == 1) ? __builtin_strcmp(varnorm, "yes") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("yes");
        int __result = (((const unsigned char *)(const char *)(varnorm))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(varnorm))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(varnorm))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(varnorm))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("yes") &amp;&amp; ((size_t)(const void *)(("yes") + 1) - (size_t)(const void *)("yes") == 1) &amp;&amp; (__s2_len = __builtin_strlen("yes") , __s2_len &lt; 4) ? (__builtin_constant_p(varnorm) &amp;&amp; ((size_t)(const void *)((varnorm) + 1) - (size_t)(const void *)(varnorm) == 1) ? __builtin_strcmp(varnorm, "yes") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(varnorm);
        int __result = (((const unsigned char *)(const char *)("yes"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("yes"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("yes"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("yes"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(varnorm, "yes"))));
}) == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(cmn) &amp;&amp; __builtin_constant_p("current") &amp;&amp; (__s1_len = __builtin_strlen(cmn) , __s2_len = __builtin_strlen("current") , (!((size_t)(const void *)((cmn) + 1) - (size_t)(const void *)(cmn) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("current") + 1) - (size_t)(const void *)("current") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(cmn, "current") : (__builtin_constant_p(cmn) &amp;&amp; ((size_t)(const void *)((cmn) + 1) - (size_t)(const void *)(cmn) == 1) &amp;&amp; (__s1_len = __builtin_strlen(cmn) , __s1_len &lt; 4) ? (__builtin_constant_p("current") &amp;&amp; ((size_t)(const void *)(("current") + 1) - (size_t)(const void *)("current") == 1) ? __builtin_strcmp(cmn, "current") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("current");
        int __result = (((const unsigned char *)(const char *)(cmn))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(cmn))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(cmn))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(cmn))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("current") &amp;&amp; ((size_t)(const void *)(("current") + 1) - (size_t)(const void *)("current") == 1) &amp;&amp; (__s2_len = __builtin_strlen("current") , __s2_len &lt; 4) ? (__builtin_constant_p(cmn) &amp;&amp; ((size_t)(const void *)((cmn) + 1) - (size_t)(const void *)(cmn) == 1) ? __builtin_strcmp(cmn, "current") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(cmn);
        int __result = (((const unsigned char *)(const char *)("current"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("current"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("current"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("current"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(cmn, "current"))));
}) == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(type) &amp;&amp; __builtin_constant_p("s3_1x39") &amp;&amp; (__s1_len = __builtin_strlen(type) , __s2_len = __builtin_strlen("s3_1x39") , (!((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(type, "s3_1x39") : (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) &amp;&amp; (__s1_len = __builtin_strlen(type) , __s1_len &lt; 4) ? (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) ? __builtin_strcmp(type, "s3_1x39") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("s3_1x39");
        int __result = (((const unsigned char *)(const char *)(type))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(type))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(type))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(type))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) &amp;&amp; (__s2_len = __builtin_strlen("s3_1x39") , __s2_len &lt; 4) ? (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) ? __builtin_strcmp(type, "s3_1x39") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(type);
        int __result = (((const unsigned char *)(const char *)("s3_1x39"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("s3_1x39"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("s3_1x39"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("s3_1x39"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(type, "s3_1x39"))));
}) == 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>__builtin_strcspn</SensitiveFunction>
	<ReferableCheck>*cp-&gt;regparse == '^'<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(agc) &amp;&amp; __builtin_constant_p("max") &amp;&amp; (__s1_len = __builtin_strlen(agc) , __s2_len = __builtin_strlen("max") , (!((size_t)(const void *)((agc) + 1) - (size_t)(const void *)(agc) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("max") + 1) - (size_t)(const void *)("max") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(agc, "max") : (__builtin_constant_p(agc) &amp;&amp; ((size_t)(const void *)((agc) + 1) - (size_t)(const void *)(agc) == 1) &amp;&amp; (__s1_len = __builtin_strlen(agc) , __s1_len &lt; 4) ? (__builtin_constant_p("max") &amp;&amp; ((size_t)(const void *)(("max") + 1) - (size_t)(const void *)("max") == 1) ? __builtin_strcmp(agc, "max") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("max");
        int __result = (((const unsigned char *)(const char *)(agc))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(agc))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(agc))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(agc))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("max") &amp;&amp; ((size_t)(const void *)(("max") + 1) - (size_t)(const void *)("max") == 1) &amp;&amp; (__s2_len = __builtin_strlen("max") , __s2_len &lt; 4) ? (__builtin_constant_p(agc) &amp;&amp; ((size_t)(const void *)((agc) + 1) - (size_t)(const void *)(agc) == 1) ? __builtin_strcmp(agc, "max") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(agc);
        int __result = (((const unsigned char *)(const char *)("max"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("max"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("max"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("max"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(agc, "max"))));
}) == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(varnorm) &amp;&amp; __builtin_constant_p("yes") &amp;&amp; (__s1_len = __builtin_strlen(varnorm) , __s2_len = __builtin_strlen("yes") , (!((size_t)(const void *)((varnorm) + 1) - (size_t)(const void *)(varnorm) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("yes") + 1) - (size_t)(const void *)("yes") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(varnorm, "yes") : (__builtin_constant_p(varnorm) &amp;&amp; ((size_t)(const void *)((varnorm) + 1) - (size_t)(const void *)(varnorm) == 1) &amp;&amp; (__s1_len = __builtin_strlen(varnorm) , __s1_len &lt; 4) ? (__builtin_constant_p("yes") &amp;&amp; ((size_t)(const void *)(("yes") + 1) - (size_t)(const void *)("yes") == 1) ? __builtin_strcmp(varnorm, "yes") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("yes");
        int __result = (((const unsigned char *)(const char *)(varnorm))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(varnorm))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(varnorm))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(varnorm))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("yes") &amp;&amp; ((size_t)(const void *)(("yes") + 1) - (size_t)(const void *)("yes") == 1) &amp;&amp; (__s2_len = __builtin_strlen("yes") , __s2_len &lt; 4) ? (__builtin_constant_p(varnorm) &amp;&amp; ((size_t)(const void *)((varnorm) + 1) - (size_t)(const void *)(varnorm) == 1) ? __builtin_strcmp(varnorm, "yes") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(varnorm);
        int __result = (((const unsigned char *)(const char *)("yes"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("yes"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("yes"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("yes"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(varnorm, "yes"))));
}) == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(cmn) &amp;&amp; __builtin_constant_p("current") &amp;&amp; (__s1_len = __builtin_strlen(cmn) , __s2_len = __builtin_strlen("current") , (!((size_t)(const void *)((cmn) + 1) - (size_t)(const void *)(cmn) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("current") + 1) - (size_t)(const void *)("current") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(cmn, "current") : (__builtin_constant_p(cmn) &amp;&amp; ((size_t)(const void *)((cmn) + 1) - (size_t)(const void *)(cmn) == 1) &amp;&amp; (__s1_len = __builtin_strlen(cmn) , __s1_len &lt; 4) ? (__builtin_constant_p("current") &amp;&amp; ((size_t)(const void *)(("current") + 1) - (size_t)(const void *)("current") == 1) ? __builtin_strcmp(cmn, "current") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("current");
        int __result = (((const unsigned char *)(const char *)(cmn))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(cmn))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(cmn))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(cmn))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("current") &amp;&amp; ((size_t)(const void *)(("current") + 1) - (size_t)(const void *)("current") == 1) &amp;&amp; (__s2_len = __builtin_strlen("current") , __s2_len &lt; 4) ? (__builtin_constant_p(cmn) &amp;&amp; ((size_t)(const void *)((cmn) + 1) - (size_t)(const void *)(cmn) == 1) ? __builtin_strcmp(cmn, "current") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(cmn);
        int __result = (((const unsigned char *)(const char *)("current"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("current"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("current"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("current"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(cmn, "current"))));
}) == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(type) &amp;&amp; __builtin_constant_p("s3_1x39") &amp;&amp; (__s1_len = __builtin_strlen(type) , __s2_len = __builtin_strlen("s3_1x39") , (!((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(type, "s3_1x39") : (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) &amp;&amp; (__s1_len = __builtin_strlen(type) , __s1_len &lt; 4) ? (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) ? __builtin_strcmp(type, "s3_1x39") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("s3_1x39");
        int __result = (((const unsigned char *)(const char *)(type))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(type))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(type))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(type))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) &amp;&amp; (__s2_len = __builtin_strlen("s3_1x39") , __s2_len &lt; 4) ? (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) ? __builtin_strcmp(type, "s3_1x39") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(type);
        int __result = (((const unsigned char *)(const char *)("s3_1x39"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("s3_1x39"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("s3_1x39"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("s3_1x39"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(type, "s3_1x39"))));
}) == 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>__builtin_strncat</SensitiveFunction>
	<ReferableCheck>sptr == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(agc) &amp;&amp; __builtin_constant_p("max") &amp;&amp; (__s1_len = __builtin_strlen(agc) , __s2_len = __builtin_strlen("max") , (!((size_t)(const void *)((agc) + 1) - (size_t)(const void *)(agc) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("max") + 1) - (size_t)(const void *)("max") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(agc, "max") : (__builtin_constant_p(agc) &amp;&amp; ((size_t)(const void *)((agc) + 1) - (size_t)(const void *)(agc) == 1) &amp;&amp; (__s1_len = __builtin_strlen(agc) , __s1_len &lt; 4) ? (__builtin_constant_p("max") &amp;&amp; ((size_t)(const void *)(("max") + 1) - (size_t)(const void *)("max") == 1) ? __builtin_strcmp(agc, "max") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("max");
        int __result = (((const unsigned char *)(const char *)(agc))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(agc))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(agc))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(agc))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("max") &amp;&amp; ((size_t)(const void *)(("max") + 1) - (size_t)(const void *)("max") == 1) &amp;&amp; (__s2_len = __builtin_strlen("max") , __s2_len &lt; 4) ? (__builtin_constant_p(agc) &amp;&amp; ((size_t)(const void *)((agc) + 1) - (size_t)(const void *)(agc) == 1) ? __builtin_strcmp(agc, "max") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(agc);
        int __result = (((const unsigned char *)(const char *)("max"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("max"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("max"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("max"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(agc, "max"))));
}) == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(varnorm) &amp;&amp; __builtin_constant_p("yes") &amp;&amp; (__s1_len = __builtin_strlen(varnorm) , __s2_len = __builtin_strlen("yes") , (!((size_t)(const void *)((varnorm) + 1) - (size_t)(const void *)(varnorm) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("yes") + 1) - (size_t)(const void *)("yes") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(varnorm, "yes") : (__builtin_constant_p(varnorm) &amp;&amp; ((size_t)(const void *)((varnorm) + 1) - (size_t)(const void *)(varnorm) == 1) &amp;&amp; (__s1_len = __builtin_strlen(varnorm) , __s1_len &lt; 4) ? (__builtin_constant_p("yes") &amp;&amp; ((size_t)(const void *)(("yes") + 1) - (size_t)(const void *)("yes") == 1) ? __builtin_strcmp(varnorm, "yes") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("yes");
        int __result = (((const unsigned char *)(const char *)(varnorm))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(varnorm))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(varnorm))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(varnorm))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("yes") &amp;&amp; ((size_t)(const void *)(("yes") + 1) - (size_t)(const void *)("yes") == 1) &amp;&amp; (__s2_len = __builtin_strlen("yes") , __s2_len &lt; 4) ? (__builtin_constant_p(varnorm) &amp;&amp; ((size_t)(const void *)((varnorm) + 1) - (size_t)(const void *)(varnorm) == 1) ? __builtin_strcmp(varnorm, "yes") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(varnorm);
        int __result = (((const unsigned char *)(const char *)("yes"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("yes"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("yes"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("yes"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(varnorm, "yes"))));
}) == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(cmn) &amp;&amp; __builtin_constant_p("current") &amp;&amp; (__s1_len = __builtin_strlen(cmn) , __s2_len = __builtin_strlen("current") , (!((size_t)(const void *)((cmn) + 1) - (size_t)(const void *)(cmn) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("current") + 1) - (size_t)(const void *)("current") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(cmn, "current") : (__builtin_constant_p(cmn) &amp;&amp; ((size_t)(const void *)((cmn) + 1) - (size_t)(const void *)(cmn) == 1) &amp;&amp; (__s1_len = __builtin_strlen(cmn) , __s1_len &lt; 4) ? (__builtin_constant_p("current") &amp;&amp; ((size_t)(const void *)(("current") + 1) - (size_t)(const void *)("current") == 1) ? __builtin_strcmp(cmn, "current") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("current");
        int __result = (((const unsigned char *)(const char *)(cmn))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(cmn))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(cmn))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(cmn))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("current") &amp;&amp; ((size_t)(const void *)(("current") + 1) - (size_t)(const void *)("current") == 1) &amp;&amp; (__s2_len = __builtin_strlen("current") , __s2_len &lt; 4) ? (__builtin_constant_p(cmn) &amp;&amp; ((size_t)(const void *)((cmn) + 1) - (size_t)(const void *)(cmn) == 1) ? __builtin_strcmp(cmn, "current") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(cmn);
        int __result = (((const unsigned char *)(const char *)("current"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("current"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("current"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("current"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(cmn, "current"))));
}) == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(type) &amp;&amp; __builtin_constant_p("s3_1x39") &amp;&amp; (__s1_len = __builtin_strlen(type) , __s2_len = __builtin_strlen("s3_1x39") , (!((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(type, "s3_1x39") : (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) &amp;&amp; (__s1_len = __builtin_strlen(type) , __s1_len &lt; 4) ? (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) ? __builtin_strcmp(type, "s3_1x39") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("s3_1x39");
        int __result = (((const unsigned char *)(const char *)(type))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(type))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(type))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(type))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) &amp;&amp; (__s2_len = __builtin_strlen("s3_1x39") , __s2_len &lt; 4) ? (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) ? __builtin_strcmp(type, "s3_1x39") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(type);
        int __result = (((const unsigned char *)(const char *)("s3_1x39"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("s3_1x39"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("s3_1x39"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("s3_1x39"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(type, "s3_1x39"))));
}) == 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>__builtin_strncpy</SensitiveFunction>
	<ReferableCheck>str[i] == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>strlen(key) &gt;= 32<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>strlen(from) &gt; 1034 - 10<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>sptr == ((void *)0)<Number>4</Number>
	</ReferableCheck>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(type) &amp;&amp; __builtin_constant_p("s3_1x39") &amp;&amp; (__s1_len = __builtin_strlen(type) , __s2_len = __builtin_strlen("s3_1x39") , (!((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(type, "s3_1x39") : (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) &amp;&amp; (__s1_len = __builtin_strlen(type) , __s1_len &lt; 4) ? (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) ? __builtin_strcmp(type, "s3_1x39") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("s3_1x39");
        int __result = (((const unsigned char *)(const char *)(type))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(type))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(type))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(type))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) &amp;&amp; (__s2_len = __builtin_strlen("s3_1x39") , __s2_len &lt; 4) ? (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) ? __builtin_strcmp(type, "s3_1x39") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(type);
        int __result = (((const unsigned char *)(const char *)("s3_1x39"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("s3_1x39"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("s3_1x39"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("s3_1x39"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(type, "s3_1x39"))));
}) == 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>__ckd_calloc__</SensitiveFunction>
	<ReferableCheck>(elemsize % sizeof(void *)) != 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>strlen(key) &gt;= 32<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>strlen(from) &gt; 1034 - 10<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>sptr == ((void *)0)<Number>4</Number>
	</ReferableCheck>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(type) &amp;&amp; __builtin_constant_p("s3_1x39") &amp;&amp; (__s1_len = __builtin_strlen(type) , __s2_len = __builtin_strlen("s3_1x39") , (!((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(type, "s3_1x39") : (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) &amp;&amp; (__s1_len = __builtin_strlen(type) , __s1_len &lt; 4) ? (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) ? __builtin_strcmp(type, "s3_1x39") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("s3_1x39");
        int __result = (((const unsigned char *)(const char *)(type))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(type))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(type))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(type))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) &amp;&amp; (__s2_len = __builtin_strlen("s3_1x39") , __s2_len &lt; 4) ? (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) ? __builtin_strcmp(type, "s3_1x39") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(type);
        int __result = (((const unsigned char *)(const char *)("s3_1x39"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("s3_1x39"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("s3_1x39"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("s3_1x39"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(type, "s3_1x39"))));
}) == 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>__ckd_salloc__</SensitiveFunction>
	<ReferableCheck>hash_lookup(d-&gt;pht, str, &amp;id) &lt; 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>d-&gt;n_word &gt;= d-&gt;max_words<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>strlen(from) &gt; 1034 - 10<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>sptr == ((void *)0)<Number>4</Number>
	</ReferableCheck>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(type) &amp;&amp; __builtin_constant_p("s3_1x39") &amp;&amp; (__s1_len = __builtin_strlen(type) , __s2_len = __builtin_strlen("s3_1x39") , (!((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(type, "s3_1x39") : (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) &amp;&amp; (__s1_len = __builtin_strlen(type) , __s1_len &lt; 4) ? (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) ? __builtin_strcmp(type, "s3_1x39") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("s3_1x39");
        int __result = (((const unsigned char *)(const char *)(type))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(type))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(type))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(type))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) &amp;&amp; (__s2_len = __builtin_strlen("s3_1x39") , __s2_len &lt; 4) ? (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) ? __builtin_strcmp(type, "s3_1x39") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(type);
        int __result = (((const unsigned char *)(const char *)("s3_1x39"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("s3_1x39"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("s3_1x39"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("s3_1x39"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(type, "s3_1x39"))));
}) == 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>__strcspn_c1</SensitiveFunction>
	<ReferableCheck>*cp-&gt;regparse == '^'<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>d-&gt;n_word &gt;= d-&gt;max_words<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>strlen(from) &gt; 1034 - 10<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>sptr == ((void *)0)<Number>4</Number>
	</ReferableCheck>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(type) &amp;&amp; __builtin_constant_p("s3_1x39") &amp;&amp; (__s1_len = __builtin_strlen(type) , __s2_len = __builtin_strlen("s3_1x39") , (!((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(type, "s3_1x39") : (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) &amp;&amp; (__s1_len = __builtin_strlen(type) , __s1_len &lt; 4) ? (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) ? __builtin_strcmp(type, "s3_1x39") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("s3_1x39");
        int __result = (((const unsigned char *)(const char *)(type))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(type))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(type))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(type))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) &amp;&amp; (__s2_len = __builtin_strlen("s3_1x39") , __s2_len &lt; 4) ? (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) ? __builtin_strcmp(type, "s3_1x39") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(type);
        int __result = (((const unsigned char *)(const char *)("s3_1x39"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("s3_1x39"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("s3_1x39"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("s3_1x39"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(type, "s3_1x39"))));
}) == 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>__strcspn_c2</SensitiveFunction>
	<ReferableCheck>*cp-&gt;regparse == '^'<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>d-&gt;n_word &gt;= d-&gt;max_words<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>strlen(from) &gt; 1034 - 10<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>sptr == ((void *)0)<Number>4</Number>
	</ReferableCheck>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(type) &amp;&amp; __builtin_constant_p("s3_1x39") &amp;&amp; (__s1_len = __builtin_strlen(type) , __s2_len = __builtin_strlen("s3_1x39") , (!((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(type, "s3_1x39") : (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) &amp;&amp; (__s1_len = __builtin_strlen(type) , __s1_len &lt; 4) ? (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) ? __builtin_strcmp(type, "s3_1x39") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("s3_1x39");
        int __result = (((const unsigned char *)(const char *)(type))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(type))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(type))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(type))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) &amp;&amp; (__s2_len = __builtin_strlen("s3_1x39") , __s2_len &lt; 4) ? (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) ? __builtin_strcmp(type, "s3_1x39") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(type);
        int __result = (((const unsigned char *)(const char *)("s3_1x39"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("s3_1x39"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("s3_1x39"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("s3_1x39"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(type, "s3_1x39"))));
}) == 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>__strcspn_c3</SensitiveFunction>
	<ReferableCheck>*cp-&gt;regparse == '^'<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>d-&gt;n_word &gt;= d-&gt;max_words<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>strlen(from) &gt; 1034 - 10<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>sptr == ((void *)0)<Number>4</Number>
	</ReferableCheck>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(type) &amp;&amp; __builtin_constant_p("s3_1x39") &amp;&amp; (__s1_len = __builtin_strlen(type) , __s2_len = __builtin_strlen("s3_1x39") , (!((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(type, "s3_1x39") : (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) &amp;&amp; (__s1_len = __builtin_strlen(type) , __s1_len &lt; 4) ? (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) ? __builtin_strcmp(type, "s3_1x39") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("s3_1x39");
        int __result = (((const unsigned char *)(const char *)(type))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(type))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(type))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(type))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) &amp;&amp; (__s2_len = __builtin_strlen("s3_1x39") , __s2_len &lt; 4) ? (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) ? __builtin_strcmp(type, "s3_1x39") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(type);
        int __result = (((const unsigned char *)(const char *)("s3_1x39"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("s3_1x39"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("s3_1x39"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("s3_1x39"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(type, "s3_1x39"))));
}) == 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>abs</SensitiveFunction>
	<ReferableCheck>dquant &lt;= 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(level1 != level2) &amp;&amp; (level1 != 0) &amp;&amp; (level2 != 0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>level1 != level2 &amp;&amp; level1 != 0 &amp;&amp; level2 != 0<Number>4</Number>
	</ReferableCheck>
	<ReferableCheck>sptr == ((void *)0)<Number>4</Number>
	</ReferableCheck>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(type) &amp;&amp; __builtin_constant_p("s3_1x39") &amp;&amp; (__s1_len = __builtin_strlen(type) , __s2_len = __builtin_strlen("s3_1x39") , (!((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(type, "s3_1x39") : (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) &amp;&amp; (__s1_len = __builtin_strlen(type) , __s1_len &lt; 4) ? (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) ? __builtin_strcmp(type, "s3_1x39") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("s3_1x39");
        int __result = (((const unsigned char *)(const char *)(type))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(type))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(type))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(type))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) &amp;&amp; (__s2_len = __builtin_strlen("s3_1x39") , __s2_len &lt; 4) ? (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) ? __builtin_strcmp(type, "s3_1x39") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(type);
        int __result = (((const unsigned char *)(const char *)("s3_1x39"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("s3_1x39"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("s3_1x39"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("s3_1x39"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(type, "s3_1x39"))));
}) == 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>activate_external_sort</SensitiveFunction>
	<ReferableCheck>g-&gt;nprimary &gt;= 2147483647L<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>g-&gt;nsecondary &gt;= 2147483647L<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>level1 != level2 &amp;&amp; level1 != 0 &amp;&amp; level2 != 0<Number>4</Number>
	</ReferableCheck>
	<ReferableCheck>sptr == ((void *)0)<Number>4</Number>
	</ReferableCheck>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(type) &amp;&amp; __builtin_constant_p("s3_1x39") &amp;&amp; (__s1_len = __builtin_strlen(type) , __s2_len = __builtin_strlen("s3_1x39") , (!((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(type, "s3_1x39") : (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) &amp;&amp; (__s1_len = __builtin_strlen(type) , __s1_len &lt; 4) ? (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) ? __builtin_strcmp(type, "s3_1x39") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("s3_1x39");
        int __result = (((const unsigned char *)(const char *)(type))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(type))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(type))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(type))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) &amp;&amp; (__s2_len = __builtin_strlen("s3_1x39") , __s2_len &lt; 4) ? (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) ? __builtin_strcmp(type, "s3_1x39") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(type);
        int __result = (((const unsigned char *)(const char *)("s3_1x39"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("s3_1x39"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("s3_1x39"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("s3_1x39"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(type, "s3_1x39"))));
}) == 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>add_capture</SensitiveFunction>
	<ReferableCheck>board[target] == 13<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>board[target] == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>board[target] == 13 &amp;&amp; captures<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>sptr == ((void *)0)<Number>4</Number>
	</ReferableCheck>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(type) &amp;&amp; __builtin_constant_p("s3_1x39") &amp;&amp; (__s1_len = __builtin_strlen(type) , __s2_len = __builtin_strlen("s3_1x39") , (!((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(type, "s3_1x39") : (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) &amp;&amp; (__s1_len = __builtin_strlen(type) , __s1_len &lt; 4) ? (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) ? __builtin_strcmp(type, "s3_1x39") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("s3_1x39");
        int __result = (((const unsigned char *)(const char *)(type))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(type))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(type))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(type))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) &amp;&amp; (__s2_len = __builtin_strlen("s3_1x39") , __s2_len &lt; 4) ? (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) ? __builtin_strcmp(type, "s3_1x39") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(type);
        int __result = (((const unsigned char *)(const char *)("s3_1x39"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("s3_1x39"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("s3_1x39"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("s3_1x39"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(type, "s3_1x39"))));
}) == 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>add_move</SensitiveFunction>
	<ReferableCheck>board[target] == 13<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>board[target] == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>board[target] == 13 &amp;&amp; captures<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>sptr == ((void *)0)<Number>4</Number>
	</ReferableCheck>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(type) &amp;&amp; __builtin_constant_p("s3_1x39") &amp;&amp; (__s1_len = __builtin_strlen(type) , __s2_len = __builtin_strlen("s3_1x39") , (!((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(type, "s3_1x39") : (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) &amp;&amp; (__s1_len = __builtin_strlen(type) , __s1_len &lt; 4) ? (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) ? __builtin_strcmp(type, "s3_1x39") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("s3_1x39");
        int __result = (((const unsigned char *)(const char *)(type))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(type))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(type))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(type))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) &amp;&amp; (__s2_len = __builtin_strlen("s3_1x39") , __s2_len &lt; 4) ? (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) ? __builtin_strcmp(type, "s3_1x39") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(type);
        int __result = (((const unsigned char *)(const char *)("s3_1x39"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("s3_1x39"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("s3_1x39"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("s3_1x39"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(type, "s3_1x39"))));
}) == 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>add_pair_to_block</SensitiveFunction>
	<ReferableCheck>s-&gt;mode == 2<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>board[target] == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>board[target] == 13 &amp;&amp; captures<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>sptr == ((void *)0)<Number>4</Number>
	</ReferableCheck>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(type) &amp;&amp; __builtin_constant_p("s3_1x39") &amp;&amp; (__s1_len = __builtin_strlen(type) , __s2_len = __builtin_strlen("s3_1x39") , (!((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(type, "s3_1x39") : (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) &amp;&amp; (__s1_len = __builtin_strlen(type) , __s1_len &lt; 4) ? (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) ? __builtin_strcmp(type, "s3_1x39") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("s3_1x39");
        int __result = (((const unsigned char *)(const char *)(type))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(type))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(type))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(type))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) &amp;&amp; (__s2_len = __builtin_strlen("s3_1x39") , __s2_len &lt; 4) ? (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) ? __builtin_strcmp(type, "s3_1x39") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(type);
        int __result = (((const unsigned char *)(const char *)("s3_1x39"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("s3_1x39"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("s3_1x39"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("s3_1x39"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(type, "s3_1x39"))));
}) == 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>addseq</SensitiveFunction>
	<ReferableCheck>(si = strstr(V-&gt;buf, "  Length: ")) != ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>board[target] == 13 &amp;&amp; captures<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>sptr == ((void *)0)<Number>4</Number>
	</ReferableCheck>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(type) &amp;&amp; __builtin_constant_p("s3_1x39") &amp;&amp; (__s1_len = __builtin_strlen(type) , __s2_len = __builtin_strlen("s3_1x39") , (!((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(type, "s3_1x39") : (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) &amp;&amp; (__s1_len = __builtin_strlen(type) , __s1_len &lt; 4) ? (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) ? __builtin_strcmp(type, "s3_1x39") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("s3_1x39");
        int __result = (((const unsigned char *)(const char *)(type))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(type))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(type))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(type))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) &amp;&amp; (__s2_len = __builtin_strlen("s3_1x39") , __s2_len &lt; 4) ? (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) ? __builtin_strcmp(type, "s3_1x39") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(type);
        int __result = (((const unsigned char *)(const char *)("s3_1x39"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("s3_1x39"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("s3_1x39"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("s3_1x39"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(type, "s3_1x39"))));
}) == 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>agc_max</SensitiveFunction>
	<ReferableCheck>nfr &lt; 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>board[target] == 13 &amp;&amp; captures<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>sptr == ((void *)0)<Number>4</Number>
	</ReferableCheck>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(type) &amp;&amp; __builtin_constant_p("s3_1x39") &amp;&amp; (__s1_len = __builtin_strlen(type) , __s2_len = __builtin_strlen("s3_1x39") , (!((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(type, "s3_1x39") : (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) &amp;&amp; (__s1_len = __builtin_strlen(type) , __s1_len &lt; 4) ? (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) ? __builtin_strcmp(type, "s3_1x39") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("s3_1x39");
        int __result = (((const unsigned char *)(const char *)(type))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(type))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(type))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(type))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) &amp;&amp; (__s2_len = __builtin_strlen("s3_1x39") , __s2_len &lt; 4) ? (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) ? __builtin_strcmp(type, "s3_1x39") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(type);
        int __result = (((const unsigned char *)(const char *)("s3_1x39"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("s3_1x39"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("s3_1x39"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("s3_1x39"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(type, "s3_1x39"))));
}) == 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>annotate_model</SensitiveFunction>
	<ReferableCheck>apos &lt;= msa-&gt;alen<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>board[target] == 13 &amp;&amp; captures<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>sptr == ((void *)0)<Number>4</Number>
	</ReferableCheck>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(type) &amp;&amp; __builtin_constant_p("s3_1x39") &amp;&amp; (__s1_len = __builtin_strlen(type) , __s2_len = __builtin_strlen("s3_1x39") , (!((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(type, "s3_1x39") : (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) &amp;&amp; (__s1_len = __builtin_strlen(type) , __s1_len &lt; 4) ? (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) ? __builtin_strcmp(type, "s3_1x39") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("s3_1x39");
        int __result = (((const unsigned char *)(const char *)(type))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(type))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(type))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(type))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) &amp;&amp; (__s2_len = __builtin_strlen("s3_1x39") , __s2_len &lt; 4) ? (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) ? __builtin_strcmp(type, "s3_1x39") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(type);
        int __result = (((const unsigned char *)(const char *)("s3_1x39"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("s3_1x39"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("s3_1x39"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("s3_1x39"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(type, "s3_1x39"))));
}) == 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>approx_cont_mgau_ci_eval</SensitiveFunction>
	<ReferableCheck>kb-&gt;cache_ci_senscr[f][i] &gt; kb-&gt;cache_best_list[f]<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>board[target] == 13 &amp;&amp; captures<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>sptr == ((void *)0)<Number>4</Number>
	</ReferableCheck>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(type) &amp;&amp; __builtin_constant_p("s3_1x39") &amp;&amp; (__s1_len = __builtin_strlen(type) , __s2_len = __builtin_strlen("s3_1x39") , (!((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(type, "s3_1x39") : (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) &amp;&amp; (__s1_len = __builtin_strlen(type) , __s1_len &lt; 4) ? (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) ? __builtin_strcmp(type, "s3_1x39") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("s3_1x39");
        int __result = (((const unsigned char *)(const char *)(type))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(type))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(type))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(type))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) &amp;&amp; (__s2_len = __builtin_strlen("s3_1x39") , __s2_len &lt; 4) ? (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) ? __builtin_strcmp(type, "s3_1x39") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(type);
        int __result = (((const unsigned char *)(const char *)("s3_1x39"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("s3_1x39"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("s3_1x39"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("s3_1x39"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(type, "s3_1x39"))));
}) == 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>approx_cont_mgau_frame_eval</SensitiveFunction>
	<ReferableCheck>kb-&gt;cache_ci_senscr[f][i] &gt; kb-&gt;cache_best_list[f]<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>board[target] == 13 &amp;&amp; captures<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>sptr == ((void *)0)<Number>4</Number>
	</ReferableCheck>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(type) &amp;&amp; __builtin_constant_p("s3_1x39") &amp;&amp; (__s1_len = __builtin_strlen(type) , __s2_len = __builtin_strlen("s3_1x39") , (!((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(type, "s3_1x39") : (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) &amp;&amp; (__s1_len = __builtin_strlen(type) , __s1_len &lt; 4) ? (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) ? __builtin_strcmp(type, "s3_1x39") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("s3_1x39");
        int __result = (((const unsigned char *)(const char *)(type))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(type))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(type))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(type))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) &amp;&amp; (__s2_len = __builtin_strlen("s3_1x39") , __s2_len &lt; 4) ? (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) ? __builtin_strcmp(type, "s3_1x39") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(type);
        int __result = (((const unsigned char *)(const char *)("s3_1x39"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("s3_1x39"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("s3_1x39"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("s3_1x39"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(type, "s3_1x39"))));
}) == 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>approx_mgau_eval</SensitiveFunction>
	<ReferableCheck>(pbest - senscr[cd2cisen[s]] &lt; kb-&gt;ci_pbeam)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>pbest &lt; senscr[s]<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>board[target] == 13 &amp;&amp; captures<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>sptr == ((void *)0)<Number>4</Number>
	</ReferableCheck>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(type) &amp;&amp; __builtin_constant_p("s3_1x39") &amp;&amp; (__s1_len = __builtin_strlen(type) , __s2_len = __builtin_strlen("s3_1x39") , (!((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(type, "s3_1x39") : (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) &amp;&amp; (__s1_len = __builtin_strlen(type) , __s1_len &lt; 4) ? (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) ? __builtin_strcmp(type, "s3_1x39") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("s3_1x39");
        int __result = (((const unsigned char *)(const char *)(type))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(type))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(type))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(type))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) &amp;&amp; (__s2_len = __builtin_strlen("s3_1x39") , __s2_len &lt; 4) ? (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) ? __builtin_strcmp(type, "s3_1x39") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(type);
        int __result = (((const unsigned char *)(const char *)("s3_1x39"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("s3_1x39"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("s3_1x39"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("s3_1x39"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(type, "s3_1x39"))));
}) == 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>arg_dump</SensitiveFunction>
	<ReferableCheck>hash_enter(ht, defn[i].name, i) != i<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>pbest &lt; senscr[s]<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>board[target] == 13 &amp;&amp; captures<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>sptr == ((void *)0)<Number>4</Number>
	</ReferableCheck>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(type) &amp;&amp; __builtin_constant_p("s3_1x39") &amp;&amp; (__s1_len = __builtin_strlen(type) , __s2_len = __builtin_strlen("s3_1x39") , (!((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(type, "s3_1x39") : (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) &amp;&amp; (__s1_len = __builtin_strlen(type) , __s1_len &lt; 4) ? (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) ? __builtin_strcmp(type, "s3_1x39") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("s3_1x39");
        int __result = (((const unsigned char *)(const char *)(type))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(type))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(type))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(type))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) &amp;&amp; (__s2_len = __builtin_strlen("s3_1x39") , __s2_len &lt; 4) ? (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) ? __builtin_strcmp(type, "s3_1x39") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(type);
        int __result = (((const unsigned char *)(const char *)("s3_1x39"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("s3_1x39"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("s3_1x39"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("s3_1x39"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(type, "s3_1x39"))));
}) == 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>arg_str2val</SensitiveFunction>
	<ReferableCheck>arg_str2val(argval + i, defn[i].type, argv[j + 1]) &lt; 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>pbest &lt; senscr[s]<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>board[target] == 13 &amp;&amp; captures<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>sptr == ((void *)0)<Number>4</Number>
	</ReferableCheck>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(type) &amp;&amp; __builtin_constant_p("s3_1x39") &amp;&amp; (__s1_len = __builtin_strlen(type) , __s2_len = __builtin_strlen("s3_1x39") , (!((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(type, "s3_1x39") : (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) &amp;&amp; (__s1_len = __builtin_strlen(type) , __s1_len &lt; 4) ? (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) ? __builtin_strcmp(type, "s3_1x39") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("s3_1x39");
        int __result = (((const unsigned char *)(const char *)(type))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(type))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(type))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(type))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) &amp;&amp; (__s2_len = __builtin_strlen("s3_1x39") , __s2_len &lt; 4) ? (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) ? __builtin_strcmp(type, "s3_1x39") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(type);
        int __result = (((const unsigned char *)(const char *)("s3_1x39"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("s3_1x39"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("s3_1x39"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("s3_1x39"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(type, "s3_1x39"))));
}) == 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>atan</SensitiveFunction>
	<ReferableCheck>start &lt;= 0.<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>end &lt;= 0.<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>board[target] == 13 &amp;&amp; captures<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>sptr == ((void *)0)<Number>4</Number>
	</ReferableCheck>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(type) &amp;&amp; __builtin_constant_p("s3_1x39") &amp;&amp; (__s1_len = __builtin_strlen(type) , __s2_len = __builtin_strlen("s3_1x39") , (!((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(type, "s3_1x39") : (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) &amp;&amp; (__s1_len = __builtin_strlen(type) , __s1_len &lt; 4) ? (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) ? __builtin_strcmp(type, "s3_1x39") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("s3_1x39");
        int __result = (((const unsigned char *)(const char *)(type))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(type))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(type))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(type))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) &amp;&amp; (__s2_len = __builtin_strlen("s3_1x39") , __s2_len &lt; 4) ? (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) ? __builtin_strcmp(type, "s3_1x39") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(type);
        int __result = (((const unsigned char *)(const char *)("s3_1x39"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("s3_1x39"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("s3_1x39"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("s3_1x39"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(type, "s3_1x39"))));
}) == 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>atoi</SensitiveFunction>
	<ReferableCheck>sptr == ((void *)0)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>end &lt;= 0.<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>board[target] == 13 &amp;&amp; captures<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>sptr == ((void *)0)<Number>4</Number>
	</ReferableCheck>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(type) &amp;&amp; __builtin_constant_p("s3_1x39") &amp;&amp; (__s1_len = __builtin_strlen(type) , __s2_len = __builtin_strlen("s3_1x39") , (!((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(type, "s3_1x39") : (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) &amp;&amp; (__s1_len = __builtin_strlen(type) , __s1_len &lt; 4) ? (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) ? __builtin_strcmp(type, "s3_1x39") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("s3_1x39");
        int __result = (((const unsigned char *)(const char *)(type))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(type))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(type))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(type))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) &amp;&amp; (__s2_len = __builtin_strlen("s3_1x39") , __s2_len &lt; 4) ? (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) ? __builtin_strcmp(type, "s3_1x39") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(type);
        int __result = (((const unsigned char *)(const char *)("s3_1x39"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("s3_1x39"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("s3_1x39"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("s3_1x39"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(type, "s3_1x39"))));
}) == 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>bcomment_read</SensitiveFunction>
	<ReferableCheck>fgets(line, sizeof (line), fp) == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>end &lt;= 0.<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>board[target] == 13 &amp;&amp; captures<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>sptr == ((void *)0)<Number>4</Number>
	</ReferableCheck>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(type) &amp;&amp; __builtin_constant_p("s3_1x39") &amp;&amp; (__s1_len = __builtin_strlen(type) , __s2_len = __builtin_strlen("s3_1x39") , (!((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(type, "s3_1x39") : (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) &amp;&amp; (__s1_len = __builtin_strlen(type) , __s1_len &lt; 4) ? (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) ? __builtin_strcmp(type, "s3_1x39") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("s3_1x39");
        int __result = (((const unsigned char *)(const char *)(type))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(type))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(type))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(type))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) &amp;&amp; (__s2_len = __builtin_strlen("s3_1x39") , __s2_len &lt; 4) ? (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) ? __builtin_strcmp(type, "s3_1x39") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(type);
        int __result = (((const unsigned char *)(const char *)("s3_1x39"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("s3_1x39"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("s3_1x39"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("s3_1x39"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(type, "s3_1x39"))));
}) == 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>bcopy</SensitiveFunction>
	<ReferableCheck>fld_curs[found] + *chunksize &gt; fld_bufsize[found]<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>end &lt;= 0.<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>board[target] == 13 &amp;&amp; captures<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>sptr == ((void *)0)<Number>4</Number>
	</ReferableCheck>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(type) &amp;&amp; __builtin_constant_p("s3_1x39") &amp;&amp; (__s1_len = __builtin_strlen(type) , __s2_len = __builtin_strlen("s3_1x39") , (!((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(type, "s3_1x39") : (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) &amp;&amp; (__s1_len = __builtin_strlen(type) , __s1_len &lt; 4) ? (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) ? __builtin_strcmp(type, "s3_1x39") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("s3_1x39");
        int __result = (((const unsigned char *)(const char *)(type))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(type))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(type))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(type))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) &amp;&amp; (__s2_len = __builtin_strlen("s3_1x39") , __s2_len &lt; 4) ? (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) ? __builtin_strcmp(type, "s3_1x39") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(type);
        int __result = (((const unsigned char *)(const char *)("s3_1x39"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("s3_1x39"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("s3_1x39"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("s3_1x39"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(type, "s3_1x39"))));
}) == 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>binary_search</SensitiveFunction>
	<ReferableCheck>sfp-&gt;nsecondary &gt; 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>end &lt;= 0.<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>board[target] == 13 &amp;&amp; captures<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>sptr == ((void *)0)<Number>4</Number>
	</ReferableCheck>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(type) &amp;&amp; __builtin_constant_p("s3_1x39") &amp;&amp; (__s1_len = __builtin_strlen(type) , __s2_len = __builtin_strlen("s3_1x39") , (!((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(type, "s3_1x39") : (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) &amp;&amp; (__s1_len = __builtin_strlen(type) , __s1_len &lt; 4) ? (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) ? __builtin_strcmp(type, "s3_1x39") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("s3_1x39");
        int __result = (((const unsigned char *)(const char *)(type))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(type))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(type))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(type))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) &amp;&amp; (__s2_len = __builtin_strlen("s3_1x39") , __s2_len &lt; 4) ? (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) ? __builtin_strcmp(type, "s3_1x39") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(type);
        int __result = (((const unsigned char *)(const char *)("s3_1x39"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("s3_1x39"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("s3_1x39"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("s3_1x39"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(type, "s3_1x39"))));
}) == 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>bio_fread</SensitiveFunction>
	<ReferableCheck>bio_fread(n_el, sizeof(int32), 1, fp, sw, ck) != 1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>end &lt;= 0.<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>board[target] == 13 &amp;&amp; captures<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>sptr == ((void *)0)<Number>4</Number>
	</ReferableCheck>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(type) &amp;&amp; __builtin_constant_p("s3_1x39") &amp;&amp; (__s1_len = __builtin_strlen(type) , __s2_len = __builtin_strlen("s3_1x39") , (!((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(type, "s3_1x39") : (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) &amp;&amp; (__s1_len = __builtin_strlen(type) , __s1_len &lt; 4) ? (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) ? __builtin_strcmp(type, "s3_1x39") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("s3_1x39");
        int __result = (((const unsigned char *)(const char *)(type))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(type))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(type))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(type))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) &amp;&amp; (__s2_len = __builtin_strlen("s3_1x39") , __s2_len &lt; 4) ? (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) ? __builtin_strcmp(type, "s3_1x39") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(type);
        int __result = (((const unsigned char *)(const char *)("s3_1x39"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("s3_1x39"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("s3_1x39"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("s3_1x39"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(type, "s3_1x39"))));
}) == 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>bsFinishWrite</SensitiveFunction>
	<ReferableCheck>s-&gt;nblock &gt; 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>end &lt;= 0.<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>board[target] == 13 &amp;&amp; captures<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>sptr == ((void *)0)<Number>4</Number>
	</ReferableCheck>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(type) &amp;&amp; __builtin_constant_p("s3_1x39") &amp;&amp; (__s1_len = __builtin_strlen(type) , __s2_len = __builtin_strlen("s3_1x39") , (!((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(type, "s3_1x39") : (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) &amp;&amp; (__s1_len = __builtin_strlen(type) , __s1_len &lt; 4) ? (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) ? __builtin_strcmp(type, "s3_1x39") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("s3_1x39");
        int __result = (((const unsigned char *)(const char *)(type))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(type))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(type))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(type))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) &amp;&amp; (__s2_len = __builtin_strlen("s3_1x39") , __s2_len &lt; 4) ? (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) ? __builtin_strcmp(type, "s3_1x39") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(type);
        int __result = (((const unsigned char *)(const char *)("s3_1x39"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("s3_1x39"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("s3_1x39"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("s3_1x39"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(type, "s3_1x39"))));
}) == 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>bsPutUChar</SensitiveFunction>
	<ReferableCheck>s-&gt;nblock &gt; 0<Number>16</Number>
	</ReferableCheck>
	<ReferableCheck>end &lt;= 0.<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>board[target] == 13 &amp;&amp; captures<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>sptr == ((void *)0)<Number>4</Number>
	</ReferableCheck>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(type) &amp;&amp; __builtin_constant_p("s3_1x39") &amp;&amp; (__s1_len = __builtin_strlen(type) , __s2_len = __builtin_strlen("s3_1x39") , (!((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(type, "s3_1x39") : (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) &amp;&amp; (__s1_len = __builtin_strlen(type) , __s1_len &lt; 4) ? (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) ? __builtin_strcmp(type, "s3_1x39") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("s3_1x39");
        int __result = (((const unsigned char *)(const char *)(type))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(type))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(type))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(type))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) &amp;&amp; (__s2_len = __builtin_strlen("s3_1x39") , __s2_len &lt; 4) ? (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) ? __builtin_strcmp(type, "s3_1x39") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(type);
        int __result = (((const unsigned char *)(const char *)("s3_1x39"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("s3_1x39"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("s3_1x39"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("s3_1x39"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(type, "s3_1x39"))));
}) == 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>bsPutUInt32</SensitiveFunction>
	<ReferableCheck>s-&gt;nblock &gt; 0<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>end &lt;= 0.<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>board[target] == 13 &amp;&amp; captures<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>sptr == ((void *)0)<Number>4</Number>
	</ReferableCheck>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(type) &amp;&amp; __builtin_constant_p("s3_1x39") &amp;&amp; (__s1_len = __builtin_strlen(type) , __s2_len = __builtin_strlen("s3_1x39") , (!((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(type, "s3_1x39") : (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) &amp;&amp; (__s1_len = __builtin_strlen(type) , __s1_len &lt; 4) ? (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) ? __builtin_strcmp(type, "s3_1x39") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("s3_1x39");
        int __result = (((const unsigned char *)(const char *)(type))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(type))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(type))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(type))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) &amp;&amp; (__s2_len = __builtin_strlen("s3_1x39") , __s2_len &lt; 4) ? (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) ? __builtin_strcmp(type, "s3_1x39") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(type);
        int __result = (((const unsigned char *)(const char *)("s3_1x39"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("s3_1x39"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("s3_1x39"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("s3_1x39"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(type, "s3_1x39"))));
}) == 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>bsW</SensitiveFunction>
	<ReferableCheck>s-&gt;nblock &gt; 0<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>s-&gt;verbosity &gt;= 3<Number>63</Number>
	</ReferableCheck>
	<ReferableCheck>board[target] == 13 &amp;&amp; captures<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>sptr == ((void *)0)<Number>4</Number>
	</ReferableCheck>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(type) &amp;&amp; __builtin_constant_p("s3_1x39") &amp;&amp; (__s1_len = __builtin_strlen(type) , __s2_len = __builtin_strlen("s3_1x39") , (!((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(type, "s3_1x39") : (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) &amp;&amp; (__s1_len = __builtin_strlen(type) , __s1_len &lt; 4) ? (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) ? __builtin_strcmp(type, "s3_1x39") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("s3_1x39");
        int __result = (((const unsigned char *)(const char *)(type))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(type))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(type))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(type))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) &amp;&amp; (__s2_len = __builtin_strlen("s3_1x39") , __s2_len &lt; 4) ? (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) ? __builtin_strcmp(type, "s3_1x39") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(type);
        int __result = (((const unsigned char *)(const char *)("s3_1x39"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("s3_1x39"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("s3_1x39"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("s3_1x39"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(type, "s3_1x39"))));
}) == 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>build_cij</SensitiveFunction>
	<ReferableCheck>!((msa-&gt;aseq[idx][i]) == ' ' || (msa-&gt;aseq[idx][i]) == '.' || (msa-&gt;aseq[idx][i]) == '_' || (msa-&gt;aseq[idx][i]) == '-' || (msa-&gt;aseq[idx][i]) == '~')<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>s-&gt;verbosity &gt;= 3<Number>63</Number>
	</ReferableCheck>
	<ReferableCheck>board[target] == 13 &amp;&amp; captures<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>sptr == ((void *)0)<Number>4</Number>
	</ReferableCheck>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(type) &amp;&amp; __builtin_constant_p("s3_1x39") &amp;&amp; (__s1_len = __builtin_strlen(type) , __s2_len = __builtin_strlen("s3_1x39") , (!((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(type, "s3_1x39") : (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) &amp;&amp; (__s1_len = __builtin_strlen(type) , __s1_len &lt; 4) ? (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) ? __builtin_strcmp(type, "s3_1x39") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("s3_1x39");
        int __result = (((const unsigned char *)(const char *)(type))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(type))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(type))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(type))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) &amp;&amp; (__s2_len = __builtin_strlen("s3_1x39") , __s2_len &lt; 4) ? (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) ? __builtin_strcmp(type, "s3_1x39") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(type);
        int __result = (((const unsigned char *)(const char *)("s3_1x39"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("s3_1x39"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("s3_1x39"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("s3_1x39"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(type, "s3_1x39"))));
}) == 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>byterevn</SensitiveFunction>
	<ReferableCheck>gf-&gt;rank2rcv == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>s-&gt;verbosity &gt;= 3<Number>63</Number>
	</ReferableCheck>
	<ReferableCheck>board[target] == 13 &amp;&amp; captures<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>sptr == ((void *)0)<Number>4</Number>
	</ReferableCheck>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(type) &amp;&amp; __builtin_constant_p("s3_1x39") &amp;&amp; (__s1_len = __builtin_strlen(type) , __s2_len = __builtin_strlen("s3_1x39") , (!((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(type, "s3_1x39") : (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) &amp;&amp; (__s1_len = __builtin_strlen(type) , __s1_len &lt; 4) ? (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) ? __builtin_strcmp(type, "s3_1x39") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("s3_1x39");
        int __result = (((const unsigned char *)(const char *)(type))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(type))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(type))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(type))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) &amp;&amp; (__s2_len = __builtin_strlen("s3_1x39") , __s2_len &lt; 4) ? (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) ? __builtin_strcmp(type, "s3_1x39") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(type);
        int __result = (((const unsigned char *)(const char *)("s3_1x39"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("s3_1x39"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("s3_1x39"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("s3_1x39"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(type, "s3_1x39"))));
}) == 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>calloc</SensitiveFunction>
	<ReferableCheck>(tree = (struct phylo_s *)malloc((N - 1) * sizeof(struct phylo_s))) == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>net-&gt;n_trips &lt;= 15000<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>nsamps + FE-&gt;NUM_OVERFLOW_SAMPS &gt;= FE-&gt;FRAME_SIZE<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(cep = (float32 **)fe_create_2d(frame_count + 1, FE-&gt;NUM_CEPSTRA, sizeof(float32))) == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>k % 2 != 0 || N &lt; 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>chksum_accum</SensitiveFunction>
	<ReferableCheck>fread(buf, el_sz, n_el, fp) != (size_t)n_el<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>net-&gt;n_trips &lt;= 15000<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>nsamps + FE-&gt;NUM_OVERFLOW_SAMPS &gt;= FE-&gt;FRAME_SIZE<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(cep = (float32 **)fe_create_2d(frame_count + 1, FE-&gt;NUM_CEPSTRA, sizeof(float32))) == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>k % 2 != 0 || N &lt; 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>ciphone_add</SensitiveFunction>
	<ReferableCheck>sscanf(lp, "%s%n", word, &amp;wlen) != 1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>net-&gt;n_trips &lt;= 15000<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>nsamps + FE-&gt;NUM_OVERFLOW_SAMPS &gt;= FE-&gt;FRAME_SIZE<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(cep = (float32 **)fe_create_2d(frame_count + 1, FE-&gt;NUM_CEPSTRA, sizeof(float32))) == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>k % 2 != 0 || N &lt; 0<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>ckd_free</SensitiveFunction>
	<ReferableCheck>lextree-&gt;n_lc &gt; 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>kb-&gt;hyp_str<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>kb-&gt;hyp_segs<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ptr &amp;&amp; ptr[0]<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ptr<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>clear_ssifile</SensitiveFunction>
	<ReferableCheck>sfp != ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>kb-&gt;hyp_str<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>kb-&gt;hyp_segs<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ptr &amp;&amp; ptr[0]<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ptr<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>close</SensitiveFunction>
	<ReferableCheck>fd &lt; 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>fh == -1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>kb-&gt;hyp_segs<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ptr &amp;&amp; ptr[0]<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ptr<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>cmd_ln_print_help</SensitiveFunction>
	<ReferableCheck>hash_enter(ht, defn[i].name, i) != i<Number>4</Number>
	</ReferableCheck>
	<ReferableCheck>fh == -1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>kb-&gt;hyp_segs<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ptr &amp;&amp; ptr[0]<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ptr<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>cmn</SensitiveFunction>
	<ReferableCheck>fcb-&gt;cepsize &lt;= 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>fh == -1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>kb-&gt;hyp_segs<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ptr &amp;&amp; ptr[0]<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ptr<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>cmn_prior</SensitiveFunction>
	<ReferableCheck>fcb-&gt;cepsize &lt;= 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>fh == -1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>kb-&gt;hyp_segs<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ptr &amp;&amp; ptr[0]<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ptr<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>computePhnHeur</SensitiveFunction>
	<ReferableCheck>kb-&gt;cache_ci_senscr[f][i] &gt; kb-&gt;cache_best_list[f]<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>fh == -1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>kb-&gt;hyp_segs<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ptr &amp;&amp; ptr[0]<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ptr<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>copyFileName</SensitiveFunction>
	<ReferableCheck>name == ((void *)0) &amp;&amp; srcMode != 1<Number>8</Number>
	</ReferableCheck>
	<ReferableCheck>fh == -1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>kb-&gt;hyp_segs<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ptr &amp;&amp; ptr[0]<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ptr<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>copy_input_until_stop</SensitiveFunction>
	<ReferableCheck>s-&gt;state == 1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>fh == -1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>kb-&gt;hyp_segs<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ptr &amp;&amp; ptr[0]<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ptr<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>copy_output_until_stop</SensitiveFunction>
	<ReferableCheck>s-&gt;state == 1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>fh == -1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>kb-&gt;hyp_segs<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ptr &amp;&amp; ptr[0]<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ptr<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>current_index_size</SensitiveFunction>
	<ReferableCheck>g-&gt;nprimary &gt;= 2147483647L<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>g-&gt;nsecondary &gt;= 2147483647L<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>kb-&gt;hyp_segs<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ptr &amp;&amp; ptr[0]<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ptr<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>dict2pid_comsseq2sen_active</SensitiveFunction>
	<ReferableCheck>kb-&gt;sen_active<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>g-&gt;nsecondary &gt;= 2147483647L<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>kb-&gt;hyp_segs<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ptr &amp;&amp; ptr[0]<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ptr<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>dict_add_word</SensitiveFunction>
	<ReferableCheck>(nwd = str2words(line, wptr, maxwd)) &lt; 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>g-&gt;nsecondary &gt;= 2147483647L<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>kb-&gt;hyp_segs<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ptr &amp;&amp; ptr[0]<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ptr<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>dict_build_comp</SensitiveFunction>
	<ReferableCheck>comp_sep<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>g-&gt;nsecondary &gt;= 2147483647L<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>kb-&gt;hyp_segs<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ptr &amp;&amp; ptr[0]<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ptr<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>dict_ciphone_id</SensitiveFunction>
	<ReferableCheck>(nwd = str2words(line, wptr, maxwd)) &lt; 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>g-&gt;nsecondary &gt;= 2147483647L<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>kb-&gt;hyp_segs<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ptr &amp;&amp; ptr[0]<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ptr<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>dict_comp_head</SensitiveFunction>
	<ReferableCheck>(wd[0] == sep) || (wd[l - 1] == sep)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>g-&gt;nsecondary &gt;= 2147483647L<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>kb-&gt;hyp_segs<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ptr &amp;&amp; ptr[0]<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ptr<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>dict_filler_word</SensitiveFunction>
	<ReferableCheck>(wd[0] == sep) || (wd[l - 1] == sep)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>dict_filler_word(dict, w)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>kb-&gt;hyp_segs<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ptr &amp;&amp; ptr[0]<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ptr<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>dict_init</SensitiveFunction>
	<ReferableCheck>dictfile<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>dict_filler_word(dict, w)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>kb-&gt;hyp_segs<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ptr &amp;&amp; ptr[0]<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ptr<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>dict_word2basestr</SensitiveFunction>
	<ReferableCheck>d-&gt;n_word &gt;= d-&gt;max_words<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>dict_filler_word(dict, w)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>kb-&gt;hyp_segs<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ptr &amp;&amp; ptr[0]<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ptr<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>dict_wordid</SensitiveFunction>
	<ReferableCheck>(wd[0] == sep) || (wd[l - 1] == sep)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>dict-&gt;filler_end &gt;= dict-&gt;filler_start<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>kb-&gt;hyp_segs<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ptr &amp;&amp; ptr[0]<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ptr<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>do_fog</SensitiveFunction>
	<ReferableCheck>!Light_Ray_Flag<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>dict-&gt;filler_end &gt;= dict-&gt;filler_start<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>kb-&gt;hyp_segs<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ptr &amp;&amp; ptr[0]<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ptr<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>do_rainbow</SensitiveFunction>
	<ReferableCheck>!Light_Ray_Flag<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>dict-&gt;filler_end &gt;= dict-&gt;filler_start<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>kb-&gt;hyp_segs<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ptr &amp;&amp; ptr[0]<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ptr<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>do_skysphere</SensitiveFunction>
	<ReferableCheck>opts.Options &amp; 65536L &amp;&amp; !(In_Reflection_Ray || (Radiosity_Trace_Level &gt; 1))<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>dict-&gt;filler_end &gt;= dict-&gt;filler_start<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>kb-&gt;hyp_segs<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ptr &amp;&amp; ptr[0]<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ptr<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>downweight</SensitiveFunction>
	<ReferableCheck>nseq == 1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>lwt[node] + rwt[node] &gt; 0.<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>kb-&gt;hyp_segs<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ptr &amp;&amp; ptr[0]<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ptr<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>dslash</SensitiveFunction>
	<ReferableCheck>src == temp<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>lwt[node] + rwt[node] &gt; 0.<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>kb-&gt;hyp_segs<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ptr &amp;&amp; ptr[0]<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ptr<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>estimate_model_length</SensitiveFunction>
	<ReferableCheck>!((msa-&gt;aseq[idx][i]) == ' ' || (msa-&gt;aseq[idx][i]) == '.' || (msa-&gt;aseq[idx][i]) == '_' || (msa-&gt;aseq[idx][i]) == '-' || (msa-&gt;aseq[idx][i]) == '~')<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>lwt[node] + rwt[node] &gt; 0.<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>kb-&gt;hyp_segs<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ptr &amp;&amp; ptr[0]<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ptr<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>eval</SensitiveFunction>
	<ReferableCheck>bound &gt;= beta<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>lwt[node] + rwt[node] &gt; 0.<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>kb-&gt;hyp_segs<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ptr &amp;&amp; ptr[0]<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ptr<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>fake_tracebacks</SensitiveFunction>
	<ReferableCheck>matassign[apos] &amp; (1 &lt;&lt; 0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>lwt[node] + rwt[node] &gt; 0.<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>kb-&gt;hyp_segs<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ptr &amp;&amp; ptr[0]<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ptr<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>fallbackSimpleSort</SensitiveFunction>
	<ReferableCheck>hi - lo &lt; 10<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>lwt[node] + rwt[node] &gt; 0.<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>kb-&gt;hyp_segs<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ptr &amp;&amp; ptr[0]<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ptr<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>fallbackSort</SensitiveFunction>
	<ReferableCheck>nblock &lt; 10000<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>lwt[node] + rwt[node] &gt; 0.<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>kb-&gt;hyp_segs<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ptr &amp;&amp; ptr[0]<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ptr<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>fclose</SensitiveFunction>
	<ReferableCheck>fgetc(file) != '.'<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>fp != stdin &amp;&amp; fp != stdout<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(stream)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(zStream)<Number>5</Number>
	</ReferableCheck>
	<ReferableCheck>ptr<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>fdopen</SensitiveFunction>
	<ReferableCheck>fh == -1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>fp != stdin &amp;&amp; fp != stdout<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(stream)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(zStream)<Number>5</Number>
	</ReferableCheck>
	<ReferableCheck>ptr<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>fe_build_melfilters</SensitiveFunction>
	<ReferableCheck>(FE-&gt;MEL_FB = (melfb_t *)calloc(1, sizeof(melfb_t))) == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>fp != stdin &amp;&amp; fp != stdout<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(stream)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(zStream)<Number>5</Number>
	</ReferableCheck>
	<ReferableCheck>ptr<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>fe_compute_melcosine</SensitiveFunction>
	<ReferableCheck>(FE-&gt;MEL_FB = (melfb_t *)calloc(1, sizeof(melfb_t))) == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>fp != stdin &amp;&amp; fp != stdout<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(stream)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(zStream)<Number>5</Number>
	</ReferableCheck>
	<ReferableCheck>ptr<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>fe_create_hamming</SensitiveFunction>
	<ReferableCheck>FE-&gt;OVERFLOW_SAMPS == ((void *)0) || FE-&gt;HAMMING_WINDOW == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>fp != stdin &amp;&amp; fp != stdout<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(stream)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(zStream)<Number>5</Number>
	</ReferableCheck>
	<ReferableCheck>ptr<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>fe_fft</SensitiveFunction>
	<ReferableCheck>data_len &gt; fftsize<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>fp != stdin &amp;&amp; fp != stdout<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(stream)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(zStream)<Number>5</Number>
	</ReferableCheck>
	<ReferableCheck>ptr<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>fe_frame_to_fea</SensitiveFunction>
	<ReferableCheck>(FE-&gt;NUM_OVERFLOW_SAMPS &gt; 0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>nsamps + FE-&gt;NUM_OVERFLOW_SAMPS &gt;= FE-&gt;FRAME_SIZE<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(stream)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(zStream)<Number>5</Number>
	</ReferableCheck>
	<ReferableCheck>ptr<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>fe_hamming_window</SensitiveFunction>
	<ReferableCheck>(spbuf = (double *)calloc(FE-&gt;FRAME_SIZE, sizeof(double))) == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>nsamps + FE-&gt;NUM_OVERFLOW_SAMPS &gt;= FE-&gt;FRAME_SIZE<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(stream)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(zStream)<Number>5</Number>
	</ReferableCheck>
	<ReferableCheck>ptr<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>fe_mel_cep</SensitiveFunction>
	<ReferableCheck>FE-&gt;FB_TYPE == 1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>nsamps + FE-&gt;NUM_OVERFLOW_SAMPS &gt;= FE-&gt;FRAME_SIZE<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(stream)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(zStream)<Number>5</Number>
	</ReferableCheck>
	<ReferableCheck>ptr<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>fe_mel_spec</SensitiveFunction>
	<ReferableCheck>FE-&gt;FB_TYPE == 1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>nsamps + FE-&gt;NUM_OVERFLOW_SAMPS &gt;= FE-&gt;FRAME_SIZE<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(stream)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(zStream)<Number>5</Number>
	</ReferableCheck>
	<ReferableCheck>ptr<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>fe_parse_general_params</SensitiveFunction>
	<ReferableCheck>FE == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>nsamps + FE-&gt;NUM_OVERFLOW_SAMPS &gt;= FE-&gt;FRAME_SIZE<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(stream)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(zStream)<Number>5</Number>
	</ReferableCheck>
	<ReferableCheck>ptr<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>fe_parse_melfb_params</SensitiveFunction>
	<ReferableCheck>(FE-&gt;MEL_FB = (melfb_t *)calloc(1, sizeof(melfb_t))) == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>nsamps + FE-&gt;NUM_OVERFLOW_SAMPS &gt;= FE-&gt;FRAME_SIZE<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(stream)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(zStream)<Number>5</Number>
	</ReferableCheck>
	<ReferableCheck>ptr<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>fe_pre_emphasis</SensitiveFunction>
	<ReferableCheck>FE-&gt;PRE_EMPHASIS_ALPHA != 0.<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>nsamps + FE-&gt;NUM_OVERFLOW_SAMPS &gt;= FE-&gt;FRAME_SIZE<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(stream)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(zStream)<Number>5</Number>
	</ReferableCheck>
	<ReferableCheck>ptr<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>fe_short_to_double</SensitiveFunction>
	<ReferableCheck>(spbuf = (double *)calloc(FE-&gt;FRAME_SIZE, sizeof(double))) == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(spbuf = (double *)calloc(spbuf_len, sizeof(double))) == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(stream)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(zStream)<Number>5</Number>
	</ReferableCheck>
	<ReferableCheck>ptr<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>feat_init</SensitiveFunction>
	<ReferableCheck>!feattype<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(spbuf = (double *)calloc(spbuf_len, sizeof(double))) == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(stream)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(zStream)<Number>5</Number>
	</ReferableCheck>
	<ReferableCheck>ptr<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>feat_s2mfc2feat_block</SensitiveFunction>
	<ReferableCheck>live_endutt<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(spbuf = (double *)calloc(spbuf_len, sizeof(double))) == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(stream)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(zStream)<Number>5</Number>
	</ReferableCheck>
	<ReferableCheck>ptr<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>feat_s2mfc_read</SensitiveFunction>
	<ReferableCheck>ef &lt; 0<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>(spbuf = (double *)calloc(spbuf_len, sizeof(double))) == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(stream)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(zStream)<Number>5</Number>
	</ReferableCheck>
	<ReferableCheck>ptr<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>feof</SensitiveFunction>
	<ReferableCheck>fread(V-&gt;seq, sizeof(char), (blen + 3) / 4, V-&gt;f) &lt; (size_t)((blen + 3) / 4)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>0 != SSIGetFilePosition(V-&gt;f, V-&gt;ssimode, &amp;(V-&gt;d_off))<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>feof(V-&gt;f)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>feof(hmmfp-&gt;f) || fgets(buffer, 512, hmmfp-&gt;f) == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>fgets(*buf, *n, fp) == ((void *)0)<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>ferror</SensitiveFunction>
	<ReferableCheck>bzf != ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(zStream)<Number>4</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(stream)<Number>5</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(bzf-&gt;handle)<Number>5</Number>
	</ReferableCheck>
	<ReferableCheck>fgets(*buf, *n, fp) == ((void *)0)<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>fflush</SensitiveFunction>
	<ReferableCheck>fp<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(zStream)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(stream)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(bzf-&gt;handle)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>fgets(*buf, *n, fp) == ((void *)0)<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>fgetc</SensitiveFunction>
	<ReferableCheck>fgetc(file) != '.'<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(zStream)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(stream)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(bzf-&gt;handle)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>fgets(*buf, *n, fp) == ((void *)0)<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>fgets</SensitiveFunction>
	<ReferableCheck>fgets(*buf, *n, fp) == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>fgets(line, sizeof (line), fp) == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>fp == ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>feof(hmmfp-&gt;f) || fgets(buffer, 512, hmmfp-&gt;f) == ((void *)0)<Number>7</Number>
	</ReferableCheck>
	<ReferableCheck>fgets(buffer, 512, fp) == ((void *)0)<Number>21</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>fillpen</SensitiveFunction>
	<ReferableCheck>dict_filler_word(((kbc)-&gt;dict), wid)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>fgets(line, sizeof (line), fp) == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>fp == ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>feof(hmmfp-&gt;f) || fgets(buffer, 512, hmmfp-&gt;f) == ((void *)0)<Number>7</Number>
	</ReferableCheck>
	<ReferableCheck>fgets(buffer, 512, fp) == ((void *)0)<Number>21</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>fillpen_init</SensitiveFunction>
	<ReferableCheck>(kb-&gt;lm = lm_read(lmfile, langwt, inspen, uw)) == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>fgets(line, sizeof (line), fp) == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>fp == ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>feof(hmmfp-&gt;f) || fgets(buffer, 512, hmmfp-&gt;f) == ((void *)0)<Number>7</Number>
	</ReferableCheck>
	<ReferableCheck>fgets(buffer, 512, fp) == ((void *)0)<Number>21</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>find_bg</SensitiveFunction>
	<ReferableCheck>n &gt; 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>((lw2) == ((s3lmwid_t)65535)) || (lw2 &gt;= lm-&gt;n_ug)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>fp == ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>feof(hmmfp-&gt;f) || fgets(buffer, 512, hmmfp-&gt;f) == ((void *)0)<Number>7</Number>
	</ReferableCheck>
	<ReferableCheck>fgets(buffer, 512, fp) == ((void *)0)<Number>21</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>find_ph_rc</SensitiveFunction>
	<ReferableCheck>((lcptr = find_ph_lc(m-&gt;wpos_ci_lclist[wpos][(int)ci], lc)) == ((void *)0)) || ((rcptr = find_ph_rc(lcptr-&gt;rclist, rc)) == ((void *)0))<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>((lw2) == ((s3lmwid_t)65535)) || (lw2 &gt;= lm-&gt;n_ug)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>fp == ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>feof(hmmfp-&gt;f) || fgets(buffer, 512, hmmfp-&gt;f) == ((void *)0)<Number>7</Number>
	</ReferableCheck>
	<ReferableCheck>fgets(buffer, 512, fp) == ((void *)0)<Number>21</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>find_tg</SensitiveFunction>
	<ReferableCheck>((lw3) == ((s3lmwid_t)65535)) || (lw3 &gt;= lm-&gt;n_ug)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>((lw2) == ((s3lmwid_t)65535)) || (lw2 &gt;= lm-&gt;n_ug)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>fp == ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>feof(hmmfp-&gt;f) || fgets(buffer, 512, hmmfp-&gt;f) == ((void *)0)<Number>7</Number>
	</ReferableCheck>
	<ReferableCheck>fgets(buffer, 512, fp) == ((void *)0)<Number>21</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>flush_RL</SensitiveFunction>
	<ReferableCheck>s-&gt;state == 1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>((lw2) == ((s3lmwid_t)65535)) || (lw2 &gt;= lm-&gt;n_ug)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>fp == ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>feof(hmmfp-&gt;f) || fgets(buffer, 512, hmmfp-&gt;f) == ((void *)0)<Number>7</Number>
	</ReferableCheck>
	<ReferableCheck>fgets(buffer, 512, fp) == ((void *)0)<Number>21</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>fopen</SensitiveFunction>
	<ReferableCheck>FileExists(g-&gt;stmpfile)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>FileExists(g-&gt;ptmpfile)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!mdeffile<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>fillerfile<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!dictfile<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>fopen_comp</SensitiveFunction>
	<ReferableCheck>*ispipe<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>FileExists(g-&gt;ptmpfile)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!mdeffile<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>fillerfile<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!dictfile<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>fprintf</SensitiveFunction>
	<ReferableCheck>k % 2 != 0 || N &lt; 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!((copyStart[ss] - 1 == copyEnd[ss]) || (copyStart[ss] == 0 &amp;&amp; copyEnd[ss] == nblock - 1))<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>nblock &lt; 10000<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>s-&gt;nblock &gt; 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>strlen(from) &gt; 1034 - 10<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>fputc</SensitiveFunction>
	<ReferableCheck>c == '\n' &amp;&amp; sgf_column == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>((outform) &gt; 100)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>nblock &lt; 10000<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>s-&gt;nblock &gt; 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>strlen(from) &gt; 1034 - 10<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>fread</SensitiveFunction>
	<ReferableCheck>(pkey = malloc(sizeof(char) * sfp-&gt;plen)) == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(bzf-&gt;handle)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(zStream)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(stream)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(int)g_read(gf-&gt;rank2rcv, sizeof(int32type), volume, gf-&gt;fp) != volume<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>fread_retry</SensitiveFunction>
	<ReferableCheck>fread_retry(&amp;n_float32, sizeof(int32), 1, fp) != 1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(bzf-&gt;handle)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(zStream)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(stream)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(int)g_read(gf-&gt;rank2rcv, sizeof(int32type), volume, gf-&gt;fp) != volume<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>free</SensitiveFunction>
	<ReferableCheck>prop == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>hmm-&gt;mat != ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>hmm-&gt;isc_mem != ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>hmm-&gt;msc_mem != ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>sfp-&gt;filename != ((void *)0)<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>fseek</SensitiveFunction>
	<ReferableCheck>!fread(f1, 32, 1, gsi-&gt;gsifp)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>!fread((char *)&amp;asize, sizeof(int), 1, fp)<Number>4</Number>
	</ReferableCheck>
	<ReferableCheck>hmm-&gt;isc_mem != ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>hmm-&gt;msc_mem != ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>sfp-&gt;filename != ((void *)0)<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>fwrite</SensitiveFunction>
	<ReferableCheck>!write_i32(fp, g-&gt;flen)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>strlen(fname) &gt;= 32<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>strlen(key) &gt;= 32<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>g_close</SensitiveFunction>
	<ReferableCheck>gf-&gt;fp != ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>strlen(fname) &gt;= 32<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>strlen(key) &gt;= 32<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>g_read</SensitiveFunction>
	<ReferableCheck>gf-&gt;rank2rcv == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>strlen(fname) &gt;= 32<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>strlen(key) &gt;= 32<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>g_write</SensitiveFunction>
	<ReferableCheck>g_seek(fp, offset, 0) &lt; 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>strlen(fname) &gt;= 32<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>strlen(key) &gt;= 32<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>gametreefuseki</SensitiveFunction>
	<ReferableCheck>i &gt;= moves_per_game<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>strlen(fname) &gt;= 32<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>strlen(key) &gt;= 32<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>generateMTFValues</SensitiveFunction>
	<ReferableCheck>s-&gt;nblock &gt; 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>strlen(fname) &gt;= 32<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>strlen(key) &gt;= 32<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>getLuma4x4Neighbour</SensitiveFunction>
	<ReferableCheck>mb_y == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>strlen(fname) &gt;= 32<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>strlen(key) &gt;= 32<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>getenv</SensitiveFunction>
	<ReferableCheck>env == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>strlen(fname) &gt;= 32<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>strlen(key) &gt;= 32<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>getfree</SensitiveFunction>
	<ReferableCheck>(in = fopen(net-&gt;inputfile, "r")) == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>strlen(fname) &gt;= 32<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>strlen(key) &gt;= 32<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>gg_snprintf</SensitiveFunction>
	<ReferableCheck>sgfGetIntProperty(node, "RE", &amp;dummy)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>strlen(fname) &gt;= 32<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>strlen(key) &gt;= 32<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>gki_upsize</SensitiveFunction>
	<ReferableCheck>hash-&gt;nkeys &gt; 3 * hash-&gt;nhash &amp;&amp; hash-&gt;primelevel &lt; 4 - 1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>strlen(fname) &gt;= 32<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>strlen(key) &gt;= 32<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>glist_add_int32</SensitiveFunction>
	<ReferableCheck>!glist_chkdup_int32(g, ssid)<Number>4</Number>
	</ReferableCheck>
	<ReferableCheck>strlen(fname) &gt;= 32<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>strlen(key) &gt;= 32<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>gs_fread_bitvec_t</SensitiveFunction>
	<ReferableCheck>(gs-&gt;fp = fopen(file, "rb")) == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>strlen(fname) &gt;= 32<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>strlen(key) &gt;= 32<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>gs_fread_float32</SensitiveFunction>
	<ReferableCheck>(gs-&gt;fp = fopen(file, "rb")) == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>strlen(fname) &gt;= 32<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>strlen(key) &gt;= 32<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>gs_fread_int32</SensitiveFunction>
	<ReferableCheck>(gs-&gt;fp = fopen(file, "rb")) == ((void *)0)<Number>5</Number>
	</ReferableCheck>
	<ReferableCheck>strlen(fname) &gt;= 32<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>strlen(key) &gt;= 32<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>gs_free</SensitiveFunction>
	<ReferableCheck>(gs-&gt;fp = fopen(file, "rb")) == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>strlen(fname) &gt;= 32<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>strlen(key) &gt;= 32<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>gs_mgau_shortlist</SensitiveFunction>
	<ReferableCheck>gs &amp;&amp; kb-&gt;gs4gs<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>strlen(fname) &gt;= 32<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>strlen(key) &gt;= 32<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>gs_read</SensitiveFunction>
	<ReferableCheck>gsfile<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>strlen(fname) &gt;= 32<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>strlen(key) &gt;= 32<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>handle_compress</SensitiveFunction>
	<ReferableCheck>strm == ((void *)0)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>strlen(fname) &gt;= 32<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>strlen(key) &gt;= 32<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>hash_enter</SensitiveFunction>
	<ReferableCheck>hash_lookup(d-&gt;pht, str, &amp;id) &lt; 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>d-&gt;n_word &gt;= d-&gt;max_words<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>strlen(key) &gt;= 32<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>hash_extract_pv</SensitiveFunction>
	<ReferableCheck>!level<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>d-&gt;n_word &gt;= d-&gt;max_words<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>strlen(key) &gt;= 32<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>hash_free</SensitiveFunction>
	<ReferableCheck>m-&gt;ciphone_ht<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>d-&gt;ht<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>d-&gt;pht<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>hash_lookup</SensitiveFunction>
	<ReferableCheck>d-&gt;n_word &gt;= d-&gt;max_words<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>d-&gt;ht<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>d-&gt;pht<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>hmm_dump</SensitiveFunction>
	<ReferableCheck>fp<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>d-&gt;ht<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>d-&gt;pht<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>hmm_dump_vit_eval</SensitiveFunction>
	<ReferableCheck>fp<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>d-&gt;ht<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>d-&gt;pht<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>indexfile_position</SensitiveFunction>
	<ReferableCheck>!read_i32(sfp-&gt;fp, &amp;(sfp-&gt;frecsize))<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>n &gt;= sfp-&gt;nprimary<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>d-&gt;pht<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>init_RL</SensitiveFunction>
	<ReferableCheck>s-&gt;state_in_ch &lt; 256<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>n &gt;= sfp-&gt;nprimary<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>d-&gt;pht<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>isempty_RL</SensitiveFunction>
	<ReferableCheck>s-&gt;state == 1<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>n &gt;= sfp-&gt;nprimary<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>d-&gt;pht<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>kb_freehyps</SensitiveFunction>
	<ReferableCheck>kb-&gt;sen_active<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>n &gt;= sfp-&gt;nprimary<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>d-&gt;pht<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>kb_lextree_active_swap</SensitiveFunction>
	<ReferableCheck>kb-&gt;cache_ci_senscr[f][i] &gt; kb-&gt;cache_best_list[f]<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>n &gt;= sfp-&gt;nprimary<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>d-&gt;pht<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>keycmp_case</SensitiveFunction>
	<ReferableCheck>entry-&gt;key == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>n &gt;= sfp-&gt;nprimary<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>d-&gt;pht<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>keycmp_nocase</SensitiveFunction>
	<ReferableCheck>entry-&gt;key == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>n &gt;= sfp-&gt;nprimary<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>d-&gt;pht<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>ks_congrad</SensitiveFunction>
	<ReferableCheck>src == temp<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>n &gt;= sfp-&gt;nprimary<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>d-&gt;pht<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>ldiph_comsseq</SensitiveFunction>
	<ReferableCheck>pronlen &lt; 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>n &gt;= sfp-&gt;nprimary<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>d-&gt;pht<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>left_su2_hit_n</SensitiveFunction>
	<ReferableCheck>vector_parity[j] == 3 || vector_parity[j] == parity<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>n &gt;= sfp-&gt;nprimary<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>d-&gt;pht<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>levrun_linfo_c2x2</SensitiveFunction>
	<ReferableCheck>level1 != level2 &amp;&amp; level1 != 0 &amp;&amp; level2 != 0<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>n &gt;= sfp-&gt;nprimary<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>d-&gt;pht<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>levrun_linfo_inter</SensitiveFunction>
	<ReferableCheck>level1 != level2 &amp;&amp; level1 != 0 &amp;&amp; level2 != 0<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>(level1 != level2) &amp;&amp; (level1 != 0) &amp;&amp; (level2 != 0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>d-&gt;pht<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>lextree_enter</SensitiveFunction>
	<ReferableCheck>vh-&gt;bestvh[cf] &lt; 0<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>(level1 != level2) &amp;&amp; (level1 != 0) &amp;&amp; (level2 != 0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>d-&gt;pht<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>lextree_hmm_eval</SensitiveFunction>
	<ReferableCheck>hmmdumpfp != ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(level1 != level2) &amp;&amp; (level1 != 0) &amp;&amp; (level2 != 0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>d-&gt;pht<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>lextree_hmm_propagate</SensitiveFunction>
	<ReferableCheck>besthmmscr &lt; lextree-&gt;best<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>(level1 != level2) &amp;&amp; (level1 != 0) &amp;&amp; (level2 != 0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>d-&gt;pht<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>lextree_node_alloc</SensitiveFunction>
	<ReferableCheck>ln-&gt;prob &lt; prob<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>(level1 != level2) &amp;&amp; (level1 != 0) &amp;&amp; (level2 != 0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>d-&gt;pht<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>lextree_node_print</SensitiveFunction>
	<ReferableCheck>fp<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(level1 != level2) &amp;&amp; (level1 != 0) &amp;&amp; (level2 != 0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>d-&gt;pht<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>lextree_utt_end</SensitiveFunction>
	<ReferableCheck>(id = vithist_utt_end(kb-&gt;vithist, kb-&gt;kbcore)) &gt;= 0<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>(level1 != level2) &amp;&amp; (level1 != 0) &amp;&amp; (level2 != 0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>d-&gt;pht<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>live_get_partialhyp</SensitiveFunction>
	<ReferableCheck>live_endutt<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(level1 != level2) &amp;&amp; (level1 != 0) &amp;&amp; (level2 != 0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>d-&gt;pht<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>lm_bg_score</SensitiveFunction>
	<ReferableCheck>((lw3) == ((s3lmwid_t)65535)) || (lw3 &gt;= lm-&gt;n_ug)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(lm-&gt;n_tg == 0) || (((lw1) == ((s3lmwid_t)65535)))<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>d-&gt;pht<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>lm_build_lmclass_info</SensitiveFunction>
	<ReferableCheck>n_lmclass_used &gt; 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(lm-&gt;n_tg == 0) || (((lw1) == ((s3lmwid_t)65535)))<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>d-&gt;pht<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>lm_get_classid</SensitiveFunction>
	<ReferableCheck>lm-&gt;inclass_ugscore<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(lm-&gt;n_tg == 0) || (((lw1) == ((s3lmwid_t)65535)))<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>d-&gt;pht<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>lm_read</SensitiveFunction>
	<ReferableCheck>lmfile &amp;&amp; lmctlfile<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(lm-&gt;n_tg == 0) || (((lw1) == ((s3lmwid_t)65535)))<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>d-&gt;pht<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>lm_read_ctl</SensitiveFunction>
	<ReferableCheck>(kb-&gt;lm = lm_read(lmfile, langwt, inspen, uw)) == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(lm-&gt;n_tg == 0) || (((lw1) == ((s3lmwid_t)65535)))<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>d-&gt;pht<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>lm_read_dump</SensitiveFunction>
	<ReferableCheck>(uw &lt; 0.) || (uw &gt; 1.)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(lm-&gt;n_tg == 0) || (((lw1) == ((s3lmwid_t)65535)))<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>d-&gt;pht<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>lm_tg_score</SensitiveFunction>
	<ReferableCheck>dict_filler_word(((kbc)-&gt;dict), wid)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(lm-&gt;n_tg == 0) || (((lw1) == ((s3lmwid_t)65535)))<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>d-&gt;pht<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>lm_ug_score</SensitiveFunction>
	<ReferableCheck>(lm-&gt;n_bg == 0) || (((lw1) == ((s3lmwid_t)65535)))<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(lm-&gt;n_tg == 0) || (((lw1) == ((s3lmwid_t)65535)))<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>d-&gt;pht<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>load_bg</SensitiveFunction>
	<ReferableCheck>!lm-&gt;membg[lw1].bg<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>((w1) == ((s3lmwid_t)65535)) || (w1 &gt;= lm-&gt;n_ug)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(lm-&gt;n_bg == 0) || (((lw1) == ((s3lmwid_t)65535)))<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>load_tg</SensitiveFunction>
	<ReferableCheck>((lw2) == ((s3lmwid_t)65535)) || (lw2 &gt;= lm-&gt;n_ug)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>((w1) == ((s3lmwid_t)65535)) || (w1 &gt;= lm-&gt;n_ug)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(lm-&gt;n_bg == 0) || (((lw1) == ((s3lmwid_t)65535)))<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>log</SensitiveFunction>
	<ReferableCheck>base &lt;= 1.<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>p &lt;= 0.<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>x &lt; 0.<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>log10</SensitiveFunction>
	<ReferableCheck>base &lt;= 1.<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>p &lt;= 0.<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>x &lt; 0.<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>logs3</SensitiveFunction>
	<ReferableCheck>wip &lt;= 0.<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>p &lt;= 0.<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>x &lt; 0.<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>mainQSort3</SensitiveFunction>
	<ReferableCheck>hi &gt; lo<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>p &lt;= 0.<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>x &lt; 0.<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>mainSimpleSort</SensitiveFunction>
	<ReferableCheck>hi - lo &lt; 20 || d &gt; (2 + 12)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>p &lt;= 0.<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>x &lt; 0.<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>mainSort</SensitiveFunction>
	<ReferableCheck>nblock &lt; 10000<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>p &lt;= 0.<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>x &lt; 0.<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>main_loop_serial</SensitiveFunction>
	<ReferableCheck>fixedlen<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>p &lt;= 0.<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>x &lt; 0.<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>makeMaps_d</SensitiveFunction>
	<ReferableCheck>s-&gt;state == 10<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>p &lt;= 0.<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>x &lt; 0.<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>make_alilist</SensitiveFunction>
	<ReferableCheck>!make_alilist(known1, known2, &amp;klist1, &amp;len1)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!make_alilist(calc1, calc2, &amp;tlist1, &amp;len1)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>x &lt; 0.<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>make_ref_alilist</SensitiveFunction>
	<ReferableCheck>!make_ref_alilist(ref, known1, known2, calc1, calc2, &amp;tlist1, &amp;len1)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>!make_alilist(calc1, calc2, &amp;tlist1, &amp;len1)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>x &lt; 0.<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>matassign2hmm</SensitiveFunction>
	<ReferableCheck>msa-&gt;rf == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!((msa-&gt;aseq[idx][i]) == ' ' || (msa-&gt;aseq[idx][i]) == '.' || (msa-&gt;aseq[idx][i]) == '_' || (msa-&gt;aseq[idx][i]) == '-' || (msa-&gt;aseq[idx][i]) == '~')<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>((msa-&gt;aseq[idx][apos]) == ' ' || (msa-&gt;aseq[idx][apos]) == '.' || (msa-&gt;aseq[idx][apos]) == '_' || (msa-&gt;aseq[idx][apos]) == '-' || (msa-&gt;aseq[idx][apos]) == '~')<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>match_write</SensitiveFunction>
	<ReferableCheck>(id = vithist_utt_end(kb-&gt;vithist, kb-&gt;kbcore)) &gt;= 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!((msa-&gt;aseq[idx][i]) == ' ' || (msa-&gt;aseq[idx][i]) == '.' || (msa-&gt;aseq[idx][i]) == '_' || (msa-&gt;aseq[idx][i]) == '-' || (msa-&gt;aseq[idx][i]) == '~')<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>((msa-&gt;aseq[idx][apos]) == ' ' || (msa-&gt;aseq[idx][apos]) == '.' || (msa-&gt;aseq[idx][apos]) == '_' || (msa-&gt;aseq[idx][apos]) == '-' || (msa-&gt;aseq[idx][apos]) == '~')<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>matchseg_write</SensitiveFunction>
	<ReferableCheck>(id = vithist_utt_end(kb-&gt;vithist, kb-&gt;kbcore)) &gt;= 0<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>!((msa-&gt;aseq[idx][i]) == ' ' || (msa-&gt;aseq[idx][i]) == '.' || (msa-&gt;aseq[idx][i]) == '_' || (msa-&gt;aseq[idx][i]) == '-' || (msa-&gt;aseq[idx][i]) == '~')<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>((msa-&gt;aseq[idx][apos]) == ' ' || (msa-&gt;aseq[idx][apos]) == '.' || (msa-&gt;aseq[idx][apos]) == '_' || (msa-&gt;aseq[idx][apos]) == '-' || (msa-&gt;aseq[idx][apos]) == '~')<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>mdef_ciphone_id</SensitiveFunction>
	<ReferableCheck>d-&gt;mdef<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!((msa-&gt;aseq[idx][i]) == ' ' || (msa-&gt;aseq[idx][i]) == '.' || (msa-&gt;aseq[idx][i]) == '_' || (msa-&gt;aseq[idx][i]) == '-' || (msa-&gt;aseq[idx][i]) == '~')<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>((msa-&gt;aseq[idx][apos]) == ' ' || (msa-&gt;aseq[idx][apos]) == '.' || (msa-&gt;aseq[idx][apos]) == '_' || (msa-&gt;aseq[idx][apos]) == '-' || (msa-&gt;aseq[idx][apos]) == '~')<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>mdef_ciphone_str</SensitiveFunction>
	<ReferableCheck>d-&gt;mdef<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>pid &lt; m-&gt;n_ciphone<Number>4</Number>
	</ReferableCheck>
	<ReferableCheck>((msa-&gt;aseq[idx][apos]) == ' ' || (msa-&gt;aseq[idx][apos]) == '.' || (msa-&gt;aseq[idx][apos]) == '_' || (msa-&gt;aseq[idx][apos]) == '-' || (msa-&gt;aseq[idx][apos]) == '~')<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>mdef_free_recursive_lc</SensitiveFunction>
	<ReferableCheck>lc-&gt;next<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>pid &lt; m-&gt;n_ciphone<Number>4</Number>
	</ReferableCheck>
	<ReferableCheck>((msa-&gt;aseq[idx][apos]) == ' ' || (msa-&gt;aseq[idx][apos]) == '.' || (msa-&gt;aseq[idx][apos]) == '_' || (msa-&gt;aseq[idx][apos]) == '-' || (msa-&gt;aseq[idx][apos]) == '~')<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>mdef_free_recursive_rc</SensitiveFunction>
	<ReferableCheck>lc-&gt;rclist<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>rc-&gt;next<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>((msa-&gt;aseq[idx][apos]) == ' ' || (msa-&gt;aseq[idx][apos]) == '.' || (msa-&gt;aseq[idx][apos]) == '_' || (msa-&gt;aseq[idx][apos]) == '-' || (msa-&gt;aseq[idx][apos]) == '~')<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>mdef_init</SensitiveFunction>
	<ReferableCheck>mdeffile<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>rc-&gt;next<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>((msa-&gt;aseq[idx][apos]) == ' ' || (msa-&gt;aseq[idx][apos]) == '.' || (msa-&gt;aseq[idx][apos]) == '_' || (msa-&gt;aseq[idx][apos]) == '-' || (msa-&gt;aseq[idx][apos]) == '~')<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, g-&gt;slen)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>mdef_phone_id</SensitiveFunction>
	<ReferableCheck>((lcptr = find_ph_lc(m-&gt;wpos_ci_lclist[wpos][(int)ci], lc)) == ((void *)0)) || ((rcptr = find_ph_rc(lcptr-&gt;rclist, rc)) == ((void *)0))<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(newl != l) || (newr != r)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>tmppos != pos<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(((l) &lt; 0)) || (((r) &lt; 0))<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>mdef_phone_str</SensitiveFunction>
	<ReferableCheck>p &gt;= m-&gt;n_ciphone<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(newl != l) || (newr != r)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>tmppos != pos<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(((l) &lt; 0)) || (((r) &lt; 0))<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>mdef_sseq2sen_active</SensitiveFunction>
	<ReferableCheck>kb-&gt;sen_active<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(newl != l) || (newr != r)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>tmppos != pos<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(((l) &lt; 0)) || (((r) &lt; 0))<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fwrite(fname, 1, 32, fp) &lt; 32<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>memcpy</SensitiveFunction>
	<ReferableCheck>lsrc &lt; 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(j = hash_enter_bkey(h, (char *)(m-&gt;sseq[p]), k, n_sseq)) == n_sseq<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>hash_enter(d-&gt;ht, wordp-&gt;word, d-&gt;n_word) != d-&gt;n_word<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>tmp &gt; spec_fd[num].len<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(tmp_spch = (int16 *)malloc(sizeof(int16) * (FE-&gt;NUM_OVERFLOW_SAMPS + nsamps))) == ((void *)0)<Number>3</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>memset</SensitiveFunction>
	<ReferableCheck>!pt<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>kb-&gt;sen_active<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>hash_enter(d-&gt;ht, wordp-&gt;word, d-&gt;n_word) != d-&gt;n_word<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>tmp &gt; spec_fd[num].len<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(tmp_spch = (int16 *)malloc(sizeof(int16) * (FE-&gt;NUM_OVERFLOW_SAMPS + nsamps))) == ((void *)0)<Number>3</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>mgau_eval</SensitiveFunction>
	<ReferableCheck>gs &amp;&amp; kb-&gt;gs4gs<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>kb-&gt;sen_active<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>hash_enter(d-&gt;ht, wordp-&gt;word, d-&gt;n_word) != d-&gt;n_word<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>tmp &gt; spec_fd[num].len<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(tmp_spch = (int16 *)malloc(sizeof(int16) * (FE-&gt;NUM_OVERFLOW_SAMPS + nsamps))) == ((void *)0)<Number>3</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>mgau_init</SensitiveFunction>
	<ReferableCheck>(!varfile) || (!mixwfile)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>kb-&gt;sen_active<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>hash_enter(d-&gt;ht, wordp-&gt;word, d-&gt;n_word) != d-&gt;n_word<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>tmp &gt; spec_fd[num].len<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(tmp_spch = (int16 *)malloc(sizeof(int16) * (FE-&gt;NUM_OVERFLOW_SAMPS + nsamps))) == ((void *)0)<Number>3</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>mgau_var_floor</SensitiveFunction>
	<ReferableCheck>varfloor &gt; 0.<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>kb-&gt;sen_active<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>hash_enter(d-&gt;ht, wordp-&gt;word, d-&gt;n_word) != d-&gt;n_word<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>tmp &gt; spec_fd[num].len<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(tmp_spch = (int16 *)malloc(sizeof(int16) * (FE-&gt;NUM_OVERFLOW_SAMPS + nsamps))) == ((void *)0)<Number>3</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>myfeof</SensitiveFunction>
	<ReferableCheck>ferror(stream)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(bzf-&gt;handle)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(zStream)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>tmp &gt; spec_fd[num].len<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(tmp_spch = (int16 *)malloc(sizeof(int16) * (FE-&gt;NUM_OVERFLOW_SAMPS + nsamps))) == ((void *)0)<Number>3</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>node_index</SensitiveFunction>
	<ReferableCheck>g_seek(fp, offset, 0) &lt; 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>this_node == 0<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(zStream)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>tmp &gt; spec_fd[num].len<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(tmp_spch = (int16 *)malloc(sizeof(int16) * (FE-&gt;NUM_OVERFLOW_SAMPS + nsamps))) == ((void *)0)<Number>3</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>node_number</SensitiveFunction>
	<ReferableCheck>g_seek(fp, offset, 0) &lt; 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>this_node == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(zStream)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>tmp &gt; spec_fd[num].len<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(tmp_spch = (int16 *)malloc(sizeof(int16) * (FE-&gt;NUM_OVERFLOW_SAMPS + nsamps))) == ((void *)0)<Number>3</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>parse_error</SensitiveFunction>
	<ReferableCheck>lookahead != expected<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>this_node == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(zStream)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>tmp &gt; spec_fd[num].len<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(tmp_spch = (int16 *)malloc(sizeof(int16) * (FE-&gt;NUM_OVERFLOW_SAMPS + nsamps))) == ((void *)0)<Number>3</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>parse_pkey_info</SensitiveFunction>
	<ReferableCheck>g-&gt;smode == 1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>this_node == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(zStream)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>tmp &gt; spec_fd[num].len<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(tmp_spch = (int16 *)malloc(sizeof(int16) * (FE-&gt;NUM_OVERFLOW_SAMPS + nsamps))) == ((void *)0)<Number>3</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>parse_tmat_senmap</SensitiveFunction>
	<ReferableCheck>sscanf(lp, "%s%n", word, &amp;wlen) != 1<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>this_node == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(zStream)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>tmp &gt; spec_fd[num].len<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(tmp_spch = (int16 *)malloc(sizeof(int16) * (FE-&gt;NUM_OVERFLOW_SAMPS + nsamps))) == ((void *)0)<Number>3</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>popen</SensitiveFunction>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(mode) &amp;&amp; __builtin_constant_p("r") &amp;&amp; (__s1_len = __builtin_strlen(mode) , __s2_len = __builtin_strlen("r") , (!((size_t)(const void *)((mode) + 1) - (size_t)(const void *)(mode) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("r") + 1) - (size_t)(const void *)("r") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(mode, "r") : (__builtin_constant_p(mode) &amp;&amp; ((size_t)(const void *)((mode) + 1) - (size_t)(const void *)(mode) == 1) &amp;&amp; (__s1_len = __builtin_strlen(mode) , __s1_len &lt; 4) ? (__builtin_constant_p("r") &amp;&amp; ((size_t)(const void *)(("r") + 1) - (size_t)(const void *)("r") == 1) ? __builtin_strcmp(mode, "r") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("r");
        int __result = (((const unsigned char *)(const char *)(mode))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(mode))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(mode))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(mode))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("r") &amp;&amp; ((size_t)(const void *)(("r") + 1) - (size_t)(const void *)("r") == 1) &amp;&amp; (__s2_len = __builtin_strlen("r") , __s2_len &lt; 4) ? (__builtin_constant_p(mode) &amp;&amp; ((size_t)(const void *)((mode) + 1) - (size_t)(const void *)(mode) == 1) ? __builtin_strcmp(mode, "r") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(mode);
        int __result = (((const unsigned char *)(const char *)("r"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("r"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("r"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("r"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(mode, "r"))));
}) == 0<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>this_node == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(zStream)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>tmp &gt; spec_fd[num].len<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(tmp_spch = (int16 *)malloc(sizeof(int16) * (FE-&gt;NUM_OVERFLOW_SAMPS + nsamps))) == ((void *)0)<Number>3</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>post_fail_thinking</SensitiveFunction>
	<ReferableCheck>root_score &gt;= beta<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>this_node == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(zStream)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>tmp &gt; spec_fd[num].len<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(tmp_spch = (int16 *)malloc(sizeof(int16) * (FE-&gt;NUM_OVERFLOW_SAMPS + nsamps))) == ((void *)0)<Number>3</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>post_fh_thinking</SensitiveFunction>
	<ReferableCheck>root_score &gt;= beta<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>this_node == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(zStream)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>tmp &gt; spec_fd[num].len<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(tmp_spch = (int16 *)malloc(sizeof(int16) * (FE-&gt;NUM_OVERFLOW_SAMPS + nsamps))) == ((void *)0)<Number>3</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>post_fl_thinking</SensitiveFunction>
	<ReferableCheck>root_score &gt;= beta<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>this_node == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(zStream)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>tmp &gt; spec_fd[num].len<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(tmp_spch = (int16 *)malloc(sizeof(int16) * (FE-&gt;NUM_OVERFLOW_SAMPS + nsamps))) == ((void *)0)<Number>3</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>post_thinking</SensitiveFunction>
	<ReferableCheck>root_score &lt;= alpha<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>root_score &gt;= beta<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(zStream)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>tmp &gt; spec_fd[num].len<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(tmp_spch = (int16 *)malloc(sizeof(int16) * (FE-&gt;NUM_OVERFLOW_SAMPS + nsamps))) == ((void *)0)<Number>3</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>pow</SensitiveFunction>
	<ReferableCheck>V &gt; 1.<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>d &lt; add_tbl_size<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(zStream)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>tmp &gt; spec_fd[num].len<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(tmp_spch = (int16 *)malloc(sizeof(int16) * (FE-&gt;NUM_OVERFLOW_SAMPS + nsamps))) == ((void *)0)<Number>3</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>prepare_new_block</SensitiveFunction>
	<ReferableCheck>s-&gt;state == 1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>d &lt; add_tbl_size<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ferror(zStream)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>tmp &gt; spec_fd[num].len<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(tmp_spch = (int16 *)malloc(sizeof(int16) * (FE-&gt;NUM_OVERFLOW_SAMPS + nsamps))) == ((void *)0)<Number>3</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>printf</SensitiveFunction>
	<ReferableCheck>strlen(gauge_info_keyword[i]) == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>tmp &gt; spec_fd[num].len<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>mode[0] == 'a'<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(fd = open(filename, oflg, 420)) == -1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>deviation &gt; (1.0E-4)<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>psread_byteorder</SensitiveFunction>
	<ReferableCheck>psread_byteorder(gf-&gt;byterevflag, parallel, gf-&gt;fp, &amp;gf-&gt;check.sum29, sizeof (gf-&gt;check.sum29), myname, "checksum") != 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>psread_byteorder(*byterevflag, parallel, fp, gh-&gt;dims, sizeof (gh-&gt;dims), myname, "dimensions") != 0<Number>5</Number>
	</ReferableCheck>
	<ReferableCheck>psread_data(parallel, fp, &amp;gh-&gt;magic_number, sizeof (gh-&gt;magic_number), myname, "magic number") != 0<Number>6</Number>
	</ReferableCheck>
	<ReferableCheck>(fd = open(filename, oflg, 420)) == -1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>deviation &gt; (1.0E-4)<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>psread_data</SensitiveFunction>
	<ReferableCheck>psread_data(parallel, fp, &amp;gh-&gt;magic_number, sizeof (gh-&gt;magic_number), myname, "magic number") != 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>psread_byteorder(*byterevflag, parallel, fp, gh-&gt;dims, sizeof (gh-&gt;dims), myname, "dimensions") != 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>psread_data(parallel, fp, &amp;gh-&gt;magic_number, sizeof (gh-&gt;magic_number), myname, "magic number") != 0<Number>6</Number>
	</ReferableCheck>
	<ReferableCheck>(fd = open(filename, oflg, 420)) == -1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>deviation &gt; (1.0E-4)<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>qsort</SensitiveFunction>
	<ReferableCheck>h-&gt;num == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>psread_byteorder(*byterevflag, parallel, fp, gh-&gt;dims, sizeof (gh-&gt;dims), myname, "dimensions") != 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>psread_data(parallel, fp, &amp;gh-&gt;magic_number, sizeof (gh-&gt;magic_number), myname, "magic number") != 0<Number>6</Number>
	</ReferableCheck>
	<ReferableCheck>(fd = open(filename, oflg, 420)) == -1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>deviation &gt; (1.0E-4)<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>qst</SensitiveFunction>
	<ReferableCheck>(*qcmp)(j, (tmp = max - qsz)) &gt; 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(lo = j - base) &lt;= (hi = max - i)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>psread_data(parallel, fp, &amp;gh-&gt;magic_number, sizeof (gh-&gt;magic_number), myname, "magic number") != 0<Number>6</Number>
	</ReferableCheck>
	<ReferableCheck>(fd = open(filename, oflg, 420)) == -1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>deviation &gt; (1.0E-4)<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>rdiph_comsseq</SensitiveFunction>
	<ReferableCheck>pronlen &lt; 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(lo = j - base) &lt;= (hi = max - i)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>psread_data(parallel, fp, &amp;gh-&gt;magic_number, sizeof (gh-&gt;magic_number), myname, "magic number") != 0<Number>6</Number>
	</ReferableCheck>
	<ReferableCheck>(fd = open(filename, oflg, 420)) == -1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>deviation &gt; (1.0E-4)<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>read</SensitiveFunction>
	<ReferableCheck>fd &lt; 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(lo = j - base) &lt;= (hi = max - i)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>psread_data(parallel, fp, &amp;gh-&gt;magic_number, sizeof (gh-&gt;magic_number), myname, "magic number") != 0<Number>6</Number>
	</ReferableCheck>
	<ReferableCheck>(fd = open(filename, oflg, 420)) == -1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>deviation &gt; (1.0E-4)<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>readEMBL</SensitiveFunction>
	<ReferableCheck>((V-&gt;format) &gt; 100)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(lo = j - base) &lt;= (hi = max - i)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>psread_data(parallel, fp, &amp;gh-&gt;magic_number, sizeof (gh-&gt;magic_number), myname, "magic number") != 0<Number>6</Number>
	</ReferableCheck>
	<ReferableCheck>(fd = open(filename, oflg, 420)) == -1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>deviation &gt; (1.0E-4)<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>readGCGdata</SensitiveFunction>
	<ReferableCheck>((V-&gt;format) &gt; 100)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(lo = j - base) &lt;= (hi = max - i)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>psread_data(parallel, fp, &amp;gh-&gt;magic_number, sizeof (gh-&gt;magic_number), myname, "magic number") != 0<Number>6</Number>
	</ReferableCheck>
	<ReferableCheck>(fd = open(filename, oflg, 420)) == -1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>deviation &gt; (1.0E-4)<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>readGenBank</SensitiveFunction>
	<ReferableCheck>((V-&gt;format) &gt; 100)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(lo = j - base) &lt;= (hi = max - i)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>psread_data(parallel, fp, &amp;gh-&gt;magic_number, sizeof (gh-&gt;magic_number), myname, "magic number") != 0<Number>6</Number>
	</ReferableCheck>
	<ReferableCheck>(fd = open(filename, oflg, 420)) == -1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>deviation &gt; (1.0E-4)<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>readIG</SensitiveFunction>
	<ReferableCheck>((V-&gt;format) &gt; 100)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(lo = j - base) &lt;= (hi = max - i)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>psread_data(parallel, fp, &amp;gh-&gt;magic_number, sizeof (gh-&gt;magic_number), myname, "magic number") != 0<Number>6</Number>
	</ReferableCheck>
	<ReferableCheck>(fd = open(filename, oflg, 420)) == -1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>deviation &gt; (1.0E-4)<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>readLoop</SensitiveFunction>
	<ReferableCheck>(sptr = strtok(V-&gt;buf + 6, " \t\n")) != ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>Strparse("&gt;&gt;&gt;&gt;([^ ]+) .+2BIT +Len: ([0-9]+)", V-&gt;buf, 2)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(__extension__ (__builtin_constant_p(14) &amp;&amp; ((__builtin_constant_p(V-&gt;buf) &amp;&amp; strlen(V-&gt;buf) &lt; ((size_t)(14))) || (__builtin_constant_p("; DNA sequence") &amp;&amp; strlen("; DNA sequence") &lt; ((size_t)(14)))) ? __extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(V-&gt;buf) &amp;&amp; __builtin_constant_p("; DNA sequence") &amp;&amp; (__s1_len = __builtin_strlen(V-&gt;buf) , __s2_len = __builtin_strlen("; DNA sequence") , (!((size_t)(const void *)((V-&gt;buf) + 1) - (size_t)(const void *)(V-&gt;buf) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("; DNA sequence") + 1) - (size_t)(const void *)("; DNA sequence") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(V-&gt;buf, "; DNA sequence") : (__builtin_constant_p(V-&gt;buf) &amp;&amp; ((size_t)(const void *)((V-&gt;buf) + 1) - (size_t)(const void *)(V-&gt;buf) == 1) &amp;&amp; (__s1_len = __builtin_strlen(V-&gt;buf) , __s1_len &lt; 4) ? (__builtin_constant_p("; DNA sequence") &amp;&amp; ((size_t)(const void *)(("; DNA sequence") + 1) - (size_t)(const void *)("; DNA sequence") == 1) ? __builtin_strcmp(V-&gt;buf, "; DNA sequence") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("; DNA sequence");
        int __result = (((const unsigned char *)(const char *)(V-&gt;buf))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(V-&gt;buf))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(V-&gt;buf))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(V-&gt;buf))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("; DNA sequence") &amp;&amp; ((size_t)(const void *)(("; DNA sequence") + 1) - (size_t)(const void *)("; DNA sequence") == 1) &amp;&amp; (__s2_len = __builtin_strlen("; DNA sequence") , __s2_len &lt; 4) ? (__builtin_constant_p(V-&gt;buf) &amp;&amp; ((size_t)(const void *)((V-&gt;buf) + 1) - (size_t)(const void *)(V-&gt;buf) == 1) ? __builtin_strcmp(V-&gt;buf, "; DNA sequence") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(V-&gt;buf);
        int __result = (((const unsigned char *)(const char *)("; DNA sequence"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("; DNA sequence"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("; DNA sequence"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("; DNA sequence"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(V-&gt;buf, "; DNA sequence"))));
}) : strncmp(V-&gt;buf, "; DNA sequence", 14))) == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!feof(V-&gt;f)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>readPIR</SensitiveFunction>
	<ReferableCheck>((V-&gt;format) &gt; 100)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>Strparse("&gt;&gt;&gt;&gt;([^ ]+) .+2BIT +Len: ([0-9]+)", V-&gt;buf, 2)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(__extension__ (__builtin_constant_p(14) &amp;&amp; ((__builtin_constant_p(V-&gt;buf) &amp;&amp; strlen(V-&gt;buf) &lt; ((size_t)(14))) || (__builtin_constant_p("; DNA sequence") &amp;&amp; strlen("; DNA sequence") &lt; ((size_t)(14)))) ? __extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(V-&gt;buf) &amp;&amp; __builtin_constant_p("; DNA sequence") &amp;&amp; (__s1_len = __builtin_strlen(V-&gt;buf) , __s2_len = __builtin_strlen("; DNA sequence") , (!((size_t)(const void *)((V-&gt;buf) + 1) - (size_t)(const void *)(V-&gt;buf) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("; DNA sequence") + 1) - (size_t)(const void *)("; DNA sequence") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(V-&gt;buf, "; DNA sequence") : (__builtin_constant_p(V-&gt;buf) &amp;&amp; ((size_t)(const void *)((V-&gt;buf) + 1) - (size_t)(const void *)(V-&gt;buf) == 1) &amp;&amp; (__s1_len = __builtin_strlen(V-&gt;buf) , __s1_len &lt; 4) ? (__builtin_constant_p("; DNA sequence") &amp;&amp; ((size_t)(const void *)(("; DNA sequence") + 1) - (size_t)(const void *)("; DNA sequence") == 1) ? __builtin_strcmp(V-&gt;buf, "; DNA sequence") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("; DNA sequence");
        int __result = (((const unsigned char *)(const char *)(V-&gt;buf))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(V-&gt;buf))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(V-&gt;buf))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(V-&gt;buf))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("; DNA sequence") &amp;&amp; ((size_t)(const void *)(("; DNA sequence") + 1) - (size_t)(const void *)("; DNA sequence") == 1) &amp;&amp; (__s2_len = __builtin_strlen("; DNA sequence") , __s2_len &lt; 4) ? (__builtin_constant_p(V-&gt;buf) &amp;&amp; ((size_t)(const void *)((V-&gt;buf) + 1) - (size_t)(const void *)(V-&gt;buf) == 1) ? __builtin_strcmp(V-&gt;buf, "; DNA sequence") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(V-&gt;buf);
        int __result = (((const unsigned char *)(const char *)("; DNA sequence"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("; DNA sequence"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("; DNA sequence"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("; DNA sequence"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(V-&gt;buf, "; DNA sequence"))));
}) : strncmp(V-&gt;buf, "; DNA sequence", 14))) == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!feof(V-&gt;f)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>readPearson</SensitiveFunction>
	<ReferableCheck>((V-&gt;format) &gt; 100)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>Strparse("&gt;&gt;&gt;&gt;([^ ]+) .+2BIT +Len: ([0-9]+)", V-&gt;buf, 2)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(__extension__ (__builtin_constant_p(14) &amp;&amp; ((__builtin_constant_p(V-&gt;buf) &amp;&amp; strlen(V-&gt;buf) &lt; ((size_t)(14))) || (__builtin_constant_p("; DNA sequence") &amp;&amp; strlen("; DNA sequence") &lt; ((size_t)(14)))) ? __extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(V-&gt;buf) &amp;&amp; __builtin_constant_p("; DNA sequence") &amp;&amp; (__s1_len = __builtin_strlen(V-&gt;buf) , __s2_len = __builtin_strlen("; DNA sequence") , (!((size_t)(const void *)((V-&gt;buf) + 1) - (size_t)(const void *)(V-&gt;buf) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("; DNA sequence") + 1) - (size_t)(const void *)("; DNA sequence") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(V-&gt;buf, "; DNA sequence") : (__builtin_constant_p(V-&gt;buf) &amp;&amp; ((size_t)(const void *)((V-&gt;buf) + 1) - (size_t)(const void *)(V-&gt;buf) == 1) &amp;&amp; (__s1_len = __builtin_strlen(V-&gt;buf) , __s1_len &lt; 4) ? (__builtin_constant_p("; DNA sequence") &amp;&amp; ((size_t)(const void *)(("; DNA sequence") + 1) - (size_t)(const void *)("; DNA sequence") == 1) ? __builtin_strcmp(V-&gt;buf, "; DNA sequence") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("; DNA sequence");
        int __result = (((const unsigned char *)(const char *)(V-&gt;buf))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(V-&gt;buf))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(V-&gt;buf))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(V-&gt;buf))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("; DNA sequence") &amp;&amp; ((size_t)(const void *)(("; DNA sequence") + 1) - (size_t)(const void *)("; DNA sequence") == 1) &amp;&amp; (__s2_len = __builtin_strlen("; DNA sequence") , __s2_len &lt; 4) ? (__builtin_constant_p(V-&gt;buf) &amp;&amp; ((size_t)(const void *)((V-&gt;buf) + 1) - (size_t)(const void *)(V-&gt;buf) == 1) ? __builtin_strcmp(V-&gt;buf, "; DNA sequence") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(V-&gt;buf);
        int __result = (((const unsigned char *)(const char *)("; DNA sequence"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("; DNA sequence"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("; DNA sequence"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("; DNA sequence"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(V-&gt;buf, "; DNA sequence"))));
}) : strncmp(V-&gt;buf, "; DNA sequence", 14))) == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!feof(V-&gt;f)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>readStrider</SensitiveFunction>
	<ReferableCheck>((V-&gt;format) &gt; 100)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>Strparse("&gt;&gt;&gt;&gt;([^ ]+) .+2BIT +Len: ([0-9]+)", V-&gt;buf, 2)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(__extension__ (__builtin_constant_p(14) &amp;&amp; ((__builtin_constant_p(V-&gt;buf) &amp;&amp; strlen(V-&gt;buf) &lt; ((size_t)(14))) || (__builtin_constant_p("; DNA sequence") &amp;&amp; strlen("; DNA sequence") &lt; ((size_t)(14)))) ? __extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(V-&gt;buf) &amp;&amp; __builtin_constant_p("; DNA sequence") &amp;&amp; (__s1_len = __builtin_strlen(V-&gt;buf) , __s2_len = __builtin_strlen("; DNA sequence") , (!((size_t)(const void *)((V-&gt;buf) + 1) - (size_t)(const void *)(V-&gt;buf) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("; DNA sequence") + 1) - (size_t)(const void *)("; DNA sequence") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(V-&gt;buf, "; DNA sequence") : (__builtin_constant_p(V-&gt;buf) &amp;&amp; ((size_t)(const void *)((V-&gt;buf) + 1) - (size_t)(const void *)(V-&gt;buf) == 1) &amp;&amp; (__s1_len = __builtin_strlen(V-&gt;buf) , __s1_len &lt; 4) ? (__builtin_constant_p("; DNA sequence") &amp;&amp; ((size_t)(const void *)(("; DNA sequence") + 1) - (size_t)(const void *)("; DNA sequence") == 1) ? __builtin_strcmp(V-&gt;buf, "; DNA sequence") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("; DNA sequence");
        int __result = (((const unsigned char *)(const char *)(V-&gt;buf))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(V-&gt;buf))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(V-&gt;buf))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(V-&gt;buf))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("; DNA sequence") &amp;&amp; ((size_t)(const void *)(("; DNA sequence") + 1) - (size_t)(const void *)("; DNA sequence") == 1) &amp;&amp; (__s2_len = __builtin_strlen("; DNA sequence") , __s2_len &lt; 4) ? (__builtin_constant_p(V-&gt;buf) &amp;&amp; ((size_t)(const void *)((V-&gt;buf) + 1) - (size_t)(const void *)(V-&gt;buf) == 1) ? __builtin_strcmp(V-&gt;buf, "; DNA sequence") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(V-&gt;buf);
        int __result = (((const unsigned char *)(const char *)("; DNA sequence"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("; DNA sequence"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("; DNA sequence"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("; DNA sequence"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(V-&gt;buf, "; DNA sequence"))));
}) : strncmp(V-&gt;buf, "; DNA sequence", 14))) == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!feof(V-&gt;f)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>readUWGCG</SensitiveFunction>
	<ReferableCheck>((V-&gt;format) &gt; 100)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>Strparse("&gt;&gt;&gt;&gt;([^ ]+) .+2BIT +Len: ([0-9]+)", V-&gt;buf, 2)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(__extension__ (__builtin_constant_p(14) &amp;&amp; ((__builtin_constant_p(V-&gt;buf) &amp;&amp; strlen(V-&gt;buf) &lt; ((size_t)(14))) || (__builtin_constant_p("; DNA sequence") &amp;&amp; strlen("; DNA sequence") &lt; ((size_t)(14)))) ? __extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(V-&gt;buf) &amp;&amp; __builtin_constant_p("; DNA sequence") &amp;&amp; (__s1_len = __builtin_strlen(V-&gt;buf) , __s2_len = __builtin_strlen("; DNA sequence") , (!((size_t)(const void *)((V-&gt;buf) + 1) - (size_t)(const void *)(V-&gt;buf) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("; DNA sequence") + 1) - (size_t)(const void *)("; DNA sequence") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(V-&gt;buf, "; DNA sequence") : (__builtin_constant_p(V-&gt;buf) &amp;&amp; ((size_t)(const void *)((V-&gt;buf) + 1) - (size_t)(const void *)(V-&gt;buf) == 1) &amp;&amp; (__s1_len = __builtin_strlen(V-&gt;buf) , __s1_len &lt; 4) ? (__builtin_constant_p("; DNA sequence") &amp;&amp; ((size_t)(const void *)(("; DNA sequence") + 1) - (size_t)(const void *)("; DNA sequence") == 1) ? __builtin_strcmp(V-&gt;buf, "; DNA sequence") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("; DNA sequence");
        int __result = (((const unsigned char *)(const char *)(V-&gt;buf))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(V-&gt;buf))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(V-&gt;buf))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(V-&gt;buf))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("; DNA sequence") &amp;&amp; ((size_t)(const void *)(("; DNA sequence") + 1) - (size_t)(const void *)("; DNA sequence") == 1) &amp;&amp; (__s2_len = __builtin_strlen("; DNA sequence") , __s2_len &lt; 4) ? (__builtin_constant_p(V-&gt;buf) &amp;&amp; ((size_t)(const void *)((V-&gt;buf) + 1) - (size_t)(const void *)(V-&gt;buf) == 1) ? __builtin_strcmp(V-&gt;buf, "; DNA sequence") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(V-&gt;buf);
        int __result = (((const unsigned char *)(const char *)("; DNA sequence"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("; DNA sequence"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("; DNA sequence"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("; DNA sequence"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(V-&gt;buf, "; DNA sequence"))));
}) : strncmp(V-&gt;buf, "; DNA sequence", 14))) == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!feof(V-&gt;f)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>readZuker</SensitiveFunction>
	<ReferableCheck>((V-&gt;format) &gt; 100)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>Strparse("&gt;&gt;&gt;&gt;([^ ]+) .+2BIT +Len: ([0-9]+)", V-&gt;buf, 2)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(__extension__ (__builtin_constant_p(14) &amp;&amp; ((__builtin_constant_p(V-&gt;buf) &amp;&amp; strlen(V-&gt;buf) &lt; ((size_t)(14))) || (__builtin_constant_p("; DNA sequence") &amp;&amp; strlen("; DNA sequence") &lt; ((size_t)(14)))) ? __extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(V-&gt;buf) &amp;&amp; __builtin_constant_p("; DNA sequence") &amp;&amp; (__s1_len = __builtin_strlen(V-&gt;buf) , __s2_len = __builtin_strlen("; DNA sequence") , (!((size_t)(const void *)((V-&gt;buf) + 1) - (size_t)(const void *)(V-&gt;buf) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("; DNA sequence") + 1) - (size_t)(const void *)("; DNA sequence") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(V-&gt;buf, "; DNA sequence") : (__builtin_constant_p(V-&gt;buf) &amp;&amp; ((size_t)(const void *)((V-&gt;buf) + 1) - (size_t)(const void *)(V-&gt;buf) == 1) &amp;&amp; (__s1_len = __builtin_strlen(V-&gt;buf) , __s1_len &lt; 4) ? (__builtin_constant_p("; DNA sequence") &amp;&amp; ((size_t)(const void *)(("; DNA sequence") + 1) - (size_t)(const void *)("; DNA sequence") == 1) ? __builtin_strcmp(V-&gt;buf, "; DNA sequence") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("; DNA sequence");
        int __result = (((const unsigned char *)(const char *)(V-&gt;buf))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(V-&gt;buf))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(V-&gt;buf))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(V-&gt;buf))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("; DNA sequence") &amp;&amp; ((size_t)(const void *)(("; DNA sequence") + 1) - (size_t)(const void *)("; DNA sequence") == 1) &amp;&amp; (__s2_len = __builtin_strlen("; DNA sequence") , __s2_len &lt; 4) ? (__builtin_constant_p(V-&gt;buf) &amp;&amp; ((size_t)(const void *)((V-&gt;buf) + 1) - (size_t)(const void *)(V-&gt;buf) == 1) ? __builtin_strcmp(V-&gt;buf, "; DNA sequence") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(V-&gt;buf);
        int __result = (((const unsigned char *)(const char *)("; DNA sequence"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("; DNA sequence"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("; DNA sequence"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("; DNA sequence"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(V-&gt;buf, "; DNA sequence"))));
}) : strncmp(V-&gt;buf, "; DNA sequence", 14))) == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!feof(V-&gt;f)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>read_1996_gauge_hdr</SensitiveFunction>
	<ReferableCheck>psread_data(parallel, fp, &amp;gh-&gt;magic_number, sizeof (gh-&gt;magic_number), myname, "magic number") != 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>Strparse("&gt;&gt;&gt;&gt;([^ ]+) .+2BIT +Len: ([0-9]+)", V-&gt;buf, 2)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(__extension__ (__builtin_constant_p(14) &amp;&amp; ((__builtin_constant_p(V-&gt;buf) &amp;&amp; strlen(V-&gt;buf) &lt; ((size_t)(14))) || (__builtin_constant_p("; DNA sequence") &amp;&amp; strlen("; DNA sequence") &lt; ((size_t)(14)))) ? __extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(V-&gt;buf) &amp;&amp; __builtin_constant_p("; DNA sequence") &amp;&amp; (__s1_len = __builtin_strlen(V-&gt;buf) , __s2_len = __builtin_strlen("; DNA sequence") , (!((size_t)(const void *)((V-&gt;buf) + 1) - (size_t)(const void *)(V-&gt;buf) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("; DNA sequence") + 1) - (size_t)(const void *)("; DNA sequence") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(V-&gt;buf, "; DNA sequence") : (__builtin_constant_p(V-&gt;buf) &amp;&amp; ((size_t)(const void *)((V-&gt;buf) + 1) - (size_t)(const void *)(V-&gt;buf) == 1) &amp;&amp; (__s1_len = __builtin_strlen(V-&gt;buf) , __s1_len &lt; 4) ? (__builtin_constant_p("; DNA sequence") &amp;&amp; ((size_t)(const void *)(("; DNA sequence") + 1) - (size_t)(const void *)("; DNA sequence") == 1) ? __builtin_strcmp(V-&gt;buf, "; DNA sequence") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("; DNA sequence");
        int __result = (((const unsigned char *)(const char *)(V-&gt;buf))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(V-&gt;buf))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(V-&gt;buf))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(V-&gt;buf))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("; DNA sequence") &amp;&amp; ((size_t)(const void *)(("; DNA sequence") + 1) - (size_t)(const void *)("; DNA sequence") == 1) &amp;&amp; (__s2_len = __builtin_strlen("; DNA sequence") , __s2_len &lt; 4) ? (__builtin_constant_p(V-&gt;buf) &amp;&amp; ((size_t)(const void *)((V-&gt;buf) + 1) - (size_t)(const void *)(V-&gt;buf) == 1) ? __builtin_strcmp(V-&gt;buf, "; DNA sequence") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(V-&gt;buf);
        int __result = (((const unsigned char *)(const char *)("; DNA sequence"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("; DNA sequence"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("; DNA sequence"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("; DNA sequence"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(V-&gt;buf, "; DNA sequence"))));
}) : strncmp(V-&gt;buf, "; DNA sequence", 14))) == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!feof(V-&gt;f)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>read_bin_string</SensitiveFunction>
	<ReferableCheck>hmmfp-&gt;byteswap<Number>5</Number>
	</ReferableCheck>
	<ReferableCheck>Strparse("&gt;&gt;&gt;&gt;([^ ]+) .+2BIT +Len: ([0-9]+)", V-&gt;buf, 2)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(__extension__ (__builtin_constant_p(14) &amp;&amp; ((__builtin_constant_p(V-&gt;buf) &amp;&amp; strlen(V-&gt;buf) &lt; ((size_t)(14))) || (__builtin_constant_p("; DNA sequence") &amp;&amp; strlen("; DNA sequence") &lt; ((size_t)(14)))) ? __extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(V-&gt;buf) &amp;&amp; __builtin_constant_p("; DNA sequence") &amp;&amp; (__s1_len = __builtin_strlen(V-&gt;buf) , __s2_len = __builtin_strlen("; DNA sequence") , (!((size_t)(const void *)((V-&gt;buf) + 1) - (size_t)(const void *)(V-&gt;buf) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("; DNA sequence") + 1) - (size_t)(const void *)("; DNA sequence") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(V-&gt;buf, "; DNA sequence") : (__builtin_constant_p(V-&gt;buf) &amp;&amp; ((size_t)(const void *)((V-&gt;buf) + 1) - (size_t)(const void *)(V-&gt;buf) == 1) &amp;&amp; (__s1_len = __builtin_strlen(V-&gt;buf) , __s1_len &lt; 4) ? (__builtin_constant_p("; DNA sequence") &amp;&amp; ((size_t)(const void *)(("; DNA sequence") + 1) - (size_t)(const void *)("; DNA sequence") == 1) ? __builtin_strcmp(V-&gt;buf, "; DNA sequence") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("; DNA sequence");
        int __result = (((const unsigned char *)(const char *)(V-&gt;buf))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(V-&gt;buf))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(V-&gt;buf))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(V-&gt;buf))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("; DNA sequence") &amp;&amp; ((size_t)(const void *)(("; DNA sequence") + 1) - (size_t)(const void *)("; DNA sequence") == 1) &amp;&amp; (__s2_len = __builtin_strlen("; DNA sequence") , __s2_len &lt; 4) ? (__builtin_constant_p(V-&gt;buf) &amp;&amp; ((size_t)(const void *)((V-&gt;buf) + 1) - (size_t)(const void *)(V-&gt;buf) == 1) ? __builtin_strcmp(V-&gt;buf, "; DNA sequence") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(V-&gt;buf);
        int __result = (((const unsigned char *)(const char *)("; DNA sequence"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("; DNA sequence"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("; DNA sequence"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("; DNA sequence"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(V-&gt;buf, "; DNA sequence"))));
}) : strncmp(V-&gt;buf, "; DNA sequence", 14))) == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!feof(V-&gt;f)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>read_checksum</SensitiveFunction>
	<ReferableCheck>!gf-&gt;parallel<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>gf-&gt;header-&gt;order == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(__extension__ (__builtin_constant_p(14) &amp;&amp; ((__builtin_constant_p(V-&gt;buf) &amp;&amp; strlen(V-&gt;buf) &lt; ((size_t)(14))) || (__builtin_constant_p("; DNA sequence") &amp;&amp; strlen("; DNA sequence") &lt; ((size_t)(14)))) ? __extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(V-&gt;buf) &amp;&amp; __builtin_constant_p("; DNA sequence") &amp;&amp; (__s1_len = __builtin_strlen(V-&gt;buf) , __s2_len = __builtin_strlen("; DNA sequence") , (!((size_t)(const void *)((V-&gt;buf) + 1) - (size_t)(const void *)(V-&gt;buf) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("; DNA sequence") + 1) - (size_t)(const void *)("; DNA sequence") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(V-&gt;buf, "; DNA sequence") : (__builtin_constant_p(V-&gt;buf) &amp;&amp; ((size_t)(const void *)((V-&gt;buf) + 1) - (size_t)(const void *)(V-&gt;buf) == 1) &amp;&amp; (__s1_len = __builtin_strlen(V-&gt;buf) , __s1_len &lt; 4) ? (__builtin_constant_p("; DNA sequence") &amp;&amp; ((size_t)(const void *)(("; DNA sequence") + 1) - (size_t)(const void *)("; DNA sequence") == 1) ? __builtin_strcmp(V-&gt;buf, "; DNA sequence") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("; DNA sequence");
        int __result = (((const unsigned char *)(const char *)(V-&gt;buf))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(V-&gt;buf))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(V-&gt;buf))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(V-&gt;buf))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("; DNA sequence") &amp;&amp; ((size_t)(const void *)(("; DNA sequence") + 1) - (size_t)(const void *)("; DNA sequence") == 1) &amp;&amp; (__s2_len = __builtin_strlen("; DNA sequence") , __s2_len &lt; 4) ? (__builtin_constant_p(V-&gt;buf) &amp;&amp; ((size_t)(const void *)((V-&gt;buf) + 1) - (size_t)(const void *)(V-&gt;buf) == 1) ? __builtin_strcmp(V-&gt;buf, "; DNA sequence") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(V-&gt;buf);
        int __result = (((const unsigned char *)(const char *)("; DNA sequence"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("; DNA sequence"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("; DNA sequence"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("; DNA sequence"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(V-&gt;buf, "; DNA sequence"))));
}) : strncmp(V-&gt;buf, "; DNA sequence", 14))) == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!feof(V-&gt;f)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>read_i16</SensitiveFunction>
	<ReferableCheck>!read_i32(sfp-&gt;fp, &amp;magic)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>fread(pkey, sizeof(char), sfp-&gt;plen, sfp-&gt;fp) != sfp-&gt;plen<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(__extension__ (__builtin_constant_p(14) &amp;&amp; ((__builtin_constant_p(V-&gt;buf) &amp;&amp; strlen(V-&gt;buf) &lt; ((size_t)(14))) || (__builtin_constant_p("; DNA sequence") &amp;&amp; strlen("; DNA sequence") &lt; ((size_t)(14)))) ? __extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(V-&gt;buf) &amp;&amp; __builtin_constant_p("; DNA sequence") &amp;&amp; (__s1_len = __builtin_strlen(V-&gt;buf) , __s2_len = __builtin_strlen("; DNA sequence") , (!((size_t)(const void *)((V-&gt;buf) + 1) - (size_t)(const void *)(V-&gt;buf) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("; DNA sequence") + 1) - (size_t)(const void *)("; DNA sequence") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(V-&gt;buf, "; DNA sequence") : (__builtin_constant_p(V-&gt;buf) &amp;&amp; ((size_t)(const void *)((V-&gt;buf) + 1) - (size_t)(const void *)(V-&gt;buf) == 1) &amp;&amp; (__s1_len = __builtin_strlen(V-&gt;buf) , __s1_len &lt; 4) ? (__builtin_constant_p("; DNA sequence") &amp;&amp; ((size_t)(const void *)(("; DNA sequence") + 1) - (size_t)(const void *)("; DNA sequence") == 1) ? __builtin_strcmp(V-&gt;buf, "; DNA sequence") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("; DNA sequence");
        int __result = (((const unsigned char *)(const char *)(V-&gt;buf))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(V-&gt;buf))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(V-&gt;buf))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(V-&gt;buf))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("; DNA sequence") &amp;&amp; ((size_t)(const void *)(("; DNA sequence") + 1) - (size_t)(const void *)("; DNA sequence") == 1) &amp;&amp; (__s2_len = __builtin_strlen("; DNA sequence") , __s2_len &lt; 4) ? (__builtin_constant_p(V-&gt;buf) &amp;&amp; ((size_t)(const void *)((V-&gt;buf) + 1) - (size_t)(const void *)(V-&gt;buf) == 1) ? __builtin_strcmp(V-&gt;buf, "; DNA sequence") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(V-&gt;buf);
        int __result = (((const unsigned char *)(const char *)("; DNA sequence"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("; DNA sequence"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("; DNA sequence"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("; DNA sequence"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(V-&gt;buf, "; DNA sequence"))));
}) : strncmp(V-&gt;buf, "; DNA sequence", 14))) == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!feof(V-&gt;f)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>read_i32</SensitiveFunction>
	<ReferableCheck>!read_offset(sfp-&gt;fp, sfp-&gt;smode, data_offset)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!read_i32(sfp-&gt;fp, &amp;magic)<Number>13</Number>
	</ReferableCheck>
	<ReferableCheck>(__extension__ (__builtin_constant_p(14) &amp;&amp; ((__builtin_constant_p(V-&gt;buf) &amp;&amp; strlen(V-&gt;buf) &lt; ((size_t)(14))) || (__builtin_constant_p("; DNA sequence") &amp;&amp; strlen("; DNA sequence") &lt; ((size_t)(14)))) ? __extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(V-&gt;buf) &amp;&amp; __builtin_constant_p("; DNA sequence") &amp;&amp; (__s1_len = __builtin_strlen(V-&gt;buf) , __s2_len = __builtin_strlen("; DNA sequence") , (!((size_t)(const void *)((V-&gt;buf) + 1) - (size_t)(const void *)(V-&gt;buf) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("; DNA sequence") + 1) - (size_t)(const void *)("; DNA sequence") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(V-&gt;buf, "; DNA sequence") : (__builtin_constant_p(V-&gt;buf) &amp;&amp; ((size_t)(const void *)((V-&gt;buf) + 1) - (size_t)(const void *)(V-&gt;buf) == 1) &amp;&amp; (__s1_len = __builtin_strlen(V-&gt;buf) , __s1_len &lt; 4) ? (__builtin_constant_p("; DNA sequence") &amp;&amp; ((size_t)(const void *)(("; DNA sequence") + 1) - (size_t)(const void *)("; DNA sequence") == 1) ? __builtin_strcmp(V-&gt;buf, "; DNA sequence") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("; DNA sequence");
        int __result = (((const unsigned char *)(const char *)(V-&gt;buf))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(V-&gt;buf))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(V-&gt;buf))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(V-&gt;buf))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("; DNA sequence") &amp;&amp; ((size_t)(const void *)(("; DNA sequence") + 1) - (size_t)(const void *)("; DNA sequence") == 1) &amp;&amp; (__s2_len = __builtin_strlen("; DNA sequence") , __s2_len &lt; 4) ? (__builtin_constant_p(V-&gt;buf) &amp;&amp; ((size_t)(const void *)((V-&gt;buf) + 1) - (size_t)(const void *)(V-&gt;buf) == 1) ? __builtin_strcmp(V-&gt;buf, "; DNA sequence") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(V-&gt;buf);
        int __result = (((const unsigned char *)(const char *)("; DNA sequence"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("; DNA sequence"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("; DNA sequence"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("; DNA sequence"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(V-&gt;buf, "; DNA sequence"))));
}) : strncmp(V-&gt;buf, "; DNA sequence", 14))) == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!feof(V-&gt;f)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>read_i64</SensitiveFunction>
	<ReferableCheck>!read_i32(fp, &amp;(ret_offset-&gt;off.i32))<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!read_i32(sfp-&gt;fp, &amp;magic)<Number>13</Number>
	</ReferableCheck>
	<ReferableCheck>(__extension__ (__builtin_constant_p(14) &amp;&amp; ((__builtin_constant_p(V-&gt;buf) &amp;&amp; strlen(V-&gt;buf) &lt; ((size_t)(14))) || (__builtin_constant_p("; DNA sequence") &amp;&amp; strlen("; DNA sequence") &lt; ((size_t)(14)))) ? __extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(V-&gt;buf) &amp;&amp; __builtin_constant_p("; DNA sequence") &amp;&amp; (__s1_len = __builtin_strlen(V-&gt;buf) , __s2_len = __builtin_strlen("; DNA sequence") , (!((size_t)(const void *)((V-&gt;buf) + 1) - (size_t)(const void *)(V-&gt;buf) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("; DNA sequence") + 1) - (size_t)(const void *)("; DNA sequence") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(V-&gt;buf, "; DNA sequence") : (__builtin_constant_p(V-&gt;buf) &amp;&amp; ((size_t)(const void *)((V-&gt;buf) + 1) - (size_t)(const void *)(V-&gt;buf) == 1) &amp;&amp; (__s1_len = __builtin_strlen(V-&gt;buf) , __s1_len &lt; 4) ? (__builtin_constant_p("; DNA sequence") &amp;&amp; ((size_t)(const void *)(("; DNA sequence") + 1) - (size_t)(const void *)("; DNA sequence") == 1) ? __builtin_strcmp(V-&gt;buf, "; DNA sequence") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("; DNA sequence");
        int __result = (((const unsigned char *)(const char *)(V-&gt;buf))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(V-&gt;buf))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(V-&gt;buf))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(V-&gt;buf))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("; DNA sequence") &amp;&amp; ((size_t)(const void *)(("; DNA sequence") + 1) - (size_t)(const void *)("; DNA sequence") == 1) &amp;&amp; (__s2_len = __builtin_strlen("; DNA sequence") , __s2_len &lt; 4) ? (__builtin_constant_p(V-&gt;buf) &amp;&amp; ((size_t)(const void *)((V-&gt;buf) + 1) - (size_t)(const void *)(V-&gt;buf) == 1) ? __builtin_strcmp(V-&gt;buf, "; DNA sequence") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(V-&gt;buf);
        int __result = (((const unsigned char *)(const char *)("; DNA sequence"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("; DNA sequence"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("; DNA sequence"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("; DNA sequence"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(V-&gt;buf, "; DNA sequence"))));
}) : strncmp(V-&gt;buf, "; DNA sequence", 14))) == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!feof(V-&gt;f)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>read_offset</SensitiveFunction>
	<ReferableCheck>!read_i16(sfp-&gt;fp, &amp;fnum)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!read_i32(sfp-&gt;fp, &amp;magic)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>fread(pkey, sizeof(char), sfp-&gt;plen, sfp-&gt;fp) != sfp-&gt;plen<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!read_offset(sfp-&gt;fp, sfp-&gt;imode, &amp;(sfp-&gt;foffset))<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>read_plan9_aschmm</SensitiveFunction>
	<ReferableCheck>feof(hmmfp-&gt;f) || fgets(buffer, 512, hmmfp-&gt;f) == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!read_i32(sfp-&gt;fp, &amp;magic)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>fread(pkey, sizeof(char), sfp-&gt;plen, sfp-&gt;fp) != sfp-&gt;plen<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!read_offset(sfp-&gt;fp, sfp-&gt;imode, &amp;(sfp-&gt;foffset))<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>read_plan9_binhmm</SensitiveFunction>
	<ReferableCheck>feof(hmmfp-&gt;f)<Number>4</Number>
	</ReferableCheck>
	<ReferableCheck>!read_i32(sfp-&gt;fp, &amp;magic)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>fread(pkey, sizeof(char), sfp-&gt;plen, sfp-&gt;fp) != sfp-&gt;plen<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!read_offset(sfp-&gt;fp, sfp-&gt;imode, &amp;(sfp-&gt;foffset))<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>read_v3_gauge_hdr</SensitiveFunction>
	<ReferableCheck>psread_data(parallel, fp, &amp;gh-&gt;magic_number, sizeof (gh-&gt;magic_number), myname, "magic number") != 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!read_i32(sfp-&gt;fp, &amp;magic)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>fread(pkey, sizeof(char), sfp-&gt;plen, sfp-&gt;fp) != sfp-&gt;plen<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!read_offset(sfp-&gt;fp, sfp-&gt;imode, &amp;(sfp-&gt;foffset))<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>realloc</SensitiveFunction>
	<ReferableCheck>(g-&gt;pkeys[g-&gt;nprimary].key = sre_strdup(key, n)) == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(g-&gt;skeys[g-&gt;nsecondary].key = sre_strdup(key, n)) == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>fread(pkey, sizeof(char), sfp-&gt;plen, sfp-&gt;fp) != sfp-&gt;plen<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!read_offset(sfp-&gt;fp, sfp-&gt;imode, &amp;(sfp-&gt;foffset))<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>refresh_neighbour_lists</SensitiveFunction>
	<ReferableCheck>net-&gt;n_trips &lt;= 15000<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(g-&gt;skeys[g-&gt;nsecondary].key = sre_strdup(key, n)) == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>fread(pkey, sizeof(char), sfp-&gt;plen, sfp-&gt;fp) != sfp-&gt;plen<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!read_offset(sfp-&gt;fp, sfp-&gt;imode, &amp;(sfp-&gt;foffset))<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>reg</SensitiveFunction>
	<ReferableCheck>*cp-&gt;regparse == '^'<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(g-&gt;skeys[g-&gt;nsecondary].key = sre_strdup(key, n)) == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>fread(pkey, sizeof(char), sfp-&gt;plen, sfp-&gt;fp) != sfp-&gt;plen<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!read_offset(sfp-&gt;fp, sfp-&gt;imode, &amp;(sfp-&gt;foffset))<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>regbranch</SensitiveFunction>
	<ReferableCheck>cp-&gt;regnpar &gt;= 10<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>(g-&gt;skeys[g-&gt;nsecondary].key = sre_strdup(key, n)) == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>fread(pkey, sizeof(char), sfp-&gt;plen, sfp-&gt;fp) != sfp-&gt;plen<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!read_offset(sfp-&gt;fp, sfp-&gt;imode, &amp;(sfp-&gt;foffset))<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>regc</SensitiveFunction>
	<ReferableCheck>range &gt; rangeend<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>*cp-&gt;regparse == '^'<Number>8</Number>
	</ReferableCheck>
	<ReferableCheck>fread(pkey, sizeof(char), sfp-&gt;plen, sfp-&gt;fp) != sfp-&gt;plen<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!read_offset(sfp-&gt;fp, sfp-&gt;imode, &amp;(sfp-&gt;foffset))<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>regmatch</SensitiveFunction>
	<ReferableCheck>ep-&gt;reginput != ep-&gt;regbol<Number>4</Number>
	</ReferableCheck>
	<ReferableCheck>*cp-&gt;regparse == '^'<Number>8</Number>
	</ReferableCheck>
	<ReferableCheck>fread(pkey, sizeof(char), sfp-&gt;plen, sfp-&gt;fp) != sfp-&gt;plen<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!read_offset(sfp-&gt;fp, sfp-&gt;imode, &amp;(sfp-&gt;foffset))<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>regnode</SensitiveFunction>
	<ReferableCheck>cp-&gt;regnpar &gt;= 10<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>*cp-&gt;regparse == '^'<Number>4</Number>
	</ReferableCheck>
	<ReferableCheck>fread(pkey, sizeof(char), sfp-&gt;plen, sfp-&gt;fp) != sfp-&gt;plen<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!read_offset(sfp-&gt;fp, sfp-&gt;imode, &amp;(sfp-&gt;foffset))<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>regoptail</SensitiveFunction>
	<ReferableCheck>cp-&gt;regnpar &gt;= 10<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>*cp-&gt;regparse == '^'<Number>4</Number>
	</ReferableCheck>
	<ReferableCheck>fread(pkey, sizeof(char), sfp-&gt;plen, sfp-&gt;fp) != sfp-&gt;plen<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!read_offset(sfp-&gt;fp, sfp-&gt;imode, &amp;(sfp-&gt;foffset))<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>regrepeat</SensitiveFunction>
	<ReferableCheck>ep-&gt;reginput != ep-&gt;regbol<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>*cp-&gt;regparse == '^'<Number>4</Number>
	</ReferableCheck>
	<ReferableCheck>fread(pkey, sizeof(char), sfp-&gt;plen, sfp-&gt;fp) != sfp-&gt;plen<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!read_offset(sfp-&gt;fp, sfp-&gt;imode, &amp;(sfp-&gt;foffset))<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>regtail</SensitiveFunction>
	<ReferableCheck>!((cp)-&gt;regcode != (cp)-&gt;regdummy) || (*(p)) != 6<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>cp-&gt;regnpar &gt;= 10<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>fread(pkey, sizeof(char), sfp-&gt;plen, sfp-&gt;fp) != sfp-&gt;plen<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!read_offset(sfp-&gt;fp, sfp-&gt;imode, &amp;(sfp-&gt;foffset))<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>regtry</SensitiveFunction>
	<ReferableCheck>prog == ((void *)0) || string == ((void *)0)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>cp-&gt;regnpar &gt;= 10<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>fread(pkey, sizeof(char), sfp-&gt;plen, sfp-&gt;fp) != sfp-&gt;plen<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!read_offset(sfp-&gt;fp, sfp-&gt;imode, &amp;(sfp-&gt;foffset))<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>replace_weaker_arc</SensitiveFunction>
	<ReferableCheck>net-&gt;n_trips &lt;= 15000<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>cp-&gt;regnpar &gt;= 10<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>fread(pkey, sizeof(char), sfp-&gt;plen, sfp-&gt;fp) != sfp-&gt;plen<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!read_offset(sfp-&gt;fp, sfp-&gt;imode, &amp;(sfp-&gt;foffset))<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>resize_prob</SensitiveFunction>
	<ReferableCheck>net-&gt;n_trips &lt;= 15000<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>cp-&gt;regnpar &gt;= 10<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>fread(pkey, sizeof(char), sfp-&gt;plen, sfp-&gt;fp) != sfp-&gt;plen<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!read_offset(sfp-&gt;fp, sfp-&gt;imode, &amp;(sfp-&gt;foffset))<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>rewind</SensitiveFunction>
	<ReferableCheck>ferror(zStream)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>cp-&gt;regnpar &gt;= 10<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>fread(pkey, sizeof(char), sfp-&gt;plen, sfp-&gt;fp) != sfp-&gt;plen<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!read_offset(sfp-&gt;fp, sfp-&gt;imode, &amp;(sfp-&gt;foffset))<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>right_su2_hit_a</SensitiveFunction>
	<ReferableCheck>vector_parity[j] == 3 || vector_parity[j] == parity<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>cp-&gt;regnpar &gt;= 10<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>fread(pkey, sizeof(char), sfp-&gt;plen, sfp-&gt;fp) != sfp-&gt;plen<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!read_offset(sfp-&gt;fp, sfp-&gt;imode, &amp;(sfp-&gt;foffset))<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>scalar_mult_add_latvec</SensitiveFunction>
	<ReferableCheck>src == temp<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>cp-&gt;regnpar &gt;= 10<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>fread(pkey, sizeof(char), sfp-&gt;plen, sfp-&gt;fp) != sfp-&gt;plen<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!read_offset(sfp-&gt;fp, sfp-&gt;imode, &amp;(sfp-&gt;foffset))<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>scalar_mult_latvec</SensitiveFunction>
	<ReferableCheck>src == temp<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>cp-&gt;regnpar &gt;= 10<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>fread(pkey, sizeof(char), sfp-&gt;plen, sfp-&gt;fp) != sfp-&gt;plen<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!read_offset(sfp-&gt;fp, sfp-&gt;imode, &amp;(sfp-&gt;foffset))<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>scanf</SensitiveFunction>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(initial_prompt) &amp;&amp; __builtin_constant_p("prompt") &amp;&amp; (__s1_len = __builtin_strlen(initial_prompt) , __s2_len = __builtin_strlen("prompt") , (!((size_t)(const void *)((initial_prompt) + 1) - (size_t)(const void *)(initial_prompt) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("prompt") + 1) - (size_t)(const void *)("prompt") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(initial_prompt, "prompt") : (__builtin_constant_p(initial_prompt) &amp;&amp; ((size_t)(const void *)((initial_prompt) + 1) - (size_t)(const void *)(initial_prompt) == 1) &amp;&amp; (__s1_len = __builtin_strlen(initial_prompt) , __s1_len &lt; 4) ? (__builtin_constant_p("prompt") &amp;&amp; ((size_t)(const void *)(("prompt") + 1) - (size_t)(const void *)("prompt") == 1) ? __builtin_strcmp(initial_prompt, "prompt") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("prompt");
        int __result = (((const unsigned char *)(const char *)(initial_prompt))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(initial_prompt))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(initial_prompt))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(initial_prompt))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("prompt") &amp;&amp; ((size_t)(const void *)(("prompt") + 1) - (size_t)(const void *)("prompt") == 1) &amp;&amp; (__s2_len = __builtin_strlen("prompt") , __s2_len &lt; 4) ? (__builtin_constant_p(initial_prompt) &amp;&amp; ((size_t)(const void *)((initial_prompt) + 1) - (size_t)(const void *)(initial_prompt) == 1) ? __builtin_strcmp(initial_prompt, "prompt") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(initial_prompt);
        int __result = (((const unsigned char *)(const char *)("prompt"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("prompt"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("prompt"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("prompt"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(initial_prompt, "prompt"))));
}) == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>cp-&gt;regnpar &gt;= 10<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>fread(pkey, sizeof(char), sfp-&gt;plen, sfp-&gt;fp) != sfp-&gt;plen<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!read_offset(sfp-&gt;fp, sfp-&gt;imode, &amp;(sfp-&gt;foffset))<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>see</SensitiveFunction>
	<ReferableCheck>abs(material[captured]) + 15 &gt;= abs(material[board[from]])<Number>7</Number>
	</ReferableCheck>
	<ReferableCheck>cp-&gt;regnpar &gt;= 10<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>fread(pkey, sizeof(char), sfp-&gt;plen, sfp-&gt;fp) != sfp-&gt;plen<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!read_offset(sfp-&gt;fp, sfp-&gt;imode, &amp;(sfp-&gt;foffset))<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>sendMTFValues</SensitiveFunction>
	<ReferableCheck>s-&gt;nblock &gt; 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>cp-&gt;regnpar &gt;= 10<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>fread(pkey, sizeof(char), sfp-&gt;plen, sfp-&gt;fp) != sfp-&gt;plen<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!read_offset(sfp-&gt;fp, sfp-&gt;imode, &amp;(sfp-&gt;foffset))<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>send_field</SensitiveFunction>
	<ReferableCheck>destnode == sendnode<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>destnode == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>fread(pkey, sizeof(char), sfp-&gt;plen, sfp-&gt;fp) != sfp-&gt;plen<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!read_offset(sfp-&gt;fp, sfp-&gt;imode, &amp;(sfp-&gt;foffset))<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>seqencode</SensitiveFunction>
	<ReferableCheck>(len = strlen(probe)) &gt; (sizeof(Hashseq) * 2)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>destnode == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>fread(pkey, sizeof(char), sfp-&gt;plen, sfp-&gt;fp) != sfp-&gt;plen<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!read_offset(sfp-&gt;fp, sfp-&gt;imode, &amp;(sfp-&gt;foffset))<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>sgfAddProperty</SensitiveFunction>
	<ReferableCheck>prop-&gt;name == nam<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>destnode == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>fread(pkey, sizeof(char), sfp-&gt;plen, sfp-&gt;fp) != sfp-&gt;plen<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!read_offset(sfp-&gt;fp, sfp-&gt;imode, &amp;(sfp-&gt;foffset))<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>sgfAddPropertyFloat</SensitiveFunction>
	<ReferableCheck>prop-&gt;name == nam<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>destnode == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>fread(pkey, sizeof(char), sfp-&gt;plen, sfp-&gt;fp) != sfp-&gt;plen<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!read_offset(sfp-&gt;fp, sfp-&gt;imode, &amp;(sfp-&gt;foffset))<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>sgfAddPropertyInt</SensitiveFunction>
	<ReferableCheck>prop-&gt;name == nam<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>destnode == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>fread(pkey, sizeof(char), sfp-&gt;plen, sfp-&gt;fp) != sfp-&gt;plen<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!read_offset(sfp-&gt;fp, sfp-&gt;imode, &amp;(sfp-&gt;foffset))<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>sgfGetIntProperty</SensitiveFunction>
	<ReferableCheck>!node<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>overwrite || !sgfGetIntProperty(root, "GN", &amp;dummy)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fread(pkey, sizeof(char), sfp-&gt;plen, sfp-&gt;fp) != sfp-&gt;plen<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!read_offset(sfp-&gt;fp, sfp-&gt;imode, &amp;(sfp-&gt;foffset))<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>sgfMkProperty</SensitiveFunction>
	<ReferableCheck>prop<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>overwrite || !sgfGetIntProperty(root, "GN", &amp;dummy)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fread(pkey, sizeof(char), sfp-&gt;plen, sfp-&gt;fp) != sfp-&gt;plen<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!read_offset(sfp-&gt;fp, sfp-&gt;imode, &amp;(sfp-&gt;foffset))<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>sgfOverwriteProperty</SensitiveFunction>
	<ReferableCheck>!node<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>overwrite || !sgfGetIntProperty(root, "GN", &amp;dummy)<Number>4</Number>
	</ReferableCheck>
	<ReferableCheck>fread(pkey, sizeof(char), sfp-&gt;plen, sfp-&gt;fp) != sfp-&gt;plen<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!read_offset(sfp-&gt;fp, sfp-&gt;imode, &amp;(sfp-&gt;foffset))<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>sgfOverwritePropertyFloat</SensitiveFunction>
	<ReferableCheck>overwrite || !sgfGetIntProperty(root, "GN", &amp;dummy)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>overwrite || !sgfGetIntProperty(root, "GN", &amp;dummy)<Number>4</Number>
	</ReferableCheck>
	<ReferableCheck>fread(pkey, sizeof(char), sfp-&gt;plen, sfp-&gt;fp) != sfp-&gt;plen<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!read_offset(sfp-&gt;fp, sfp-&gt;imode, &amp;(sfp-&gt;foffset))<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>sgfPrintCharProperty</SensitiveFunction>
	<ReferableCheck>sgfHasProperty(node, "GM")<Number>5</Number>
	</ReferableCheck>
	<ReferableCheck>overwrite || !sgfGetIntProperty(root, "GN", &amp;dummy)<Number>4</Number>
	</ReferableCheck>
	<ReferableCheck>fread(pkey, sizeof(char), sfp-&gt;plen, sfp-&gt;fp) != sfp-&gt;plen<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!read_offset(sfp-&gt;fp, sfp-&gt;imode, &amp;(sfp-&gt;foffset))<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>sgfPrintCommentProperty</SensitiveFunction>
	<ReferableCheck>sgfHasProperty(node, "GM")<Number>6</Number>
	</ReferableCheck>
	<ReferableCheck>overwrite || !sgfGetIntProperty(root, "GN", &amp;dummy)<Number>4</Number>
	</ReferableCheck>
	<ReferableCheck>fread(pkey, sizeof(char), sfp-&gt;plen, sfp-&gt;fp) != sfp-&gt;plen<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!read_offset(sfp-&gt;fp, sfp-&gt;imode, &amp;(sfp-&gt;foffset))<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>sgfPrintRemainingProperties</SensitiveFunction>
	<ReferableCheck>sgfHasProperty(node, "GM")<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>overwrite || !sgfGetIntProperty(root, "GN", &amp;dummy)<Number>4</Number>
	</ReferableCheck>
	<ReferableCheck>fread(pkey, sizeof(char), sfp-&gt;plen, sfp-&gt;fp) != sfp-&gt;plen<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!read_offset(sfp-&gt;fp, sfp-&gt;imode, &amp;(sfp-&gt;foffset))<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>sgfStartVariantFirst</SensitiveFunction>
	<ReferableCheck>node-&gt;child<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>overwrite || !sgfGetIntProperty(root, "GN", &amp;dummy)<Number>4</Number>
	</ReferableCheck>
	<ReferableCheck>fread(pkey, sizeof(char), sfp-&gt;plen, sfp-&gt;fp) != sfp-&gt;plen<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!read_offset(sfp-&gt;fp, sfp-&gt;imode, &amp;(sfp-&gt;foffset))<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>sgf_print_name</SensitiveFunction>
	<ReferableCheck>prop-&gt;name == name<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>overwrite || !sgfGetIntProperty(root, "GN", &amp;dummy)<Number>4</Number>
	</ReferableCheck>
	<ReferableCheck>fread(pkey, sizeof(char), sfp-&gt;plen, sfp-&gt;fp) != sfp-&gt;plen<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!read_offset(sfp-&gt;fp, sfp-&gt;imode, &amp;(sfp-&gt;foffset))<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>sgftreeForward</SensitiveFunction>
	<ReferableCheck>tree-&gt;lastnode<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>overwrite || !sgfGetIntProperty(root, "GN", &amp;dummy)<Number>4</Number>
	</ReferableCheck>
	<ReferableCheck>fread(pkey, sizeof(char), sfp-&gt;plen, sfp-&gt;fp) != sfp-&gt;plen<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!read_offset(sfp-&gt;fp, sfp-&gt;imode, &amp;(sfp-&gt;foffset))<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>show_sgf_tree</SensitiveFunction>
	<ReferableCheck>node-&gt;next<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>node-&gt;child<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>fread(pkey, sizeof(char), sfp-&gt;plen, sfp-&gt;fp) != sfp-&gt;plen<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!read_offset(sfp-&gt;fp, sfp-&gt;imode, &amp;(sfp-&gt;foffset))<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>sign</SensitiveFunction>
	<ReferableCheck>(level1 != level2) &amp;&amp; (level1 != 0) &amp;&amp; (level2 != 0)<Number>4</Number>
	</ReferableCheck>
	<ReferableCheck>level != 0<Number>5</Number>
	</ReferableCheck>
	<ReferableCheck>level1 != level2 &amp;&amp; level1 != 0 &amp;&amp; level2 != 0<Number>8</Number>
	</ReferableCheck>
	<ReferableCheck>level &gt; 2063<Number>12</Number>
	</ReferableCheck>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>simple_diffmx</SensitiveFunction>
	<ReferableCheck>nseq == 1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>level != 0<Number>5</Number>
	</ReferableCheck>
	<ReferableCheck>level1 != level2 &amp;&amp; level1 != 0 &amp;&amp; level2 != 0<Number>8</Number>
	</ReferableCheck>
	<ReferableCheck>level &gt; 2063<Number>12</Number>
	</ReferableCheck>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>single_comsseq</SensitiveFunction>
	<ReferableCheck>((ldiph[b][r]) &lt; 0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>level != 0<Number>5</Number>
	</ReferableCheck>
	<ReferableCheck>level1 != level2 &amp;&amp; level1 != 0 &amp;&amp; level2 != 0<Number>8</Number>
	</ReferableCheck>
	<ReferableCheck>level &gt; 2063<Number>12</Number>
	</ReferableCheck>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>single_lc_comsseq</SensitiveFunction>
	<ReferableCheck>((ldiph[b][r]) &lt; 0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>level != 0<Number>5</Number>
	</ReferableCheck>
	<ReferableCheck>level1 != level2 &amp;&amp; level1 != 0 &amp;&amp; level2 != 0<Number>8</Number>
	</ReferableCheck>
	<ReferableCheck>level &gt; 2063<Number>12</Number>
	</ReferableCheck>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>sort_basket</SensitiveFunction>
	<ReferableCheck>l &lt; max &amp;&amp; l &lt;= 50<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>l &lt; r<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>level1 != level2 &amp;&amp; level1 != 0 &amp;&amp; level2 != 0<Number>8</Number>
	</ReferableCheck>
	<ReferableCheck>level &gt; 2063<Number>12</Number>
	</ReferableCheck>
	<ReferableCheck>V-&gt;ssimode &gt;= 0<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>sprintf</SensitiveFunction>
	<ReferableCheck>(hmmfp-&gt;f = fopen(hmmfile, "r")) != ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>highcount &gt; maxbar<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>lowcount &gt; maxbar<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>((int)strlen(fname) + (int)strlen(s) + 2) &gt; 1024<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>*file == '/'<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>sqd_regexec</SensitiveFunction>
	<ReferableCheck>sqd_parse[i] != ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>highcount &gt; maxbar<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>lowcount &gt; maxbar<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>((int)strlen(fname) + (int)strlen(s) + 2) &gt; 1024<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>*file == '/'<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>sqrt</SensitiveFunction>
	<ReferableCheck>Frame.Rainbow == __null<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>u2 &lt; minU2<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>u2 &gt; maxU2<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>diff2 &gt; maxDiff2<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>*file == '/'<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>sre_fgets</SensitiveFunction>
	<ReferableCheck>0 != SSIGetFilePosition(V-&gt;f, V-&gt;ssimode, &amp;(V-&gt;ssioffset))<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(g-&gt;stmp = fopen(g-&gt;stmpfile, "r")) == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(g-&gt;ptmp = fopen(g-&gt;ptmpfile, "r")) == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>diff2 &gt; maxDiff2<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>*file == '/'<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>sre_strcat</SensitiveFunction>
	<ReferableCheck>(len = sre_strcat(&amp;(msa-&gt;gs[tagidx][sqidx]), -1, "\n", 1)) &lt; 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(g-&gt;stmp = fopen(g-&gt;stmpfile, "r")) == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(g-&gt;ptmp = fopen(g-&gt;ptmpfile, "r")) == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>diff2 &gt; maxDiff2<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>*file == '/'<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>sre_strdup</SensitiveFunction>
	<ReferableCheck>s == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;sqdesc == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;gs_tag == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;gr_tag == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;comment == ((void *)0)<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>sscanf</SensitiveFunction>
	<ReferableCheck>!str<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;sqdesc == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;gs_tag == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;gr_tag == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;comment == ((void *)0)<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>stat</SensitiveFunction>
	<ReferableCheck>param-&gt;action == COMPARE &amp;&amp; stat(param-&gt;resultFilename, &amp;fileStat) != 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;sqdesc == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;gs_tag == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;gr_tag == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;comment == ((void *)0)<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>strcat</SensitiveFunction>
	<ReferableCheck>!hasSuffix(name, oldSuffix)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>hmm-&gt;comlog != ((void *)0)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;gs_tag == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;gr_tag == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;comment == ((void *)0)<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>strcpy</SensitiveFunction>
	<ReferableCheck>(k &gt; 4) &amp;&amp; (__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(file + k - 4) &amp;&amp; __builtin_constant_p(".mfc") &amp;&amp; (__s1_len = __builtin_strlen(file + k - 4) , __s2_len = __builtin_strlen(".mfc") , (!((size_t)(const void *)((file + k - 4) + 1) - (size_t)(const void *)(file + k - 4) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)((".mfc") + 1) - (size_t)(const void *)(".mfc") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(file + k - 4, ".mfc") : (__builtin_constant_p(file + k - 4) &amp;&amp; ((size_t)(const void *)((file + k - 4) + 1) - (size_t)(const void *)(file + k - 4) == 1) &amp;&amp; (__s1_len = __builtin_strlen(file + k - 4) , __s1_len &lt; 4) ? (__builtin_constant_p(".mfc") &amp;&amp; ((size_t)(const void *)((".mfc") + 1) - (size_t)(const void *)(".mfc") == 1) ? __builtin_strcmp(file + k - 4, ".mfc") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(".mfc");
        int __result = (((const unsigned char *)(const char *)(file + k - 4))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(file + k - 4))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(file + k - 4))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(file + k - 4))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(".mfc") &amp;&amp; ((size_t)(const void *)((".mfc") + 1) - (size_t)(const void *)(".mfc") == 1) &amp;&amp; (__s2_len = __builtin_strlen(".mfc") , __s2_len &lt; 4) ? (__builtin_constant_p(file + k - 4) &amp;&amp; ((size_t)(const void *)((file + k - 4) + 1) - (size_t)(const void *)(file + k - 4) == 1) ? __builtin_strcmp(file + k - 4, ".mfc") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(file + k - 4);
        int __result = (((const unsigned char *)(const char *)(".mfc"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(".mfc"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(".mfc"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(".mfc"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(file + k - 4, ".mfc"))));
}) == 0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(k &gt; 2) &amp;&amp; ((__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(file + k - 2) &amp;&amp; __builtin_constant_p(".Z") &amp;&amp; (__s1_len = __builtin_strlen(file + k - 2) , __s2_len = __builtin_strlen(".Z") , (!((size_t)(const void *)((file + k - 2) + 1) - (size_t)(const void *)(file + k - 2) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)((".Z") + 1) - (size_t)(const void *)(".Z") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(file + k - 2, ".Z") : (__builtin_constant_p(file + k - 2) &amp;&amp; ((size_t)(const void *)((file + k - 2) + 1) - (size_t)(const void *)(file + k - 2) == 1) &amp;&amp; (__s1_len = __builtin_strlen(file + k - 2) , __s1_len &lt; 4) ? (__builtin_constant_p(".Z") &amp;&amp; ((size_t)(const void *)((".Z") + 1) - (size_t)(const void *)(".Z") == 1) ? __builtin_strcmp(file + k - 2, ".Z") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(".Z");
        int __result = (((const unsigned char *)(const char *)(file + k - 2))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(file + k - 2))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(file + k - 2))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(file + k - 2))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(".Z") &amp;&amp; ((size_t)(const void *)((".Z") + 1) - (size_t)(const void *)(".Z") == 1) &amp;&amp; (__s2_len = __builtin_strlen(".Z") , __s2_len &lt; 4) ? (__builtin_constant_p(file + k - 2) &amp;&amp; ((size_t)(const void *)((file + k - 2) + 1) - (size_t)(const void *)(file + k - 2) == 1) ? __builtin_strcmp(file + k - 2, ".Z") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(file + k - 2);
        int __result = (((const unsigned char *)(const char *)(".Z"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(".Z"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(".Z"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(".Z"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(file + k - 2, ".Z"))));
}) == 0) || (__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(file + k - 2) &amp;&amp; __builtin_constant_p(".z") &amp;&amp; (__s1_len = __builtin_strlen(file + k - 2) , __s2_len = __builtin_strlen(".z") , (!((size_t)(const void *)((file + k - 2) + 1) - (size_t)(const void *)(file + k - 2) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)((".z") + 1) - (size_t)(const void *)(".z") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(file + k - 2, ".z") : (__builtin_constant_p(file + k - 2) &amp;&amp; ((size_t)(const void *)((file + k - 2) + 1) - (size_t)(const void *)(file + k - 2) == 1) &amp;&amp; (__s1_len = __builtin_strlen(file + k - 2) , __s1_len &lt; 4) ? (__builtin_constant_p(".z") &amp;&amp; ((size_t)(const void *)((".z") + 1) - (size_t)(const void *)(".z") == 1) ? __builtin_strcmp(file + k - 2, ".z") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(".z");
        int __result = (((const unsigned char *)(const char *)(file + k - 2))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(file + k - 2))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(file + k - 2))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(file + k - 2))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(".z") &amp;&amp; ((size_t)(const void *)((".z") + 1) - (size_t)(const void *)(".z") == 1) &amp;&amp; (__s2_len = __builtin_strlen(".z") , __s2_len &lt; 4) ? (__builtin_constant_p(file + k - 2) &amp;&amp; ((size_t)(const void *)((file + k - 2) + 1) - (size_t)(const void *)(file + k - 2) == 1) ? __builtin_strcmp(file + k - 2, ".z") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(file + k - 2);
        int __result = (((const unsigned char *)(const char *)(".z"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(".z"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(".z"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(".z"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(file + k - 2, ".z"))));
}) == 0))<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>s == ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;gr_tag == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>msa-&gt;comment == ((void *)0)<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>strlen</SensitiveFunction>
	<ReferableCheck>*cp-&gt;regparse == '^'<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>__extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(type) &amp;&amp; __builtin_constant_p("s3_1x39") &amp;&amp; (__s1_len = __builtin_strlen(type) , __s2_len = __builtin_strlen("s3_1x39") , (!((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(type, "s3_1x39") : (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) &amp;&amp; (__s1_len = __builtin_strlen(type) , __s1_len &lt; 4) ? (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) ? __builtin_strcmp(type, "s3_1x39") : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)("s3_1x39");
        int __result = (((const unsigned char *)(const char *)(type))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(type))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(type))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(type))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p("s3_1x39") &amp;&amp; ((size_t)(const void *)(("s3_1x39") + 1) - (size_t)(const void *)("s3_1x39") == 1) &amp;&amp; (__s2_len = __builtin_strlen("s3_1x39") , __s2_len &lt; 4) ? (__builtin_constant_p(type) &amp;&amp; ((size_t)(const void *)((type) + 1) - (size_t)(const void *)(type) == 1) ? __builtin_strcmp(type, "s3_1x39") : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(type);
        int __result = (((const unsigned char *)(const char *)("s3_1x39"))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)("s3_1x39"))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)("s3_1x39"))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)("s3_1x39"))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(type, "s3_1x39"))));
}) == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>defn[j].deflt<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>defn[i].deflt<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>hmm-&gt;comlog != ((void *)0)<Number>1</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>strncmp</SensitiveFunction>
	<ReferableCheck>(sptr = strtok(V-&gt;buf + 12, "\n\t ")) != ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>__s2_len &gt; 0 &amp;&amp; __result == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>ep-&gt;reginput != ep-&gt;regbol<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>opt[i].single == 0 &amp;&amp; (__extension__ (__builtin_constant_p(arglen) &amp;&amp; ((__builtin_constant_p(opt[i].name) &amp;&amp; strlen(opt[i].name) &lt; ((size_t)(arglen))) || (__builtin_constant_p(argv[optind]) &amp;&amp; strlen(argv[optind]) &lt; ((size_t)(arglen)))) ? __extension__ ({
    size_t __s1_len, __s2_len;
    (__builtin_constant_p(opt[i].name) &amp;&amp; __builtin_constant_p(argv[optind]) &amp;&amp; (__s1_len = __builtin_strlen(opt[i].name) , __s2_len = __builtin_strlen(argv[optind]) , (!((size_t)(const void *)((opt[i].name) + 1) - (size_t)(const void *)(opt[i].name) == 1) || __s1_len &gt;= 4) &amp;&amp; (!((size_t)(const void *)((argv[optind]) + 1) - (size_t)(const void *)(argv[optind]) == 1) || __s2_len &gt;= 4)) ? __builtin_strcmp(opt[i].name, argv[optind]) : (__builtin_constant_p(opt[i].name) &amp;&amp; ((size_t)(const void *)((opt[i].name) + 1) - (size_t)(const void *)(opt[i].name) == 1) &amp;&amp; (__s1_len = __builtin_strlen(opt[i].name) , __s1_len &lt; 4) ? (__builtin_constant_p(argv[optind]) &amp;&amp; ((size_t)(const void *)((argv[optind]) + 1) - (size_t)(const void *)(argv[optind]) == 1) ? __builtin_strcmp(opt[i].name, argv[optind]) : (__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(argv[optind]);
        int __result = (((const unsigned char *)(const char *)(opt[i].name))[0] - __s2[0]);
        if (__s1_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(opt[i].name))[1] - __s2[1]);
            if (__s1_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(opt[i].name))[2] - __s2[2]);
                if (__s1_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(opt[i].name))[3] - __s2[3]);
            }
        }
        __result;
    }))) : (__builtin_constant_p(argv[optind]) &amp;&amp; ((size_t)(const void *)((argv[optind]) + 1) - (size_t)(const void *)(argv[optind]) == 1) &amp;&amp; (__s2_len = __builtin_strlen(argv[optind]) , __s2_len &lt; 4) ? (__builtin_constant_p(opt[i].name) &amp;&amp; ((size_t)(const void *)((opt[i].name) + 1) - (size_t)(const void *)(opt[i].name) == 1) ? __builtin_strcmp(opt[i].name, argv[optind]) : (-(__extension__ ({
        const unsigned char *__s2 = (const unsigned char *)(const char *)(opt[i].name);
        int __result = (((const unsigned char *)(const char *)(argv[optind]))[0] - __s2[0]);
        if (__s2_len &gt; 0 &amp;&amp; __result == 0) {
            __result = (((const unsigned char *)(const char *)(argv[optind]))[1] - __s2[1]);
            if (__s2_len &gt; 1 &amp;&amp; __result == 0) {
                __result = (((const unsigned char *)(const char *)(argv[optind]))[2] - __s2[2]);
                if (__s2_len &gt; 2 &amp;&amp; __result == 0)
                    __result = (((const unsigned char *)(const char *)(argv[optind]))[3] - __s2[3]);
            }
        }
        __result;
    })))) : __builtin_strcmp(opt[i].name, argv[optind]))));
}) : strncmp(opt[i].name, argv[optind], arglen))) == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(sptr = strtok(V-&gt;buf + 5, "\n\t ")) != ((void *)0)<Number>2</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>strstr</SensitiveFunction>
	<ReferableCheck>(si = strstr(V-&gt;buf, "  Length: ")) != ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>prog == ((void *)0) || string == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(sptr = strtok(V-&gt;buf + 5, "\n\t ")) != ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(inbuff, "bm") != ((void *)0)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(fmt, "s") != ((void *)0)<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>strtok</SensitiveFunction>
	<ReferableCheck>(si = strstr(V-&gt;buf, "  Length: ")) != ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>prog == ((void *)0) || string == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(sptr = strtok(V-&gt;buf + 5, "\n\t ")) != ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(inbuff, "bm") != ((void *)0)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(fmt, "s") != ((void *)0)<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>subheap_insert</SensitiveFunction>
	<ReferableCheck>root-&gt;val &gt; val<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>prog == ((void *)0) || string == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(sptr = strtok(V-&gt;buf + 5, "\n\t ")) != ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(inbuff, "bm") != ((void *)0)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(fmt, "s") != ((void *)0)<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>subvq_gautbl_eval_logs3</SensitiveFunction>
	<ReferableCheck>!vq<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>prog == ((void *)0) || string == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(sptr = strtok(V-&gt;buf + 5, "\n\t ")) != ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(inbuff, "bm") != ((void *)0)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(fmt, "s") != ((void *)0)<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>subvq_init</SensitiveFunction>
	<ReferableCheck>subvqfile<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>prog == ((void *)0) || string == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(sptr = strtok(V-&gt;buf + 5, "\n\t ")) != ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(inbuff, "bm") != ((void *)0)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(fmt, "s") != ((void *)0)<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>subvq_map_compact</SensitiveFunction>
	<ReferableCheck>fgets(line, sizeof (line), fp) == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>prog == ((void *)0) || string == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(sptr = strtok(V-&gt;buf + 5, "\n\t ")) != ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(inbuff, "bm") != ((void *)0)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(fmt, "s") != ((void *)0)<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>subvq_mgau_eval</SensitiveFunction>
	<ReferableCheck>gs &amp;&amp; kb-&gt;gs4gs<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>prog == ((void *)0) || string == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(sptr = strtok(V-&gt;buf + 5, "\n\t ")) != ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(inbuff, "bm") != ((void *)0)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(fmt, "s") != ((void *)0)<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>subvq_mgau_shortlist</SensitiveFunction>
	<ReferableCheck>gs &amp;&amp; kb-&gt;gs4gs<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!vq<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(sptr = strtok(V-&gt;buf + 5, "\n\t ")) != ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(inbuff, "bm") != ((void *)0)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(fmt, "s") != ((void *)0)<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>swap_buf</SensitiveFunction>
	<ReferableCheck>fread(buf, el_sz, n_el, fp) != (size_t)n_el<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!vq<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(sptr = strtok(V-&gt;buf + 5, "\n\t ")) != ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(inbuff, "bm") != ((void *)0)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(fmt, "s") != ((void *)0)<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>swap_check</SensitiveFunction>
	<ReferableCheck>fgets(line, sizeof (line), fp) == ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!vq<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(sptr = strtok(V-&gt;buf + 5, "\n\t ")) != ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(inbuff, "bm") != ((void *)0)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(fmt, "s") != ((void *)0)<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>tmat_init</SensitiveFunction>
	<ReferableCheck>tmatfile<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!vq<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(sptr = strtok(V-&gt;buf + 5, "\n\t ")) != ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(inbuff, "bm") != ((void *)0)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(fmt, "s") != ((void *)0)<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>tree</SensitiveFunction>
	<ReferableCheck>disp_b[0] == 'y'<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!vq<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(sptr = strtok(V-&gt;buf + 5, "\n\t ")) != ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(inbuff, "bm") != ((void *)0)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(fmt, "s") != ((void *)0)<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>triphone_add</SensitiveFunction>
	<ReferableCheck>sscanf(lp, "%s%n", word, &amp;wlen) != 1<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>!vq<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(sptr = strtok(V-&gt;buf + 5, "\n\t ")) != ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(inbuff, "bm") != ((void *)0)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(fmt, "s") != ((void *)0)<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>unary_bin_encode</SensitiveFunction>
	<ReferableCheck>act_sym == 0<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>!vq<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(sptr = strtok(V-&gt;buf + 5, "\n\t ")) != ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(inbuff, "bm") != ((void *)0)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(fmt, "s") != ((void *)0)<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>unary_exp_golomb_mv_encode</SensitiveFunction>
	<ReferableCheck>act_sym == 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!vq<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(sptr = strtok(V-&gt;buf + 5, "\n\t ")) != ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(inbuff, "bm") != ((void *)0)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(fmt, "s") != ((void *)0)<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>ungetc</SensitiveFunction>
	<ReferableCheck>c == (-1)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!vq<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(sptr = strtok(V-&gt;buf + 5, "\n\t ")) != ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(inbuff, "bm") != ((void *)0)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(fmt, "s") != ((void *)0)<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>upweight</SensitiveFunction>
	<ReferableCheck>ld &gt;= nseq<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>nseq == 1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(sptr = strtok(V-&gt;buf + 5, "\n\t ")) != ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(inbuff, "bm") != ((void *)0)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(fmt, "s") != ((void *)0)<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>utt_word_trans</SensitiveFunction>
	<ReferableCheck>(frmno % ptranskip) != 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>nseq == 1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(sptr = strtok(V-&gt;buf + 5, "\n\t ")) != ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(inbuff, "bm") != ((void *)0)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(fmt, "s") != ((void *)0)<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>vithist_backtrace</SensitiveFunction>
	<ReferableCheck>(id = vithist_utt_end(kb-&gt;vithist, kb-&gt;kbcore)) &gt;= 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>nseq == 1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(sptr = strtok(V-&gt;buf + 5, "\n\t ")) != ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(inbuff, "bm") != ((void *)0)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(fmt, "s") != ((void *)0)<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>vithist_dag_write</SensitiveFunction>
	<ReferableCheck>(id = vithist_utt_end(kb-&gt;vithist, kb-&gt;kbcore)) &gt;= 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>nseq == 1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(sptr = strtok(V-&gt;buf + 5, "\n\t ")) != ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(inbuff, "bm") != ((void *)0)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(fmt, "s") != ((void *)0)<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>vithist_dump</SensitiveFunction>
	<ReferableCheck>(id = vithist_utt_end(kb-&gt;vithist, kb-&gt;kbcore)) &gt;= 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>fp<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(sptr = strtok(V-&gt;buf + 5, "\n\t ")) != ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(inbuff, "bm") != ((void *)0)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(fmt, "s") != ((void *)0)<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>vithist_enter</SensitiveFunction>
	<ReferableCheck>dict_filler_word(((kbc)-&gt;dict), wid)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>fp<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(sptr = strtok(V-&gt;buf + 5, "\n\t ")) != ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(inbuff, "bm") != ((void *)0)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(fmt, "s") != ((void *)0)<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>vithist_entry_alloc</SensitiveFunction>
	<ReferableCheck>f != vh-&gt;n_frm - 1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>vhid &lt; 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(sptr = strtok(V-&gt;buf + 5, "\n\t ")) != ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(inbuff, "bm") != ((void *)0)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(fmt, "s") != ((void *)0)<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>vithist_frame_gc</SensitiveFunction>
	<ReferableCheck>!vh-&gt;bghist<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>vhid &lt; 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(sptr = strtok(V-&gt;buf + 5, "\n\t ")) != ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(inbuff, "bm") != ((void *)0)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(fmt, "s") != ((void *)0)<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>vithist_frame_windup</SensitiveFunction>
	<ReferableCheck>(frmno % ptranskip) != 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>vhid &lt; 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(sptr = strtok(V-&gt;buf + 5, "\n\t ")) != ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(inbuff, "bm") != ((void *)0)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(fmt, "s") != ((void *)0)<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>vithist_lmstate_enter</SensitiveFunction>
	<ReferableCheck>vhid &lt; 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>vhid &lt; 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(sptr = strtok(V-&gt;buf + 5, "\n\t ")) != ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(inbuff, "bm") != ((void *)0)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(fmt, "s") != ((void *)0)<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>vithist_prune</SensitiveFunction>
	<ReferableCheck>bestwordscr &lt; lextree-&gt;wbest<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>vhid &lt; 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(sptr = strtok(V-&gt;buf + 5, "\n\t ")) != ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(inbuff, "bm") != ((void *)0)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(fmt, "s") != ((void *)0)<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>vithist_rescore</SensitiveFunction>
	<ReferableCheck>cf != lastfrm<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>f != vh-&gt;n_frm - 1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(sptr = strtok(V-&gt;buf + 5, "\n\t ")) != ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(inbuff, "bm") != ((void *)0)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(fmt, "s") != ((void *)0)<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>vithist_utt_end</SensitiveFunction>
	<ReferableCheck>f != vh-&gt;n_frm - 1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>f != vh-&gt;n_frm - 1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(sptr = strtok(V-&gt;buf + 5, "\n\t ")) != ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(inbuff, "bm") != ((void *)0)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(fmt, "s") != ((void *)0)<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>vithist_utt_reset</SensitiveFunction>
	<ReferableCheck>(id = vithist_utt_end(kb-&gt;vithist, kb-&gt;kbcore)) &gt;= 0<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>f != vh-&gt;n_frm - 1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(sptr = strtok(V-&gt;buf + 5, "\n\t ")) != ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(inbuff, "bm") != ((void *)0)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(fmt, "s") != ((void *)0)<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>wid_dict_lm_map</SensitiveFunction>
	<ReferableCheck>(kb-&gt;lm = lm_read(lmfile, langwt, inspen, uw)) == ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>f != vh-&gt;n_frm - 1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(sptr = strtok(V-&gt;buf + 5, "\n\t ")) != ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(inbuff, "bm") != ((void *)0)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(fmt, "s") != ((void *)0)<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>write_checksum</SensitiveFunction>
	<ReferableCheck>gf-&gt;parallel<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>f != vh-&gt;n_frm - 1<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(sptr = strtok(V-&gt;buf + 5, "\n\t ")) != ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(inbuff, "bm") != ((void *)0)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(fmt, "s") != ((void *)0)<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>write_gauge_info_file</SensitiveFunction>
	<ReferableCheck>gf-&gt;fp != ((void *)0)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>gf-&gt;parallel<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(sptr = strtok(V-&gt;buf + 5, "\n\t ")) != ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(inbuff, "bm") != ((void *)0)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(fmt, "s") != ((void *)0)<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
<Reference_for_Repairing_Missing_Check>
	<SensitiveFunction>write_i64</SensitiveFunction>
	<ReferableCheck>!write_i32(fp, soffset)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>!write_i32(fp, poffset)<Number>1</Number>
	</ReferableCheck>
	<ReferableCheck>(sptr = strtok(V-&gt;buf + 5, "\n\t ")) != ((void *)0)<Number>2</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(inbuff, "bm") != ((void *)0)<Number>3</Number>
	</ReferableCheck>
	<ReferableCheck>strstr(fmt, "s") != ((void *)0)<Number>4</Number>
	</ReferableCheck>
</Reference_for_Repairing_Missing_Check>
